// @generated by protoc-gen-es v1.2.0 with parameter "target=js+dts"
// @generated from file api/commons/public/integrations.proto (package api.commons.public, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * all supported integrations
 *
 * @generated from enum api.commons.public.IntegrationType
 */
export const IntegrationType = proto3.makeEnum(
  "api.commons.public.IntegrationType",
  [
    {no: 0, name: "INTEGRATION_TYPE_UNKNOWN", localName: "UNKNOWN"},
    {no: 100, name: "INTEGRATION_TYPE_BRAINTREE", localName: "BRAINTREE"},
    {no: 200, name: "INTEGRATION_TYPE_RELATIENT", localName: "RELATIENT"},
    {no: 300, name: "INTEGRATION_TYPE_CYBERSOURCE", localName: "CYBERSOURCE"},
    {no: 400, name: "INTEGRATION_TYPE_CIRCPRO", localName: "CIRCPRO"},
    {no: 500, name: "INTEGRATION_TYPE_AUTHORIZENET", localName: "AUTHORIZENET"},
    {no: 600, name: "INTEGRATION_TYPE_EXPITRANS", localName: "EXPITRANS"},
    {no: 700, name: "INTEGRATION_TYPE_AXIAMEDFUSION", localName: "AXIAMEDFUSION"},
    {no: 800, name: "INTEGRATION_TYPE_INSTAMED", localName: "INSTAMED"},
    {no: 900, name: "INTEGRATION_TYPE_USAEPAY", localName: "USAEPAY"},
    {no: 1000, name: "INTEGRATION_TYPE_EZIDEBIT", localName: "EZIDEBIT"},
    {no: 1100, name: "INTEGRATION_TYPE_BAMBORA", localName: "BAMBORA"},
    {no: 1200, name: "INTEGRATION_TYPE_REPAY", localName: "REPAY"},
    {no: 1300, name: "INTEGRATION_TYPE_AXIA", localName: "AXIA"},
    {no: 1400, name: "INTEGRATION_TYPE_SECURETRADING", localName: "SECURETRADING"},
    {no: 1500, name: "INTEGRATION_TYPE_PAYMENTVISION", localName: "PAYMENTVISION"},
    {no: 1600, name: "INTEGRATION_TYPE_INTERPROSE", localName: "INTERPROSE"},
    {no: 1700, name: "INTEGRATION_TYPE_DALLASNEWS", localName: "DALLASNEWS"},
    {no: 1800, name: "INTEGRATION_TYPE_PAYWAY", localName: "PAYWAY"},
    {no: 1900, name: "INTEGRATION_TYPE_BILLINGTREE", localName: "BILLINGTREE"},
    {no: 2000, name: "INTEGRATION_TYPE_EXPERIAN", localName: "EXPERIAN"},
    {no: 2100, name: "INTEGRATION_TYPE_NEWSCYCLE", localName: "NEWSCYCLE"},
    {no: 2200, name: "INTEGRATION_TYPE_TRUSTCOMMERCE", localName: "TRUSTCOMMERCE"},
    {no: 2300, name: "INTEGRATION_TYPE_VANTIV", localName: "VANTIV"},
    {no: 2400, name: "INTEGRATION_TYPE_JOURNEY", localName: "JOURNEY"},
    {no: 2500, name: "INTEGRATION_TYPE_ATHENAHEALTH", localName: "ATHENAHEALTH"},
    {no: 2600, name: "INTEGRATION_TYPE_BRAINWORKS", localName: "BRAINWORKS"},
    {no: 2700, name: "INTEGRATION_TYPE_OSGCONNECT", localName: "OSGCONNECT"},
    {no: 2800, name: "INTEGRATION_TYPE_NTVB", localName: "NTVB"},
    {no: 2900, name: "INTEGRATION_TYPE_ELAVON", localName: "ELAVON"},
    {no: 3000, name: "INTEGRATION_TYPE_GLOBALPAYMENTS", localName: "GLOBALPAYMENTS"},
    {no: 3100, name: "INTEGRATION_TYPE_PAY_SCOUT", localName: "PAY_SCOUT"},
    {no: 3200, name: "INTEGRATION_TYPE_I2C", localName: "I2C"},
    {no: 3300, name: "INTEGRATION_TYPE_OPAYO", localName: "OPAYO"},
    {no: 3400, name: "INTEGRATION_TYPE_SHIFT4", localName: "SHIFT4"},
  ],
);

/**
 * all supported methods that can be called prefixed with the integration_type
 * name.
 *
 * @generated from enum api.commons.public.RequestMethod
 */
export const RequestMethod = proto3.makeEnum(
  "api.commons.public.RequestMethod",
  [
    {no: 0, name: "REQUEST_METHOD_UNKNOWN", localName: "UNKNOWN"},
    {no: 101, name: "REQUEST_METHOD_BRAINTREE_CREDITSALE", localName: "BRAINTREE_CREDITSALE"},
    {no: 102, name: "REQUEST_METHOD_BRAINTREE_BANKSALE", localName: "BRAINTREE_BANKSALE"},
    {no: 201, name: "REQUEST_METHOD_RELATIENT_GETPATIENTBALANCE", localName: "RELATIENT_GETPATIENTBALANCE"},
    {no: 202, name: "REQUEST_METHOD_RELATIENT_GETPATIENTCCTOKENS", localName: "RELATIENT_GETPATIENTCCTOKENS"},
    {no: 203, name: "REQUEST_METHOD_RELATIENT_POSTPATIENTTOKEN", localName: "RELATIENT_POSTPATIENTTOKEN"},
    {no: 204, name: "REQUEST_METHOD_RELATIENT_POSTPATIENTBALANCE", localName: "RELATIENT_POSTPATIENTBALANCE"},
    {no: 205, name: "REQUEST_METHOD_RELATIENT_GETPATIENT", localName: "RELATIENT_GETPATIENT"},
    {no: 206, name: "REQUEST_METHOD_RELATIENT_POSTBALANCEBYID", localName: "RELATIENT_POSTBALANCEBYID"},
    {no: 301, name: "REQUEST_METHOD_CYBERSOURCE_CREDITPAYMENT", localName: "CYBERSOURCE_CREDITPAYMENT"},
    {no: 302, name: "REQUEST_METHOD_CYBERSOURCE_ECHECKPAYMENT", localName: "CYBERSOURCE_ECHECKPAYMENT"},
    {no: 401, name: "REQUEST_METHOD_CIRCPRO_PHONELOOKUPWITHBUNDLE", localName: "CIRCPRO_PHONELOOKUPWITHBUNDLE"},
    {no: 402, name: "REQUEST_METHOD_CIRCPRO_PHONELOOKUP", localName: "CIRCPRO_PHONELOOKUP"},
    {no: 403, name: "REQUEST_METHOD_CIRCPRO_VACATIONRESTARTINQUIRY", localName: "CIRCPRO_VACATIONRESTARTINQUIRY"},
    {no: 404, name: "REQUEST_METHOD_CIRCPRO_COMPLAINTINQUIRY", localName: "CIRCPRO_COMPLAINTINQUIRY"},
    {no: 405, name: "REQUEST_METHOD_CIRCPRO_ACCOUNTINQUIRY", localName: "CIRCPRO_ACCOUNTINQUIRY"},
    {no: 406, name: "REQUEST_METHOD_CIRCPRO_ACCOUNTINQUIRYWITHTAX", localName: "CIRCPRO_ACCOUNTINQUIRYWITHTAX"},
    {no: 407, name: "REQUEST_METHOD_CIRCPRO_ACCOUNTINQUIRYWITHTAXBUNDLE", localName: "CIRCPRO_ACCOUNTINQUIRYWITHTAXBUNDLE"},
    {no: 408, name: "REQUEST_METHOD_CIRCPRO_COMPLAINTCODES", localName: "CIRCPRO_COMPLAINTCODES"},
    {no: 409, name: "REQUEST_METHOD_CIRCPRO_COMPLAINTUPDATE", localName: "CIRCPRO_COMPLAINTUPDATE"},
    {no: 410, name: "REQUEST_METHOD_CIRCPRO_VACATIONUPDATE", localName: "CIRCPRO_VACATIONUPDATE"},
    {no: 411, name: "REQUEST_METHOD_CIRCPRO_RESTARTUPDATE", localName: "CIRCPRO_RESTARTUPDATE"},
    {no: 412, name: "REQUEST_METHOD_CIRCPRO_LAW_IMMEDIATEPAYMENT", localName: "CIRCPRO_LAW_IMMEDIATEPAYMENT"},
    {no: 413, name: "REQUEST_METHOD_CIRCPRO_LAW_UPDATEDATAWITHPAC", localName: "CIRCPRO_LAW_UPDATEDATAWITHPAC"},
    {no: 414, name: "REQUEST_METHOD_CIRCPRO_LAW_GETCUSTOMERS", localName: "CIRCPRO_LAW_GETCUSTOMERS"},
    {no: 501, name: "REQUEST_METHOD_AUTHORIZENET_CHARGECREDITCARD", localName: "AUTHORIZENET_CHARGECREDITCARD"},
    {no: 502, name: "REQUEST_METHOD_AUTHORIZENET_DEBITBANKACCOUNT", localName: "AUTHORIZENET_DEBITBANKACCOUNT"},
    {no: 503, name: "REQUEST_METHOD_AUTHORIZENET_CREATECUSTOMERPAYMENTPROFILE", localName: "AUTHORIZENET_CREATECUSTOMERPAYMENTPROFILE"},
    {no: 504, name: "REQUEST_METHOD_AUTHORIZENET_PAYPALTRANSACTION", localName: "AUTHORIZENET_PAYPALTRANSACTION"},
    {no: 505, name: "REQUEST_METHOD_AUTHORIZENET_GOOGLEPAYTRANSACTION", localName: "AUTHORIZENET_GOOGLEPAYTRANSACTION"},
    {no: 506, name: "REQUEST_METHOD_AUTHORIZENET_APPLEPAYTRANSACTION", localName: "AUTHORIZENET_APPLEPAYTRANSACTION"},
    {no: 507, name: "REQUEST_METHOD_AUTHORIZENET_PAYPALAUTHCAPTURE", localName: "AUTHORIZENET_PAYPALAUTHCAPTURE"},
    {no: 601, name: "REQUEST_METHOD_EXPITRANS_CCTRANSACTION", localName: "EXPITRANS_CCTRANSACTION"},
    {no: 602, name: "REQUEST_METHOD_EXPITRANS_ACHTRANSACTION", localName: "EXPITRANS_ACHTRANSACTION"},
    {no: 701, name: "REQUEST_METHOD_AXIAMEDFUSION_CCTRANSACTION", localName: "AXIAMEDFUSION_CCTRANSACTION"},
    {no: 702, name: "REQUEST_METHOD_AXIAMEDFUSION_ACHTRANSACTION", localName: "AXIAMEDFUSION_ACHTRANSACTION"},
    {no: 703, name: "REQUEST_METHOD_AXIAMEDFUSION_CARDVERIFY", localName: "AXIAMEDFUSION_CARDVERIFY"},
    {no: 801, name: "REQUEST_METHOD_INSTAMED_PAYMENTSALE", localName: "INSTAMED_PAYMENTSALE"},
    {no: 802, name: "REQUEST_METHOD_INSTAMED_VOIDPAYMENT", localName: "INSTAMED_VOIDPAYMENT"},
    {no: 901, name: "REQUEST_METHOD_USAEPAY_SUBMITCCPAYMENTS", localName: "USAEPAY_SUBMITCCPAYMENTS"},
    {no: 902, name: "REQUEST_METHOD_USAEPAY_SUBMITACHPAYMENTS", localName: "USAEPAY_SUBMITACHPAYMENTS"},
    {no: 1001, name: "REQUEST_METHOD_EZIDEBIT_SUBMITCCPAYMENTS", localName: "EZIDEBIT_SUBMITCCPAYMENTS"},
    {no: 1002, name: "REQUEST_METHOD_EZIDEBIT_SUBMITACHPAYMENTS", localName: "EZIDEBIT_SUBMITACHPAYMENTS"},
    {no: 1101, name: "REQUEST_METHOD_BAMBORA_SUBMITCCPAYMENTS", localName: "BAMBORA_SUBMITCCPAYMENTS"},
    {no: 1102, name: "REQUEST_METHOD_BAMBORA_SUBMITACHPAYMENTS", localName: "BAMBORA_SUBMITACHPAYMENTS"},
    {no: 1201, name: "REQUEST_METHOD_REPAY_STORECARD", localName: "REPAY_STORECARD"},
    {no: 1202, name: "REQUEST_METHOD_REPAY_PAYMENTTOKEN", localName: "REPAY_PAYMENTTOKEN"},
    {no: 1203, name: "REQUEST_METHOD_REPAY_ACHPAYMENTTOKEN", localName: "REPAY_ACHPAYMENTTOKEN"},
    {no: 1301, name: "REQUEST_METHOD_AXIA_SUBMITSALEREQUESTBYCC", localName: "AXIA_SUBMITSALEREQUESTBYCC"},
    {no: 1302, name: "REQUEST_METHOD_AXIA_SUBMITSALEREQUESTBYCHECK", localName: "AXIA_SUBMITSALEREQUESTBYCHECK"},
    {no: 1401, name: "REQUEST_METHOD_SECURETRADING_SENDPAYMENT", localName: "SECURETRADING_SENDPAYMENT"},
    {no: 1501, name: "REQUEST_METHOD_PAYMENTVISION_SUBMITCARDSALEREQUESTBYCC", localName: "PAYMENTVISION_SUBMITCARDSALEREQUESTBYCC"},
    {no: 1502, name: "REQUEST_METHOD_PAYMENTVISION_SUBMITCARDSALEREQUESTBYACH", localName: "PAYMENTVISION_SUBMITCARDSALEREQUESTBYACH"},
    {no: 1601, name: "REQUEST_METHOD_INTERPROSE_LOOKUPACCOUNT", localName: "INTERPROSE_LOOKUPACCOUNT"},
    {no: 1602, name: "REQUEST_METHOD_INTERPROSE_SUBMITCARDSALEREQUESTBYCC", localName: "INTERPROSE_SUBMITCARDSALEREQUESTBYCC"},
    {no: 1603, name: "REQUEST_METHOD_INTERPROSE_SUBMITCARDSALEREQUESTBYACH", localName: "INTERPROSE_SUBMITCARDSALEREQUESTBYACH"},
    {no: 1604, name: "REQUEST_METHOD_INTERPROSE_LOOKUPPAYMENTID", localName: "INTERPROSE_LOOKUPPAYMENTID"},
    {no: 1605, name: "REQUEST_METHOD_INTERPROSE_LOOKUPACCOUNTBYFORMID", localName: "INTERPROSE_LOOKUPACCOUNTBYFORMID"},
    {no: 1701, name: "REQUEST_METHOD_DALLASNEWS_SEARCHBYPHONE", localName: "DALLASNEWS_SEARCHBYPHONE"},
    {no: 1702, name: "REQUEST_METHOD_DALLASNEWS_SEARCHBYZIPSTREET", localName: "DALLASNEWS_SEARCHBYZIPSTREET"},
    {no: 1703, name: "REQUEST_METHOD_DALLASNEWS_SEARCHBY", localName: "DALLASNEWS_SEARCHBY"},
    {no: 1704, name: "REQUEST_METHOD_DALLASNEWS_CREATEVACATION", localName: "DALLASNEWS_CREATEVACATION"},
    {no: 1705, name: "REQUEST_METHOD_DALLASNEWS_GETVACATION", localName: "DALLASNEWS_GETVACATION"},
    {no: 1706, name: "REQUEST_METHOD_DALLASNEWS_GETVACATIONDAYSBETWEEN", localName: "DALLASNEWS_GETVACATIONDAYSBETWEEN"},
    {no: 1707, name: "REQUEST_METHOD_DALLASNEWS_GETVACATIONWITHCUTOFF", localName: "DALLASNEWS_GETVACATIONWITHCUTOFF"},
    {no: 1708, name: "REQUEST_METHOD_DALLASNEWS_DELETEVACATION", localName: "DALLASNEWS_DELETEVACATION"},
    {no: 1709, name: "REQUEST_METHOD_DALLASNEWS_ADDCOMPLAINT", localName: "DALLASNEWS_ADDCOMPLAINT"},
    {no: 1710, name: "REQUEST_METHOD_DALLASNEWS_UPDATEPHONENUMBER", localName: "DALLASNEWS_UPDATEPHONENUMBER"},
    {no: 1711, name: "REQUEST_METHOD_DALLASNEWS_STOPACCOUNT", localName: "DALLASNEWS_STOPACCOUNT"},
    {no: 1712, name: "REQUEST_METHOD_DALLASNEWS_CCPAYMENTTOKEN", localName: "DALLASNEWS_CCPAYMENTTOKEN"},
    {no: 1713, name: "REQUEST_METHOD_DALLASNEWS_ACHPAYMENTTOKEN", localName: "DALLASNEWS_ACHPAYMENTTOKEN"},
    {no: 1801, name: "REQUEST_METHOD_PAYWAY_SUBMITCARDSALEREQUEST", localName: "PAYWAY_SUBMITCARDSALEREQUEST"},
    {no: 1802, name: "REQUEST_METHOD_PAYWAY_CREATETOKENREQUEST", localName: "PAYWAY_CREATETOKENREQUEST"},
    {no: 1803, name: "REQUEST_METHOD_PAYWAY_SUBMITACHSALEREQUEST", localName: "PAYWAY_SUBMITACHSALEREQUEST"},
    {no: 1901, name: "REQUEST_METHOD_BILLINGTREE_SUBMITCARDSALEREQUEST", localName: "BILLINGTREE_SUBMITCARDSALEREQUEST"},
    {no: 2001, name: "REQUEST_METHOD_EXPERIAN_CC_PAYMENT_REQUEST", localName: "EXPERIAN_CC_PAYMENT_REQUEST"},
    {no: 2002, name: "REQUEST_METHOD_EXPERIAN_CC_PAYMENTPLANREQUEST", localName: "EXPERIAN_CC_PAYMENTPLANREQUEST"},
    {no: 2003, name: "REQUEST_METHOD_EXPERIAN_BALANCEREQUEST", localName: "EXPERIAN_BALANCEREQUEST"},
    {no: 2004, name: "REQUEST_METHOD_EXPERIAN_ACH_PAYMENT_REQUEST", localName: "EXPERIAN_ACH_PAYMENT_REQUEST"},
    {no: 2005, name: "REQUEST_METHOD_EXPERIAN_ACH_PAYMENTPLANREQUEST", localName: "EXPERIAN_ACH_PAYMENTPLANREQUEST"},
    {no: 2101, name: "REQUEST_METHOD_NEWSCYCLE_LOGIN", localName: "NEWSCYCLE_LOGIN"},
    {no: 2102, name: "REQUEST_METHOD_NEWSCYCLE_SEARCHPAGE", localName: "NEWSCYCLE_SEARCHPAGE"},
    {no: 2103, name: "REQUEST_METHOD_NEWSCYCLE_BILLINGINFO", localName: "NEWSCYCLE_BILLINGINFO"},
    {no: 2104, name: "REQUEST_METHOD_NEWSCYCLE_SERVICEERRORINFO", localName: "NEWSCYCLE_SERVICEERRORINFO"},
    {no: 2105, name: "REQUEST_METHOD_NEWSCYCLE_SERVICEERRORTRANS", localName: "NEWSCYCLE_SERVICEERRORTRANS"},
    {no: 2106, name: "REQUEST_METHOD_NEWSCYCLE_STOPINFO", localName: "NEWSCYCLE_STOPINFO"},
    {no: 2107, name: "REQUEST_METHOD_NEWSCYCLE_STOPTRANS", localName: "NEWSCYCLE_STOPTRANS"},
    {no: 2108, name: "REQUEST_METHOD_NEWSCYCLE_RENEWINFO", localName: "NEWSCYCLE_RENEWINFO"},
    {no: 2109, name: "REQUEST_METHOD_NEWSCYCLE_AUTORENEWINFO", localName: "NEWSCYCLE_AUTORENEWINFO"},
    {no: 2110, name: "REQUEST_METHOD_NEWSCYCLE_AUTOTRAN", localName: "NEWSCYCLE_AUTOTRAN"},
    {no: 2111, name: "REQUEST_METHOD_NEWSCYCLE_PAYINFO", localName: "NEWSCYCLE_PAYINFO"},
    {no: 2112, name: "REQUEST_METHOD_NEWSCYCLE_PAYTRAN", localName: "NEWSCYCLE_PAYTRAN"},
    {no: 2201, name: "REQUEST_METHOD_TRUSTCOMMERCE_CREDITSALE", localName: "TRUSTCOMMERCE_CREDITSALE"},
    {no: 2202, name: "REQUEST_METHOD_TRUSTCOMMERCE_ACHSALE", localName: "TRUSTCOMMERCE_ACHSALE"},
    {no: 2301, name: "REQUEST_METHOD_VANTIV_CREDITSALE", localName: "VANTIV_CREDITSALE"},
    {no: 2302, name: "REQUEST_METHOD_VANTIV_ACHSALE", localName: "VANTIV_ACHSALE"},
    {no: 2401, name: "REQUEST_METHOD_JOURNEY_LATEST", localName: "JOURNEY_LATEST"},
    {no: 2501, name: "REQUEST_METHOD_ATHENAHEALTH_GETPATIENTS", localName: "ATHENAHEALTH_GETPATIENTS"},
    {no: 2502, name: "REQUEST_METHOD_ATHENAHEALTH_GETPATIENTSWITHID", localName: "ATHENAHEALTH_GETPATIENTSWITHID"},
    {no: 2503, name: "REQUEST_METHOD_ATHENAHEALTH_CCPAYMENT", localName: "ATHENAHEALTH_CCPAYMENT"},
    {no: 2601, name: "REQUEST_METHOD_BRAINWORKS_GETCUSTOMERSBYPHONE", localName: "BRAINWORKS_GETCUSTOMERSBYPHONE"},
    {no: 2602, name: "REQUEST_METHOD_BRAINWORKS_GETSUSPENDS", localName: "BRAINWORKS_GETSUSPENDS"},
    {no: 2603, name: "REQUEST_METHOD_BRAINWORKS_GETCUSTOMERBYCUSTIDV2", localName: "BRAINWORKS_GETCUSTOMERBYCUSTIDV2"},
    {no: 2604, name: "REQUEST_METHOD_BRAINWORKS_GETCOMPLAINTS", localName: "BRAINWORKS_GETCOMPLAINTS"},
    {no: 2605, name: "REQUEST_METHOD_BRAINWORKS_GETCODESORTYPES", localName: "BRAINWORKS_GETCODESORTYPES"},
    {no: 2606, name: "REQUEST_METHOD_BRAINWORKS_STOPSUSPENDS", localName: "BRAINWORKS_STOPSUSPENDS"},
    {no: 2607, name: "REQUEST_METHOD_BRAINWORKS_STARTSUSPENDS", localName: "BRAINWORKS_STARTSUSPENDS"},
    {no: 2608, name: "REQUEST_METHOD_BRAINWORKS_SENDCOMPLAINT", localName: "BRAINWORKS_SENDCOMPLAINT"},
    {no: 2609, name: "REQUEST_METHOD_BRAINWORKS_GETCUSTOMERBYCUSTID", localName: "BRAINWORKS_GETCUSTOMERBYCUSTID"},
    {no: 2701, name: "REQUEST_METHOD_OSGCONNECT_CCPAYMENTS", localName: "OSGCONNECT_CCPAYMENTS"},
    {no: 2702, name: "REQUEST_METHOD_OSGCONNECT_ACHPAYMENTS", localName: "OSGCONNECT_ACHPAYMENTS"},
    {no: 2703, name: "REQUEST_METHOD_OSGCONNECT_VALIDATEACCOUNTNO", localName: "OSGCONNECT_VALIDATEACCOUNTNO"},
    {no: 2801, name: "REQUEST_METHOD_NTVB_CREDIT_MISSED_DELIVERY", localName: "NTVB_CREDIT_MISSED_DELIVERY"},
    {no: 2802, name: "REQUEST_METHOD_NTVB_CUSTOMER_SEARCH", localName: "NTVB_CUSTOMER_SEARCH"},
    {no: 2803, name: "REQUEST_METHOD_NTVB_END_CALL", localName: "NTVB_END_CALL"},
    {no: 2804, name: "REQUEST_METHOD_NTVB_INTEGRATION_DEFINITION", localName: "NTVB_INTEGRATION_DEFINITION"},
    {no: 2805, name: "REQUEST_METHOD_NTVB_MISSED_DELIVERY", localName: "NTVB_MISSED_DELIVERY"},
    {no: 2806, name: "REQUEST_METHOD_NTVB_REMOVE_AUTORENEWAL", localName: "NTVB_REMOVE_AUTORENEWAL"},
    {no: 2807, name: "REQUEST_METHOD_NTVB_RENEW_SUBSCRIPTION", localName: "NTVB_RENEW_SUBSCRIPTION"},
    {no: 2808, name: "REQUEST_METHOD_NTVB_RENEWAL_OFFERS", localName: "NTVB_RENEWAL_OFFERS"},
    {no: 2809, name: "REQUEST_METHOD_NTVB_SET_AUTORENEWAL", localName: "NTVB_SET_AUTORENEWAL"},
    {no: 2810, name: "REQUEST_METHOD_NTVB_START_INCOMING_CALL", localName: "NTVB_START_INCOMING_CALL"},
    {no: 2811, name: "REQUEST_METHOD_NTVB_START_OUTGOING_CALL", localName: "NTVB_START_OUTGOING_CALL"},
    {no: 2812, name: "REQUEST_METHOD_NTVB_SUBSCRIPTION_INFO", localName: "NTVB_SUBSCRIPTION_INFO"},
    {no: 2813, name: "REQUEST_METHOD_NTVB_VACATION_STOP", localName: "NTVB_VACATION_STOP"},
    {no: 2814, name: "REQUEST_METHOD_NTVB_AUTHTEST", localName: "NTVB_AUTHTEST"},
    {no: 2901, name: "REQUEST_METHOD_ELAVON_CREDIT_CARD_SALE", localName: "ELAVON_CREDIT_CARD_SALE"},
    {no: 2902, name: "REQUEST_METHOD_ELAVON_ADD_RECURRING", localName: "ELAVON_ADD_RECURRING"},
    {no: 2903, name: "REQUEST_METHOD_ELAVON_DCC_RESPONSE", localName: "ELAVON_DCC_RESPONSE"},
    {no: 2904, name: "REQUEST_METHOD_ELAVON_DELETE_RECURRING", localName: "ELAVON_DELETE_RECURRING"},
    {no: 2905, name: "REQUEST_METHOD_ELAVON_UPDATE_RECURRING", localName: "ELAVON_UPDATE_RECURRING"},
    {no: 2906, name: "REQUEST_METHOD_ELAVON_HEALTH_CARE_CC_SALE", localName: "ELAVON_HEALTH_CARE_CC_SALE"},
    {no: 2907, name: "REQUEST_METHOD_ELAVON_ADD_INSTALLMENT", localName: "ELAVON_ADD_INSTALLMENT"},
    {no: 2908, name: "REQUEST_METHOD_ELAVON_UPDATE_INSTALLMENT", localName: "ELAVON_UPDATE_INSTALLMENT"},
    {no: 2909, name: "REQUEST_METHOD_ELAVON_DELETE_INSTALLMENT", localName: "ELAVON_DELETE_INSTALLMENT"},
    {no: 2910, name: "REQUEST_METHOD_ELAVON_MCC_CREDIT_CARD_SALE", localName: "ELAVON_MCC_CREDIT_CARD_SALE"},
    {no: 3001, name: "REQUEST_METHOD_GLOBALPAYMENTS_CARDSALE", localName: "GLOBALPAYMENTS_CARDSALE"},
    {no: 3002, name: "REQUEST_METHOD_GLOBALPAYMENTS_GET_TRANSACTION_BY_ID", localName: "GLOBALPAYMENTS_GET_TRANSACTION_BY_ID"},
    {no: 3003, name: "REQUEST_METHOD_GLOBALPAYMENTS_LIST_TRANSACTIONS", localName: "GLOBALPAYMENTS_LIST_TRANSACTIONS"},
    {no: 3004, name: "REQUEST_METHOD_GLOBALPAYMENTS_REFUND_SALE", localName: "GLOBALPAYMENTS_REFUND_SALE"},
    {no: 3005, name: "REQUEST_METHOD_GLOBALPAYMENTS_REVERSE_SALE_OR_REFUND", localName: "GLOBALPAYMENTS_REVERSE_SALE_OR_REFUND"},
    {no: 3101, name: "REQUEST_METHOD_PAY_SCOUT_CREDIT_CARD_SALE", localName: "PAY_SCOUT_CREDIT_CARD_SALE"},
    {no: 3102, name: "REQUEST_METHOD_PAY_SCOUT_ECHECK_SALE", localName: "PAY_SCOUT_ECHECK_SALE"},
    {no: 3201, name: "REQUEST_METHOD_I2C_ECHO", localName: "I2C_ECHO"},
    {no: 3202, name: "REQUEST_METHOD_I2C_BALANCE_INQUIRY", localName: "I2C_BALANCE_INQUIRY"},
    {no: 3203, name: "REQUEST_METHOD_I2C_VERIFY_USER", localName: "I2C_VERIFY_USER"},
    {no: 3204, name: "REQUEST_METHOD_I2C_SEARCH_CUSTOMER", localName: "I2C_SEARCH_CUSTOMER"},
    {no: 3205, name: "REQUEST_METHOD_I2C_MAKE_PAYMENT", localName: "I2C_MAKE_PAYMENT"},
    {no: 3206, name: "REQUEST_METHOD_I2C_GET_CARDHOLDER_PROFILE", localName: "I2C_GET_CARDHOLDER_PROFILE"},
    {no: 3207, name: "REQUEST_METHOD_I2C_GET_CARDHOLDER_STATEMENT", localName: "I2C_GET_CARDHOLDER_STATEMENT"},
    {no: 3208, name: "REQUEST_METHOD_I2C_GET_CARDHOLDER_BALANCE", localName: "I2C_GET_CARDHOLDER_BALANCE"},
    {no: 3209, name: "REQUEST_METHOD_I2C_GET_CREDITPAYMENT_INFO", localName: "I2C_GET_CREDITPAYMENT_INFO"},
    {no: 3210, name: "REQUEST_METHOD_I2C_TRANSACTION_HISTORY", localName: "I2C_TRANSACTION_HISTORY"},
    {no: 3301, name: "REQUEST_METHOD_OPAYO_CCPAYMENTS", localName: "OPAYO_CCPAYMENTS"},
    {no: 3401, name: "REQUEST_METHOD_SHIFT4_CCPAYMENTS", localName: "SHIFT4_CCPAYMENTS"},
  ],
);

/**
 * @generated from enum api.commons.public.TransactionType
 */
export const TransactionType = proto3.makeEnum(
  "api.commons.public.TransactionType",
  [
    {no: 0, name: "TRANSACTION_TYPE_PAYMENT", localName: "PAYMENT"},
    {no: 1, name: "TRANSACTION_TYPE_DATA_INQUIRY", localName: "DATA_INQUIRY"},
    {no: 2, name: "TRANSACTION_TYPE_ACCOUNT_VERIFY", localName: "ACCOUNT_VERIFY"},
  ],
);

/**
 * @generated from enum api.commons.public.RequestSource
 */
export const RequestSource = proto3.makeEnum(
  "api.commons.public.RequestSource",
  [
    {no: 0, name: "REQUEST_SOURCE_IVR", localName: "IVR"},
    {no: 1, name: "REQUEST_SOURCE_EMAIL", localName: "EMAIL"},
    {no: 2, name: "REQUEST_SOURCE_WEB", localName: "WEB"},
    {no: 3, name: "REQUEST_SOURCE_SMS", localName: "SMS"},
    {no: 4, name: "REQUEST_SOURCE_CHAT", localName: "CHAT"},
    {no: 5, name: "REQUEST_SOURCE_LMS", localName: "LMS"},
  ],
);

/**
 * @generated from enum api.commons.public.TransactionResult
 */
export const TransactionResult = proto3.makeEnum(
  "api.commons.public.TransactionResult",
  [
    {no: 0, name: "TRANSACTION_RESULT_SUCCESS", localName: "SUCCESS"},
    {no: 1, name: "TRANSACTION_RESULT_FAILED", localName: "FAILED"},
  ],
);

/**
 * supported types of values when sending a request or response.
 *
 * @generated from enum api.commons.public.ValueType
 */
export const ValueType = proto3.makeEnum(
  "api.commons.public.ValueType",
  [
    {no: 0, name: "VALUE_TYPE_UNKNOWN", localName: "UNKNOWN"},
    {no: 1, name: "VALUE_TYPE_NUMBER", localName: "NUMBER"},
    {no: 2, name: "VALUE_TYPE_BOOL", localName: "BOOL"},
    {no: 3, name: "VALUE_TYPE_MAP", localName: "MAP"},
    {no: 4, name: "VALUE_TYPE_ARRAY", localName: "ARRAY"},
    {no: 5, name: "VALUE_TYPE_INT", localName: "INT"},
    {no: 6, name: "VALUE_TYPE_STRING", localName: "STRING"},
    {no: 7, name: "VALUE_TYPE_TIME", localName: "TIME"},
    {no: 8, name: "VALUE_TYPE_COMPOSITE_VAL", localName: "COMPOSITE_VAL"},
  ],
);

/**
 * @generated from enum api.commons.public.Visibility
 */
export const Visibility = proto3.makeEnum(
  "api.commons.public.Visibility",
  [
    {no: 0, name: "VISIBILITY_INVISIBLE", localName: "INVISIBLE"},
    {no: 1, name: "VISIBILITY_UNRESTRICTED", localName: "UNRESTRICTED"},
    {no: 100, name: "VISIBILITY_RUNTIME", localName: "RUNTIME"},
    {no: 150, name: "VISIBILITY_BY_METHOD", localName: "BY_METHOD"},
    {no: 200, name: "VISIBILITY_PLUGIN", localName: "PLUGIN"},
  ],
);

/**
 * CompareOperation represents a comparison that can be done on on 'Value'
 * structs
 *
 * @generated from enum api.commons.public.CompareOperation
 */
export const CompareOperation = proto3.makeEnum(
  "api.commons.public.CompareOperation",
  [
    {no: 0, name: "COMPARE_OPERATION_EQ", localName: "EQ"},
    {no: 1, name: "COMPARE_OPERATION_GT", localName: "GT"},
    {no: 2, name: "COMPARE_OPERATION_LT", localName: "LT"},
    {no: 3, name: "COMPARE_OPERATION_GE", localName: "GE"},
    {no: 4, name: "COMPARE_OPERATION_LE", localName: "LE"},
    {no: 5, name: "COMPARE_OPERATION_NE", localName: "NE"},
  ],
);

/**
 * FlowFieldLoc catagorizes the location a flow will look for fields
 *
 * @generated from enum api.commons.public.FlowFieldLoc
 */
export const FlowFieldLoc = proto3.makeEnum(
  "api.commons.public.FlowFieldLoc",
  [
    {no: 0, name: "FFL_ANY"},
    {no: 1, name: "FFL_LINK"},
    {no: 2, name: "FFL_PLUGIN_INST"},
    {no: 3, name: "FFL_SUBMIT"},
  ],
);

/**
 * Validation is an enum that appears on FieldDefinition.
 * it is a hint of what the value should look like for the user,
 * and usually applies to VALUE_TYPE_STRING fields.
 *
 * @generated from enum api.commons.public.Validation
 */
export const Validation = proto3.makeEnum(
  "api.commons.public.Validation",
  [
    {no: 0, name: "VALIDATION_NONE", localName: "NONE"},
    {no: 101, name: "VALIDATION_CREDITCARD", localName: "CREDITCARD"},
    {no: 102, name: "VALIDATION_CVC", localName: "CVC"},
    {no: 103, name: "VALIDATION_MONTH_2_DIGIT", localName: "MONTH_2_DIGIT"},
    {no: 104, name: "VALIDATION_YEAR_4_DIGIT", localName: "YEAR_4_DIGIT"},
    {no: 105, name: "VALIDATION_LAST_4_SSN", localName: "LAST_4_SSN"},
    {no: 106, name: "VALIDATION_US_ZIP", localName: "US_ZIP"},
    {no: 201, name: "VALIDATION_INTEGER", localName: "INTEGER"},
    {no: 202, name: "VALIDATION_FLOAT", localName: "FLOAT"},
    {no: 203, name: "VALIDATION_CURRENCY_USD", localName: "CURRENCY_USD"},
    {no: 301, name: "VALIDATION_DATE", localName: "DATE"},
    {no: 302, name: "VALIDATION_DOB", localName: "DOB"},
    {no: 401, name: "VALIDATION_BOOL", localName: "BOOL"},
    {no: 402, name: "VALIDATION_REGEX", localName: "REGEX"},
  ],
);

/**
 * @generated from enum api.commons.public.InvoiceDisplayType
 */
export const InvoiceDisplayType = proto3.makeEnum(
  "api.commons.public.InvoiceDisplayType",
  [
    {no: 0, name: "UNSPECIFIED"},
    {no: 1, name: "AMOUNT_DUE"},
    {no: 2, name: "SERVICE_DATE"},
    {no: 3, name: "INVOICE_NUMBER"},
    {no: 4, name: "ITEM_QUANTITY"},
    {no: 5, name: "ITEM_NAME"},
    {no: 6, name: "ITEM_DESCRIPTION"},
    {no: 7, name: "ITEM_AMOUNT"},
    {no: 101, name: "PAYOR_ACCOUNT_NUMBER"},
    {no: 102, name: "PAYOR_FIRST_NAME"},
    {no: 103, name: "PAYOR_LAST_NAME"},
    {no: 104, name: "PAYOR_DATE_OF_BIRTH"},
    {no: 105, name: "PAYOR_SSN_R4"},
    {no: 106, name: "PAYOR_CELL_PHONE"},
    {no: 107, name: "PAYOR_HOME_PHONE"},
    {no: 108, name: "PAYOR_WORK_PHONE"},
    {no: 109, name: "PAYOR_ZIP_CODE"},
    {no: 201, name: "PATIENT_ACCOUNT_NUMBER"},
    {no: 202, name: "PATIENT_FIRST_NAME"},
    {no: 203, name: "PATIENT_LAST_NAME"},
    {no: 204, name: "PATIENT_DATE_OF_BIRTH"},
    {no: 205, name: "PATIENT_SSN_R4"},
    {no: 206, name: "PATIENT_CELL_PHONE"},
    {no: 207, name: "PATIENT_HOME_PHONE"},
    {no: 208, name: "PATIENT_WORK_PHONE"},
    {no: 209, name: "PATIENT_ZIP_CODE"},
  ],
);

/**
 * @generated from enum api.commons.public.FieldSource
 */
export const FieldSource = proto3.makeEnum(
  "api.commons.public.FieldSource",
  [
    {no: 0, name: "FIELD_SOURCE_NONE", localName: "NONE"},
    {no: 1, name: "FIELD_SOURCE_LINK", localName: "LINK"},
    {no: 2, name: "FIELD_SOURCE_VERIFICATION_DATA", localName: "VERIFICATION_DATA"},
    {no: 3, name: "FIELD_SOURCE_VERIFICATION_API", localName: "VERIFICATION_API"},
    {no: 4, name: "FIELD_SOURCE_INVOICE_DATA", localName: "INVOICE_DATA"},
    {no: 5, name: "FIELD_SOURCE_INVOICE_API", localName: "INVOICE_API"},
    {no: 6, name: "FIELD_SOURCE_PAYMENT_DATA", localName: "PAYMENT_DATA"},
    {no: 7, name: "FIELD_SOURCE_PAYMENT_API", localName: "PAYMENT_API"},
    {no: 8, name: "FIELD_SOURCE_PAYMENT_FORM", localName: "PAYMENT_FORM"},
  ],
);

/**
 * must match the numbers in the Flow message's "value" oneof
 *
 * @generated from enum api.commons.public.FlowType
 */
export const FlowType = proto3.makeEnum(
  "api.commons.public.FlowType",
  [
    {no: 0, name: "FLOW_TYPE_UNKNOWN", localName: "UNKNOWN"},
    {no: 1, name: "FLOW_TYPE_INVOICE", localName: "INVOICE"},
    {no: 2, name: "FLOW_TYPE_PAYMENT", localName: "PAYMENT"},
    {no: 3, name: "FLOW_TYPE_VERIFICATION", localName: "VERIFICATION"},
    {no: 4, name: "FLOW_TYPE_EXECUTE", localName: "EXECUTE"},
  ],
);

/**
 * @generated from message api.commons.public.Invoices
 */
export const Invoices = proto3.makeMessageType(
  "api.commons.public.Invoices",
  () => [
    { no: 1, name: "top_level_fields", kind: "message", T: InvoiceField, repeated: true },
    { no: 2, name: "invoices", kind: "message", T: Invoice, repeated: true },
  ],
);

/**
 * @generated from message api.commons.public.Invoice
 */
export const Invoice = proto3.makeMessageType(
  "api.commons.public.Invoice",
  () => [
    { no: 1, name: "top_level_fields", kind: "message", T: InvoiceField, repeated: true },
    { no: 2, name: "items", kind: "message", T: Item, repeated: true },
  ],
);

/**
 * @generated from message api.commons.public.Item
 */
export const Item = proto3.makeMessageType(
  "api.commons.public.Item",
  () => [
    { no: 1, name: "fields", kind: "message", T: InvoiceField, repeated: true },
  ],
);

/**
 * @generated from message api.commons.public.InvoiceField
 */
export const InvoiceField = proto3.makeMessageType(
  "api.commons.public.InvoiceField",
  () => [
    { no: 1, name: "item_type", kind: "enum", T: proto3.getEnumType(InvoiceDisplayType) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message api.commons.public.InvoiceTemplate
 */
export const InvoiceTemplate = proto3.makeMessageType(
  "api.commons.public.InvoiceTemplate",
  () => [
    { no: 1, name: "account_fields", kind: "message", T: FieldDefinition, repeated: true },
    { no: 3, name: "invoice_descriptions", kind: "message", T: InvoiceDescription, repeated: true },
  ],
);

/**
 * @generated from message api.commons.public.InvoiceDescription
 */
export const InvoiceDescription = proto3.makeMessageType(
  "api.commons.public.InvoiceDescription",
  () => [
    { no: 1, name: "invoice_description_fields", kind: "message", T: FieldDefinition, repeated: true },
    { no: 2, name: "line_items", kind: "message", T: LineItemGroup, repeated: true },
  ],
);

/**
 * @generated from message api.commons.public.LineItemGroup
 */
export const LineItemGroup = proto3.makeMessageType(
  "api.commons.public.LineItemGroup",
  () => [
    { no: 1, name: "line_item_fields", kind: "message", T: FieldDefinition, repeated: true },
  ],
);

/**
 * @generated from message api.commons.public.ListOfStrings
 */
export const ListOfStrings = proto3.makeMessageType(
  "api.commons.public.ListOfStrings",
  () => [
    { no: 1, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message api.commons.public.Flow
 */
export const Flow = proto3.makeMessageType(
  "api.commons.public.Flow",
  () => [
    { no: 1, name: "invoice_flow", kind: "message", T: InvoiceFlow, oneof: "value" },
    { no: 2, name: "payment_flow", kind: "message", T: PaymentFlow, oneof: "value" },
    { no: 3, name: "verification_flow", kind: "message", T: VerificationFlow, oneof: "value" },
    { no: 4, name: "execute_flow", kind: "message", T: ExecuteFlow, oneof: "value" },
  ],
);

/**
 * @generated from message api.commons.public.InvoiceFlow
 */
export const InvoiceFlow = proto3.makeMessageType(
  "api.commons.public.InvoiceFlow",
  () => [
    { no: 1, name: "plugin_instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "experian_query_balance", kind: "message", T: InvoiceExperianQueryBalance, oneof: "value" },
    { no: 10, name: "authorize_net_link_data", kind: "message", T: InvoiceAuthorizeNetLinkData, oneof: "value" },
    { no: 11, name: "authorize_net_custom_http", kind: "message", T: InvoiceAuthorizeNetCustomHttp, oneof: "value" },
    { no: 12, name: "journey", kind: "message", T: InvoiceJourney, oneof: "value" },
    { no: 13, name: "dynamic_journey", kind: "message", T: InvoiceDynamicJourney, oneof: "value" },
    { no: 3, name: "invoice_template", kind: "message", T: InvoiceTemplate },
  ],
);

/**
 * @generated from message api.commons.public.PaymentFlow
 */
export const PaymentFlow = proto3.makeMessageType(
  "api.commons.public.PaymentFlow",
  () => [
    { no: 1, name: "plugin_instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "experian_cc", kind: "message", T: PaymentExperianCC, oneof: "value" },
    { no: 3, name: "experian_ach", kind: "message", T: PaymentExperianACH, oneof: "value" },
    { no: 4, name: "authorize_net_cc", kind: "message", T: PaymentAuthorizeNetCC, oneof: "value" },
    { no: 5, name: "authorize_net_ach", kind: "message", T: PaymentAuthorizeNetACH, oneof: "value" },
    { no: 6, name: "authorize_net_paypal", kind: "message", T: PaymentAuthorizeNetPaypal, oneof: "value" },
    { no: 7, name: "authorize_net_apple_pay", kind: "message", T: PaymentAuthorizeNetApplePay, oneof: "value" },
    { no: 8, name: "authorize_net_google_pay", kind: "message", T: PaymentAuthorizeNetGooglePay, oneof: "value" },
    { no: 20, name: "payment_fields", kind: "message", T: FieldDefinition, repeated: true },
  ],
);

/**
 * @generated from message api.commons.public.VerificationFlow
 */
export const VerificationFlow = proto3.makeMessageType(
  "api.commons.public.VerificationFlow",
  () => [
    { no: 1, name: "plugin_instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "experian_query_balance", kind: "message", T: VerificationExperianQueryBalance, oneof: "value" },
    { no: 3, name: "experian_link_data", kind: "message", T: VerificationExperianLinkData, oneof: "value" },
    { no: 4, name: "experian_zip_dob", kind: "message", T: VerificationExperianZipDob, oneof: "value" },
    { no: 6, name: "authorize_net_customer_profile", kind: "message", T: VerificationAuthorizeNetCustomerProfile, oneof: "value" },
    { no: 7, name: "authorize_net_link_data", kind: "message", T: VerificationAuthorizeNetLinkData, oneof: "value" },
    { no: 12, name: "journey", kind: "message", T: VerificationJourney, oneof: "value" },
    { no: 20, name: "verification_fields", kind: "message", T: FieldDefinition, repeated: true },
  ],
);

/**
 * FieldDefinition defines a field name, and type that is used in integrations.
 * This lets the UI make forms for the getting the field's value from the user
 *
 * @generated from message api.commons.public.FieldDefinition
 */
export const FieldDefinition = proto3.makeMessageType(
  "api.commons.public.FieldDefinition",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alt_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "field_type", kind: "enum", T: proto3.getEnumType(ValueType) },
    { no: 4, name: "validation_type", kind: "enum", T: proto3.getEnumType(Validation) },
    { no: 5, name: "formats", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "invoice_type", kind: "enum", T: proto3.getEnumType(InvoiceDisplayType) },
    { no: 8, name: "helper_text", kind: "message", T: HelperText },
  ],
);

/**
 * HelperText contains the text that explains a field definition on a form, and any other display options
 *
 * @generated from message api.commons.public.HelperText
 */
export const HelperText = proto3.makeMessageType(
  "api.commons.public.HelperText",
  () => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ExecuteFlows run exactly one integration method, and allow user submitted values to be merged with
 * the plugin instance data (like payment flows). Unlike payment flows, there doesn't have to be an
 * invoice step defined, and the amount paid can be anything.
 * Each member of the oneof value must have a proto number that matches a RequestMethod number
 *
 * @generated from message api.commons.public.ExecuteFlow
 */
export const ExecuteFlow = proto3.makeMessageType(
  "api.commons.public.ExecuteFlow",
  () => [
    { no: 1, name: "plugin_instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 101, name: "braintree_credit_sale", kind: "message", T: ExecuteBraintreeCreditSale, oneof: "value" },
    { no: 102, name: "braintree_bank_sale", kind: "message", T: ExecuteBraintreeBankSale, oneof: "value" },
    { no: 201, name: "relatient_get_patient_balance", kind: "message", T: ExecuteRelatientGetPatientBalance, oneof: "value" },
    { no: 202, name: "relatient_get_patient_cc_tokens", kind: "message", T: ExecuteRelatientGetPatientCcTokens, oneof: "value" },
    { no: 203, name: "relatient_post_patient_token", kind: "message", T: ExecuteRelatientPostPatientToken, oneof: "value" },
    { no: 204, name: "relatient_post_patient_balance", kind: "message", T: ExecuteRelatientPostPatientBalance, oneof: "value" },
    { no: 205, name: "relatient_get_patient", kind: "message", T: ExecuteRelatientGetPatient, oneof: "value" },
    { no: 206, name: "relatient_post_balance_by_id", kind: "message", T: ExecuteRelatientPostBalanceById, oneof: "value" },
    { no: 301, name: "cybersource_credit_payment", kind: "message", T: ExecuteCybersourceCreditPayment, oneof: "value" },
    { no: 302, name: "cybersource_echeck_payment", kind: "message", T: ExecuteCybersourceEcheckPayment, oneof: "value" },
    { no: 401, name: "circpro_phone_lookup_with_bundle", kind: "message", T: ExecuteCircproPhoneLookupWithBundle, oneof: "value" },
    { no: 402, name: "circpro_phone_lookup", kind: "message", T: ExecuteCircproPhoneLookup, oneof: "value" },
    { no: 403, name: "circpro_vacation_restart_inquiry", kind: "message", T: ExecuteCircproVacationRestartInquiry, oneof: "value" },
    { no: 404, name: "circpro_complaint_inquiry", kind: "message", T: ExecuteCircproComplaintInquiry, oneof: "value" },
    { no: 405, name: "circpro_account_inquiry", kind: "message", T: ExecuteCircproAccountInquiry, oneof: "value" },
    { no: 406, name: "circpro_account_inquiry_with_tax", kind: "message", T: ExecuteCircproAccountInquiryWithTax, oneof: "value" },
    { no: 407, name: "circpro_account_inquiry_with_tax_bundle", kind: "message", T: ExecuteCircproAccountInquiryWithTaxBundle, oneof: "value" },
    { no: 408, name: "circpro_complaint_codes", kind: "message", T: ExecuteCircproComplaintCodes, oneof: "value" },
    { no: 409, name: "circpro_complaint_update", kind: "message", T: ExecuteCircproComplaintUpdate, oneof: "value" },
    { no: 410, name: "circpro_vacation_update", kind: "message", T: ExecuteCircproVacationUpdate, oneof: "value" },
    { no: 411, name: "circpro_restart_update", kind: "message", T: ExecuteCircproRestartUpdate, oneof: "value" },
    { no: 412, name: "circpro_law_immediate_payment", kind: "message", T: ExecuteCircproLawImmediatePayment, oneof: "value" },
    { no: 413, name: "circpro_law_update_data_with_pac", kind: "message", T: ExecuteCircproLawUpdateDataWithPac, oneof: "value" },
    { no: 414, name: "circpro_law_get_customers", kind: "message", T: ExecuteCircproLawGetCustomers, oneof: "value" },
    { no: 501, name: "authorizenet_charge_credit_card", kind: "message", T: ExecuteAuthorizenetChargeCreditCard, oneof: "value" },
    { no: 502, name: "authorizenet_debit_bank_account", kind: "message", T: ExecuteAuthorizenetDebitBankAccount, oneof: "value" },
    { no: 503, name: "authorizenet_create_customer_payment_profile", kind: "message", T: ExecuteAuthorizenetCreateCustomerPaymentProfile, oneof: "value" },
    { no: 504, name: "authorizenet_paypal_transaction", kind: "message", T: ExecuteAuthorizenetPaypalTransaction, oneof: "value" },
    { no: 505, name: "authorizenet_google_pay_transaction", kind: "message", T: ExecuteAuthorizenetGooglePayTransaction, oneof: "value" },
    { no: 506, name: "authorizenet_apple_pay_transaction", kind: "message", T: ExecuteAuthorizenetApplePayTransaction, oneof: "value" },
    { no: 507, name: "authorizenet_pay_pal_auth_capture", kind: "message", T: ExecuteAuthorizenetPayPalAuthCapture, oneof: "value" },
    { no: 601, name: "expitrans_cc_transaction", kind: "message", T: ExecuteExpitransCcTransaction, oneof: "value" },
    { no: 602, name: "expitrans_ach_transaction", kind: "message", T: ExecuteExpitransAchTransaction, oneof: "value" },
    { no: 701, name: "axiamedfusion_cc_transaction", kind: "message", T: ExecuteAxiamedfusionCcTransaction, oneof: "value" },
    { no: 702, name: "axiamedfusion_ach_transaction", kind: "message", T: ExecuteAxiamedfusionAchTransaction, oneof: "value" },
    { no: 703, name: "axiamedfusion_card_verify", kind: "message", T: ExecuteAxiamedfusionCardVerify, oneof: "value" },
    { no: 801, name: "instamed_payment_sale", kind: "message", T: ExecuteInstamedPaymentSale, oneof: "value" },
    { no: 802, name: "instamed_void_payment", kind: "message", T: ExecuteInstamedVoidPayment, oneof: "value" },
    { no: 901, name: "usaepay_submit_cc_payments", kind: "message", T: ExecuteUsaepaySubmitCcPayments, oneof: "value" },
    { no: 902, name: "usaepay_submit_ach_payments", kind: "message", T: ExecuteUsaepaySubmitAchPayments, oneof: "value" },
    { no: 1001, name: "ezidebit_submit_cc_payments", kind: "message", T: ExecuteEzidebitSubmitCcPayments, oneof: "value" },
    { no: 1002, name: "ezidebit_submit_ach_payments", kind: "message", T: ExecuteEzidebitSubmitAchPayments, oneof: "value" },
    { no: 1101, name: "bambora_submit_cc_payments", kind: "message", T: ExecuteBamboraSubmitCcPayments, oneof: "value" },
    { no: 1102, name: "bambora_submit_ach_payments", kind: "message", T: ExecuteBamboraSubmitAchPayments, oneof: "value" },
    { no: 1201, name: "repay_store_card", kind: "message", T: ExecuteRepayStoreCard, oneof: "value" },
    { no: 1202, name: "repay_payment_token", kind: "message", T: ExecuteRepayPaymentToken, oneof: "value" },
    { no: 1203, name: "repay_ach_payment_token", kind: "message", T: ExecuteRepayAchPaymentToken, oneof: "value" },
    { no: 1301, name: "axia_submit_sale_request_by_cc", kind: "message", T: ExecuteAxiaSubmitSaleRequestByCc, oneof: "value" },
    { no: 1302, name: "axia_submit_sale_request_by_check", kind: "message", T: ExecuteAxiaSubmitSaleRequestByCheck, oneof: "value" },
    { no: 1401, name: "securetrading_send_payment", kind: "message", T: ExecuteSecuretradingSendPayment, oneof: "value" },
    { no: 1501, name: "payment_vision_submit_card_sale_request_by_cc", kind: "message", T: ExecutePaymentVisionSubmitCardSaleRequestByCc, oneof: "value" },
    { no: 1502, name: "payment_vision_submit_card_sale_request_by_ach", kind: "message", T: ExecutePaymentVisionSubmitCardSaleRequestByAch, oneof: "value" },
    { no: 1601, name: "interprose_lookup_account", kind: "message", T: ExecuteInterproseLookupAccount, oneof: "value" },
    { no: 1602, name: "interprose_submit_card_sale_request_by_cc", kind: "message", T: ExecuteInterproseSubmitCardSaleRequestByCc, oneof: "value" },
    { no: 1603, name: "interprose_submit_card_sale_request_by_ach", kind: "message", T: ExecuteInterproseSubmitCardSaleRequestByAch, oneof: "value" },
    { no: 1604, name: "interprose_lookup_payment_id", kind: "message", T: ExecuteInterproseLookupPaymentId, oneof: "value" },
    { no: 1605, name: "interprose_lookup_account_by_form_id", kind: "message", T: ExecuteInterproseLookupAccountByFormId, oneof: "value" },
    { no: 1701, name: "dallasnews_search_by_phone", kind: "message", T: ExecuteDallasnewsSearchByPhone, oneof: "value" },
    { no: 1702, name: "dallasnews_search_by_zip_street", kind: "message", T: ExecuteDallasnewsSearchByZipStreet, oneof: "value" },
    { no: 1703, name: "dallasnews_search_by", kind: "message", T: ExecuteDallasnewsSearchBy, oneof: "value" },
    { no: 1704, name: "dallasnews_create_vacation", kind: "message", T: ExecuteDallasnewsCreateVacation, oneof: "value" },
    { no: 1705, name: "dallasnews_get_vacation", kind: "message", T: ExecuteDallasnewsGetVacation, oneof: "value" },
    { no: 1706, name: "dallasnews_get_vacation_days_between", kind: "message", T: ExecuteDallasnewsGetVacationDaysBetween, oneof: "value" },
    { no: 1707, name: "dallasnews_get_vacation_with_cutoff", kind: "message", T: ExecuteDallasnewsGetVacationWithCutoff, oneof: "value" },
    { no: 1708, name: "dallasnews_delete_vacation", kind: "message", T: ExecuteDallasnewsDeleteVacation, oneof: "value" },
    { no: 1709, name: "dallasnews_add_complaint", kind: "message", T: ExecuteDallasnewsAddComplaint, oneof: "value" },
    { no: 1710, name: "dallasnews_update_phone_number", kind: "message", T: ExecuteDallasnewsUpdatePhoneNumber, oneof: "value" },
    { no: 1711, name: "dallasnews_stop_account", kind: "message", T: ExecuteDallasnewsStopAccount, oneof: "value" },
    { no: 1712, name: "dallasnews_cc_payment_token", kind: "message", T: ExecuteDallasnewsCcPaymentToken, oneof: "value" },
    { no: 1713, name: "dallasnews_ach_payment_token", kind: "message", T: ExecuteDallasnewsAchPaymentToken, oneof: "value" },
    { no: 1801, name: "payway_submit_card_sale_request", kind: "message", T: ExecutePaywaySubmitCardSaleRequest, oneof: "value" },
    { no: 1802, name: "payway_create_token_request", kind: "message", T: ExecutePaywayCreateTokenRequest, oneof: "value" },
    { no: 1803, name: "payway_submit_ach_sale_request", kind: "message", T: ExecutePaywaySubmitACHSaleRequest, oneof: "value" },
    { no: 1901, name: "billingtree_submit_card_sale_request", kind: "message", T: ExecuteBillingtreeSubmitCardSaleRequest, oneof: "value" },
    { no: 2001, name: "experian_cc_payment_request", kind: "message", T: ExecuteExperianCcPaymentRequest, oneof: "value" },
    { no: 2002, name: "experian_cc_payment_plan_request", kind: "message", T: ExecuteExperianCcPaymentPlanRequest, oneof: "value" },
    { no: 2003, name: "experian_balancerequest", kind: "message", T: ExecuteExperianBalancerequest, oneof: "value" },
    { no: 2004, name: "experian_ach_payment_request", kind: "message", T: ExecuteExperianAchPaymentRequest, oneof: "value" },
    { no: 2005, name: "experian_ach_payment_plan_request", kind: "message", T: ExecuteExperianAchPaymentPlanRequest, oneof: "value" },
    { no: 2101, name: "newscycle_login", kind: "message", T: ExecuteNewscycleLogin, oneof: "value" },
    { no: 2102, name: "newscycle_search_page", kind: "message", T: ExecuteNewscycleSearchPage, oneof: "value" },
    { no: 2103, name: "newscycle_billing_info", kind: "message", T: ExecuteNewscycleBillingInfo, oneof: "value" },
    { no: 2104, name: "newscycle_service_error_info", kind: "message", T: ExecuteNewscycleServiceErrorInfo, oneof: "value" },
    { no: 2105, name: "newscycle_service_error_trans", kind: "message", T: ExecuteNewscycleServiceErrorTrans, oneof: "value" },
    { no: 2106, name: "newscycle_stop_info", kind: "message", T: ExecuteNewscycleStopInfo, oneof: "value" },
    { no: 2107, name: "newscycle_stop_trans", kind: "message", T: ExecuteNewscycleStopTrans, oneof: "value" },
    { no: 2108, name: "newscycle_renew_info", kind: "message", T: ExecuteNewscycleRenewInfo, oneof: "value" },
    { no: 2109, name: "newscycle_auto_renew_info", kind: "message", T: ExecuteNewscycleAutoRenewInfo, oneof: "value" },
    { no: 2110, name: "newscycle_auto_tran", kind: "message", T: ExecuteNewscycleAutoTran, oneof: "value" },
    { no: 2111, name: "newscycle_pay_info", kind: "message", T: ExecuteNewscyclePayInfo, oneof: "value" },
    { no: 2112, name: "newscycle_pay_tran", kind: "message", T: ExecuteNewscyclePayTran, oneof: "value" },
    { no: 2201, name: "trustcommerce_credit_sale", kind: "message", T: ExecuteTrustcommerceCreditSale, oneof: "value" },
    { no: 2202, name: "trustcommerce_ach_sale", kind: "message", T: ExecuteTrustcommerceAchSale, oneof: "value" },
    { no: 2301, name: "vantiv_credit_sale", kind: "message", T: ExecuteVantivCreditSale, oneof: "value" },
    { no: 2302, name: "vantiv_ach_sale", kind: "message", T: ExecuteVantivAchSale, oneof: "value" },
    { no: 2401, name: "journey_latest", kind: "message", T: ExecuteJourneyLatest, oneof: "value" },
    { no: 2501, name: "athenahealth_get_patients", kind: "message", T: ExecuteAthenahealthGetPatients, oneof: "value" },
    { no: 2502, name: "athenahealth_get_patients_with_id", kind: "message", T: ExecuteAthenahealthGetPatientsWithId, oneof: "value" },
    { no: 2503, name: "athenahealth_cc_payment", kind: "message", T: ExecuteAthenahealthCcPayment, oneof: "value" },
    { no: 2601, name: "brainworks_get_customers_by_phone", kind: "message", T: ExecuteBrainworksGetCustomersByPhone, oneof: "value" },
    { no: 2602, name: "brainworks_get_suspends", kind: "message", T: ExecuteBrainworksGetSuspends, oneof: "value" },
    { no: 2603, name: "brainworks_get_customer_by_cust_id_v2", kind: "message", T: ExecuteBrainworksGetCustomerByCustIdV2, oneof: "value" },
    { no: 2604, name: "brainworks_get_complaints", kind: "message", T: ExecuteBrainworksGetComplaints, oneof: "value" },
    { no: 2605, name: "brainworks_get_codes_or_types", kind: "message", T: ExecuteBrainworksGetCodesOrTypes, oneof: "value" },
    { no: 2606, name: "brainworks_stop_suspends", kind: "message", T: ExecuteBrainworksStopSuspends, oneof: "value" },
    { no: 2607, name: "brainworks_start_suspends", kind: "message", T: ExecuteBrainworksStartSuspends, oneof: "value" },
    { no: 2608, name: "brainworks_send_complaint", kind: "message", T: ExecuteBrainworksSendComplaint, oneof: "value" },
    { no: 2609, name: "brainworks_get_customer_by_cust_id", kind: "message", T: ExecuteBrainworksGetCustomerByCustId, oneof: "value" },
    { no: 2701, name: "osgconnect_cc_payments", kind: "message", T: ExecuteOsgconnectCcPayments, oneof: "value" },
    { no: 2702, name: "osgconnect_ach_payments", kind: "message", T: ExecuteOsgconnectAchPayments, oneof: "value" },
    { no: 2703, name: "osgconnect_validate_account_no", kind: "message", T: ExecuteOsgconnectValidateAccountNo, oneof: "value" },
    { no: 2801, name: "ntvb_credit_missed_delivery", kind: "message", T: ExecuteNtvbCreditMissedDelivery, oneof: "value" },
    { no: 2802, name: "ntvb_customer_search", kind: "message", T: ExecuteNtvbCustomerSearch, oneof: "value" },
    { no: 2803, name: "ntvb_end_call", kind: "message", T: ExecuteNtvbEndCall, oneof: "value" },
    { no: 2804, name: "ntvb_integration_definition", kind: "message", T: ExecuteNtvbIntegrationDefinition, oneof: "value" },
    { no: 2805, name: "ntvb_missed_delivery", kind: "message", T: ExecuteNtvbMissedDelivery, oneof: "value" },
    { no: 2806, name: "ntvb_remove_autorenewal", kind: "message", T: ExecuteNtvbRemoveAutorenewal, oneof: "value" },
    { no: 2807, name: "ntvb_renew_subscription", kind: "message", T: ExecuteNtvbRenewSubscription, oneof: "value" },
    { no: 2808, name: "ntvb_renewal_offers", kind: "message", T: ExecuteNtvbRenewalOffers, oneof: "value" },
    { no: 2809, name: "ntvb_set_autorenewal", kind: "message", T: ExecuteNtvbSetAutorenewal, oneof: "value" },
    { no: 2810, name: "ntvb_start_incoming_call", kind: "message", T: ExecuteNtvbStartIncomingCall, oneof: "value" },
    { no: 2811, name: "ntvb_start_outgoing_call", kind: "message", T: ExecuteNtvbStartOutgoingCall, oneof: "value" },
    { no: 2812, name: "ntvb_subscription_info", kind: "message", T: ExecuteNtvbSubscriptionInfo, oneof: "value" },
    { no: 2813, name: "ntvb_vacation_stop", kind: "message", T: ExecuteNtvbVacationStop, oneof: "value" },
    { no: 2814, name: "ntvb_authtest", kind: "message", T: ExecuteNtvbAuthtest, oneof: "value" },
    { no: 2901, name: "elavon_credit_card_sale", kind: "message", T: ExecuteElavonCreditCardSale, oneof: "value" },
    { no: 2902, name: "elavon_add_recurring", kind: "message", T: ExecuteElavonAddRecurring, oneof: "value" },
    { no: 2903, name: "elavon_dcc_response", kind: "message", T: ExecuteElavonDccResponse, oneof: "value" },
    { no: 2904, name: "elavon_delete_recurring", kind: "message", T: ExecuteElavonDeleteRecurring, oneof: "value" },
    { no: 2905, name: "elavon_update_recurring", kind: "message", T: ExecuteElavonUpdateRecurring, oneof: "value" },
    { no: 2906, name: "elavon_health_care_cc_sale", kind: "message", T: ExecuteElavonHealthCareCCSale, oneof: "value" },
    { no: 2907, name: "elavon_add_installment", kind: "message", T: ExecuteElavonAddInstallment, oneof: "value" },
    { no: 2908, name: "elavon_update_installment", kind: "message", T: ExecuteElavonUpdateInstallment, oneof: "value" },
    { no: 2909, name: "elavon_delete_installment", kind: "message", T: ExecuteElavonDeleteInstallment, oneof: "value" },
    { no: 2910, name: "elavon_mcc_credit_card_sale", kind: "message", T: ExecuteElavonMccCreditCardSale, oneof: "value" },
    { no: 3001, name: "globalPayments_card_sale", kind: "message", T: ExecuteGlobalPaymentsCardSale, oneof: "value" },
    { no: 3002, name: "globalPayments_get_transaction_by_id", kind: "message", T: ExecuteGlobalPaymentsGetTransactionByID, oneof: "value" },
    { no: 3003, name: "globalPayments_list_transactions", kind: "message", T: ExecuteGlobalPaymentsListTransactions, oneof: "value" },
    { no: 3004, name: "globalPayments_refund_sale", kind: "message", T: ExecuteGlobalPaymentsRefundSale, oneof: "value" },
    { no: 3005, name: "globalPayments_reverse_sale_or_refund", kind: "message", T: ExecuteGlobalPaymentsReverseSaleOrRefund, oneof: "value" },
    { no: 3101, name: "payscout_credit_sale", kind: "message", T: ExecutePayScoutCreditCardSale, oneof: "value" },
    { no: 3102, name: "payscout_echeck_sale", kind: "message", T: ExecutePayScoutEcheckSale, oneof: "value" },
    { no: 3201, name: "i2c_echo", kind: "message", T: ExecuteI2cEcho, oneof: "value" },
    { no: 3202, name: "i2c_balance_inquiry", kind: "message", T: ExecuteI2cBalanceInquiry, oneof: "value" },
    { no: 3203, name: "i2c_verify_user", kind: "message", T: ExecuteI2cVerifyUser, oneof: "value" },
    { no: 3204, name: "i2c_search_customer", kind: "message", T: ExecuteI2cSearchCustomer, oneof: "value" },
    { no: 3205, name: "i2c_make_payment", kind: "message", T: ExecuteI2cMakePayment, oneof: "value" },
    { no: 3206, name: "i2c_get_cardholder_profile", kind: "message", T: ExecuteI2cGetCardholderProfile, oneof: "value" },
    { no: 3207, name: "i2c_get_cardholder_statement", kind: "message", T: ExecuteI2cGetCardholderStatement, oneof: "value" },
    { no: 3208, name: "i2c_get_cardholder_balance", kind: "message", T: ExecuteI2cGetCardholderBalance, oneof: "value" },
    { no: 3209, name: "i2c_get_creditpayment_info", kind: "message", T: ExecuteI2cGetCreditPaymentInfo, oneof: "value" },
    { no: 3210, name: "i2c_transaction_history", kind: "message", T: ExecuteI2cTransactionHistory, oneof: "value" },
    { no: 3301, name: "opayo_cc_payment", kind: "message", T: ExecuteOpayoCcPayments, oneof: "value" },
    { no: 3401, name: "shift4_cc_payment", kind: "message", T: ExecuteShift4CcPayments, oneof: "value" },
  ],
);

/**
 * invoice flows
 *
 * @generated from message api.commons.public.InvoiceExperianQueryBalance
 */
export const InvoiceExperianQueryBalance = proto3.makeMessageType(
  "api.commons.public.InvoiceExperianQueryBalance",
  [],
);

/**
 * @generated from message api.commons.public.InvoiceAuthorizeNetAuthorizedTransactionIdLookup
 */
export const InvoiceAuthorizeNetAuthorizedTransactionIdLookup = proto3.makeMessageType(
  "api.commons.public.InvoiceAuthorizeNetAuthorizedTransactionIdLookup",
  [],
);

/**
 * @generated from message api.commons.public.InvoiceAuthorizeNetLinkData
 */
export const InvoiceAuthorizeNetLinkData = proto3.makeMessageType(
  "api.commons.public.InvoiceAuthorizeNetLinkData",
  [],
);

/**
 * @generated from message api.commons.public.InvoiceAuthorizeNetCustomHttp
 */
export const InvoiceAuthorizeNetCustomHttp = proto3.makeMessageType(
  "api.commons.public.InvoiceAuthorizeNetCustomHttp",
  [],
);

/**
 * @generated from message api.commons.public.InvoiceJourney
 */
export const InvoiceJourney = proto3.makeMessageType(
  "api.commons.public.InvoiceJourney",
  [],
);

/**
 * @generated from message api.commons.public.InvoiceDynamicJourney
 */
export const InvoiceDynamicJourney = proto3.makeMessageType(
  "api.commons.public.InvoiceDynamicJourney",
  () => [
    { no: 1, name: "match_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "total_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "journey_fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ListOfStrings} },
  ],
);

/**
 * verification flows
 *
 * @generated from message api.commons.public.VerificationExperianQueryBalance
 */
export const VerificationExperianQueryBalance = proto3.makeMessageType(
  "api.commons.public.VerificationExperianQueryBalance",
  [],
);

/**
 * @generated from message api.commons.public.VerificationExperianLinkData
 */
export const VerificationExperianLinkData = proto3.makeMessageType(
  "api.commons.public.VerificationExperianLinkData",
  [],
);

/**
 * @generated from message api.commons.public.VerificationExperianZipDob
 */
export const VerificationExperianZipDob = proto3.makeMessageType(
  "api.commons.public.VerificationExperianZipDob",
  [],
);

/**
 * @generated from message api.commons.public.VerificationAuthorizeNetCustomerProfile
 */
export const VerificationAuthorizeNetCustomerProfile = proto3.makeMessageType(
  "api.commons.public.VerificationAuthorizeNetCustomerProfile",
  [],
);

/**
 * @generated from message api.commons.public.VerificationAuthorizeNetLinkData
 */
export const VerificationAuthorizeNetLinkData = proto3.makeMessageType(
  "api.commons.public.VerificationAuthorizeNetLinkData",
  [],
);

/**
 * @generated from message api.commons.public.VerificationJourney
 */
export const VerificationJourney = proto3.makeMessageType(
  "api.commons.public.VerificationJourney",
  () => [
    { no: 1, name: "date_of_birth_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "zip_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "last4_ssn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * payment flows
 *
 * @generated from message api.commons.public.PaymentExperianCC
 */
export const PaymentExperianCC = proto3.makeMessageType(
  "api.commons.public.PaymentExperianCC",
  [],
);

/**
 * @generated from message api.commons.public.PaymentExperianACH
 */
export const PaymentExperianACH = proto3.makeMessageType(
  "api.commons.public.PaymentExperianACH",
  [],
);

/**
 * @generated from message api.commons.public.PaymentAuthorizeNetCC
 */
export const PaymentAuthorizeNetCC = proto3.makeMessageType(
  "api.commons.public.PaymentAuthorizeNetCC",
  [],
);

/**
 * @generated from message api.commons.public.PaymentAuthorizeNetACH
 */
export const PaymentAuthorizeNetACH = proto3.makeMessageType(
  "api.commons.public.PaymentAuthorizeNetACH",
  [],
);

/**
 * @generated from message api.commons.public.PaymentAuthorizeNetPaypal
 */
export const PaymentAuthorizeNetPaypal = proto3.makeMessageType(
  "api.commons.public.PaymentAuthorizeNetPaypal",
  [],
);

/**
 * @generated from message api.commons.public.PaymentAuthorizeNetApplePay
 */
export const PaymentAuthorizeNetApplePay = proto3.makeMessageType(
  "api.commons.public.PaymentAuthorizeNetApplePay",
  [],
);

/**
 * @generated from message api.commons.public.PaymentAuthorizeNetGooglePay
 */
export const PaymentAuthorizeNetGooglePay = proto3.makeMessageType(
  "api.commons.public.PaymentAuthorizeNetGooglePay",
  [],
);

/**
 * execute flows
 *
 * @generated from message api.commons.public.ExecuteBraintreeCreditSale
 */
export const ExecuteBraintreeCreditSale = proto3.makeMessageType(
  "api.commons.public.ExecuteBraintreeCreditSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBraintreeBankSale
 */
export const ExecuteBraintreeBankSale = proto3.makeMessageType(
  "api.commons.public.ExecuteBraintreeBankSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteRelatientGetPatientBalance
 */
export const ExecuteRelatientGetPatientBalance = proto3.makeMessageType(
  "api.commons.public.ExecuteRelatientGetPatientBalance",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteRelatientGetPatientCcTokens
 */
export const ExecuteRelatientGetPatientCcTokens = proto3.makeMessageType(
  "api.commons.public.ExecuteRelatientGetPatientCcTokens",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteRelatientPostPatientToken
 */
export const ExecuteRelatientPostPatientToken = proto3.makeMessageType(
  "api.commons.public.ExecuteRelatientPostPatientToken",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteRelatientPostPatientBalance
 */
export const ExecuteRelatientPostPatientBalance = proto3.makeMessageType(
  "api.commons.public.ExecuteRelatientPostPatientBalance",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteRelatientGetPatient
 */
export const ExecuteRelatientGetPatient = proto3.makeMessageType(
  "api.commons.public.ExecuteRelatientGetPatient",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteRelatientPostBalanceById
 */
export const ExecuteRelatientPostBalanceById = proto3.makeMessageType(
  "api.commons.public.ExecuteRelatientPostBalanceById",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCybersourceCreditPayment
 */
export const ExecuteCybersourceCreditPayment = proto3.makeMessageType(
  "api.commons.public.ExecuteCybersourceCreditPayment",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCybersourceEcheckPayment
 */
export const ExecuteCybersourceEcheckPayment = proto3.makeMessageType(
  "api.commons.public.ExecuteCybersourceEcheckPayment",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproPhoneLookupWithBundle
 */
export const ExecuteCircproPhoneLookupWithBundle = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproPhoneLookupWithBundle",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproPhoneLookup
 */
export const ExecuteCircproPhoneLookup = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproPhoneLookup",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproVacationRestartInquiry
 */
export const ExecuteCircproVacationRestartInquiry = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproVacationRestartInquiry",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproComplaintInquiry
 */
export const ExecuteCircproComplaintInquiry = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproComplaintInquiry",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproAccountInquiry
 */
export const ExecuteCircproAccountInquiry = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproAccountInquiry",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproAccountInquiryWithTax
 */
export const ExecuteCircproAccountInquiryWithTax = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproAccountInquiryWithTax",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproAccountInquiryWithTaxBundle
 */
export const ExecuteCircproAccountInquiryWithTaxBundle = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproAccountInquiryWithTaxBundle",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproComplaintCodes
 */
export const ExecuteCircproComplaintCodes = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproComplaintCodes",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproComplaintUpdate
 */
export const ExecuteCircproComplaintUpdate = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproComplaintUpdate",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproVacationUpdate
 */
export const ExecuteCircproVacationUpdate = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproVacationUpdate",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproRestartUpdate
 */
export const ExecuteCircproRestartUpdate = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproRestartUpdate",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproLawImmediatePayment
 */
export const ExecuteCircproLawImmediatePayment = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproLawImmediatePayment",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproLawUpdateDataWithPac
 */
export const ExecuteCircproLawUpdateDataWithPac = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproLawUpdateDataWithPac",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteCircproLawGetCustomers
 */
export const ExecuteCircproLawGetCustomers = proto3.makeMessageType(
  "api.commons.public.ExecuteCircproLawGetCustomers",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAuthorizenetChargeCreditCard
 */
export const ExecuteAuthorizenetChargeCreditCard = proto3.makeMessageType(
  "api.commons.public.ExecuteAuthorizenetChargeCreditCard",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAuthorizenetDebitBankAccount
 */
export const ExecuteAuthorizenetDebitBankAccount = proto3.makeMessageType(
  "api.commons.public.ExecuteAuthorizenetDebitBankAccount",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAuthorizenetCreateCustomerPaymentProfile
 */
export const ExecuteAuthorizenetCreateCustomerPaymentProfile = proto3.makeMessageType(
  "api.commons.public.ExecuteAuthorizenetCreateCustomerPaymentProfile",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAuthorizenetPaypalTransaction
 */
export const ExecuteAuthorizenetPaypalTransaction = proto3.makeMessageType(
  "api.commons.public.ExecuteAuthorizenetPaypalTransaction",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAuthorizenetGooglePayTransaction
 */
export const ExecuteAuthorizenetGooglePayTransaction = proto3.makeMessageType(
  "api.commons.public.ExecuteAuthorizenetGooglePayTransaction",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAuthorizenetApplePayTransaction
 */
export const ExecuteAuthorizenetApplePayTransaction = proto3.makeMessageType(
  "api.commons.public.ExecuteAuthorizenetApplePayTransaction",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAuthorizenetPayPalAuthCapture
 */
export const ExecuteAuthorizenetPayPalAuthCapture = proto3.makeMessageType(
  "api.commons.public.ExecuteAuthorizenetPayPalAuthCapture",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteExpitransCcTransaction
 */
export const ExecuteExpitransCcTransaction = proto3.makeMessageType(
  "api.commons.public.ExecuteExpitransCcTransaction",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteExpitransAchTransaction
 */
export const ExecuteExpitransAchTransaction = proto3.makeMessageType(
  "api.commons.public.ExecuteExpitransAchTransaction",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAxiamedfusionCcTransaction
 */
export const ExecuteAxiamedfusionCcTransaction = proto3.makeMessageType(
  "api.commons.public.ExecuteAxiamedfusionCcTransaction",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAxiamedfusionAchTransaction
 */
export const ExecuteAxiamedfusionAchTransaction = proto3.makeMessageType(
  "api.commons.public.ExecuteAxiamedfusionAchTransaction",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAxiamedfusionCardVerify
 */
export const ExecuteAxiamedfusionCardVerify = proto3.makeMessageType(
  "api.commons.public.ExecuteAxiamedfusionCardVerify",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteInstamedPaymentSale
 */
export const ExecuteInstamedPaymentSale = proto3.makeMessageType(
  "api.commons.public.ExecuteInstamedPaymentSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteInstamedVoidPayment
 */
export const ExecuteInstamedVoidPayment = proto3.makeMessageType(
  "api.commons.public.ExecuteInstamedVoidPayment",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteUsaepaySubmitCcPayments
 */
export const ExecuteUsaepaySubmitCcPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteUsaepaySubmitCcPayments",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteUsaepaySubmitAchPayments
 */
export const ExecuteUsaepaySubmitAchPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteUsaepaySubmitAchPayments",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteEzidebitSubmitCcPayments
 */
export const ExecuteEzidebitSubmitCcPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteEzidebitSubmitCcPayments",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteEzidebitSubmitAchPayments
 */
export const ExecuteEzidebitSubmitAchPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteEzidebitSubmitAchPayments",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBamboraSubmitCcPayments
 */
export const ExecuteBamboraSubmitCcPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteBamboraSubmitCcPayments",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBamboraSubmitAchPayments
 */
export const ExecuteBamboraSubmitAchPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteBamboraSubmitAchPayments",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteRepayStoreCard
 */
export const ExecuteRepayStoreCard = proto3.makeMessageType(
  "api.commons.public.ExecuteRepayStoreCard",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteRepayPaymentToken
 */
export const ExecuteRepayPaymentToken = proto3.makeMessageType(
  "api.commons.public.ExecuteRepayPaymentToken",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteRepayAchPaymentToken
 */
export const ExecuteRepayAchPaymentToken = proto3.makeMessageType(
  "api.commons.public.ExecuteRepayAchPaymentToken",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAxiaSubmitSaleRequestByCc
 */
export const ExecuteAxiaSubmitSaleRequestByCc = proto3.makeMessageType(
  "api.commons.public.ExecuteAxiaSubmitSaleRequestByCc",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAxiaSubmitSaleRequestByCheck
 */
export const ExecuteAxiaSubmitSaleRequestByCheck = proto3.makeMessageType(
  "api.commons.public.ExecuteAxiaSubmitSaleRequestByCheck",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteSecuretradingSendPayment
 */
export const ExecuteSecuretradingSendPayment = proto3.makeMessageType(
  "api.commons.public.ExecuteSecuretradingSendPayment",
  [],
);

/**
 * @generated from message api.commons.public.ExecutePaymentVisionSubmitCardSaleRequestByCc
 */
export const ExecutePaymentVisionSubmitCardSaleRequestByCc = proto3.makeMessageType(
  "api.commons.public.ExecutePaymentVisionSubmitCardSaleRequestByCc",
  [],
);

/**
 * @generated from message api.commons.public.ExecutePaymentVisionSubmitCardSaleRequestByAch
 */
export const ExecutePaymentVisionSubmitCardSaleRequestByAch = proto3.makeMessageType(
  "api.commons.public.ExecutePaymentVisionSubmitCardSaleRequestByAch",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteInterproseLookupAccount
 */
export const ExecuteInterproseLookupAccount = proto3.makeMessageType(
  "api.commons.public.ExecuteInterproseLookupAccount",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteInterproseSubmitCardSaleRequestByCc
 */
export const ExecuteInterproseSubmitCardSaleRequestByCc = proto3.makeMessageType(
  "api.commons.public.ExecuteInterproseSubmitCardSaleRequestByCc",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteInterproseSubmitCardSaleRequestByAch
 */
export const ExecuteInterproseSubmitCardSaleRequestByAch = proto3.makeMessageType(
  "api.commons.public.ExecuteInterproseSubmitCardSaleRequestByAch",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteInterproseLookupPaymentId
 */
export const ExecuteInterproseLookupPaymentId = proto3.makeMessageType(
  "api.commons.public.ExecuteInterproseLookupPaymentId",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteInterproseLookupAccountByFormId
 */
export const ExecuteInterproseLookupAccountByFormId = proto3.makeMessageType(
  "api.commons.public.ExecuteInterproseLookupAccountByFormId",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsSearchByPhone
 */
export const ExecuteDallasnewsSearchByPhone = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsSearchByPhone",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsSearchByZipStreet
 */
export const ExecuteDallasnewsSearchByZipStreet = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsSearchByZipStreet",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsSearchBy
 */
export const ExecuteDallasnewsSearchBy = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsSearchBy",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsCreateVacation
 */
export const ExecuteDallasnewsCreateVacation = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsCreateVacation",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsGetVacation
 */
export const ExecuteDallasnewsGetVacation = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsGetVacation",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsGetVacationDaysBetween
 */
export const ExecuteDallasnewsGetVacationDaysBetween = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsGetVacationDaysBetween",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsGetVacationWithCutoff
 */
export const ExecuteDallasnewsGetVacationWithCutoff = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsGetVacationWithCutoff",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsDeleteVacation
 */
export const ExecuteDallasnewsDeleteVacation = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsDeleteVacation",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsAddComplaint
 */
export const ExecuteDallasnewsAddComplaint = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsAddComplaint",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsUpdatePhoneNumber
 */
export const ExecuteDallasnewsUpdatePhoneNumber = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsUpdatePhoneNumber",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsStopAccount
 */
export const ExecuteDallasnewsStopAccount = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsStopAccount",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsCcPaymentToken
 */
export const ExecuteDallasnewsCcPaymentToken = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsCcPaymentToken",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteDallasnewsAchPaymentToken
 */
export const ExecuteDallasnewsAchPaymentToken = proto3.makeMessageType(
  "api.commons.public.ExecuteDallasnewsAchPaymentToken",
  [],
);

/**
 * @generated from message api.commons.public.ExecutePaywaySubmitCardSaleRequest
 */
export const ExecutePaywaySubmitCardSaleRequest = proto3.makeMessageType(
  "api.commons.public.ExecutePaywaySubmitCardSaleRequest",
  [],
);

/**
 * @generated from message api.commons.public.ExecutePaywayCreateTokenRequest
 */
export const ExecutePaywayCreateTokenRequest = proto3.makeMessageType(
  "api.commons.public.ExecutePaywayCreateTokenRequest",
  [],
);

/**
 * @generated from message api.commons.public.ExecutePaywaySubmitACHSaleRequest
 */
export const ExecutePaywaySubmitACHSaleRequest = proto3.makeMessageType(
  "api.commons.public.ExecutePaywaySubmitACHSaleRequest",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBillingtreeSubmitCardSaleRequest
 */
export const ExecuteBillingtreeSubmitCardSaleRequest = proto3.makeMessageType(
  "api.commons.public.ExecuteBillingtreeSubmitCardSaleRequest",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteExperianCcPaymentRequest
 */
export const ExecuteExperianCcPaymentRequest = proto3.makeMessageType(
  "api.commons.public.ExecuteExperianCcPaymentRequest",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteExperianCcPaymentPlanRequest
 */
export const ExecuteExperianCcPaymentPlanRequest = proto3.makeMessageType(
  "api.commons.public.ExecuteExperianCcPaymentPlanRequest",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteExperianBalancerequest
 */
export const ExecuteExperianBalancerequest = proto3.makeMessageType(
  "api.commons.public.ExecuteExperianBalancerequest",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteExperianAchPaymentRequest
 */
export const ExecuteExperianAchPaymentRequest = proto3.makeMessageType(
  "api.commons.public.ExecuteExperianAchPaymentRequest",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteExperianAchPaymentPlanRequest
 */
export const ExecuteExperianAchPaymentPlanRequest = proto3.makeMessageType(
  "api.commons.public.ExecuteExperianAchPaymentPlanRequest",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleLogin
 */
export const ExecuteNewscycleLogin = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleLogin",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleSearchPage
 */
export const ExecuteNewscycleSearchPage = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleSearchPage",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleBillingInfo
 */
export const ExecuteNewscycleBillingInfo = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleBillingInfo",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleServiceErrorInfo
 */
export const ExecuteNewscycleServiceErrorInfo = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleServiceErrorInfo",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleServiceErrorTrans
 */
export const ExecuteNewscycleServiceErrorTrans = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleServiceErrorTrans",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleStopInfo
 */
export const ExecuteNewscycleStopInfo = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleStopInfo",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleStopTrans
 */
export const ExecuteNewscycleStopTrans = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleStopTrans",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleRenewInfo
 */
export const ExecuteNewscycleRenewInfo = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleRenewInfo",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleAutoRenewInfo
 */
export const ExecuteNewscycleAutoRenewInfo = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleAutoRenewInfo",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscycleAutoTran
 */
export const ExecuteNewscycleAutoTran = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscycleAutoTran",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscyclePayInfo
 */
export const ExecuteNewscyclePayInfo = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscyclePayInfo",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNewscyclePayTran
 */
export const ExecuteNewscyclePayTran = proto3.makeMessageType(
  "api.commons.public.ExecuteNewscyclePayTran",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteTrustcommerceCreditSale
 */
export const ExecuteTrustcommerceCreditSale = proto3.makeMessageType(
  "api.commons.public.ExecuteTrustcommerceCreditSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteTrustcommerceAchSale
 */
export const ExecuteTrustcommerceAchSale = proto3.makeMessageType(
  "api.commons.public.ExecuteTrustcommerceAchSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteVantivCreditSale
 */
export const ExecuteVantivCreditSale = proto3.makeMessageType(
  "api.commons.public.ExecuteVantivCreditSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteVantivAchSale
 */
export const ExecuteVantivAchSale = proto3.makeMessageType(
  "api.commons.public.ExecuteVantivAchSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteJourneyLatest
 */
export const ExecuteJourneyLatest = proto3.makeMessageType(
  "api.commons.public.ExecuteJourneyLatest",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAthenahealthGetPatients
 */
export const ExecuteAthenahealthGetPatients = proto3.makeMessageType(
  "api.commons.public.ExecuteAthenahealthGetPatients",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAthenahealthGetPatientsWithId
 */
export const ExecuteAthenahealthGetPatientsWithId = proto3.makeMessageType(
  "api.commons.public.ExecuteAthenahealthGetPatientsWithId",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteAthenahealthCcPayment
 */
export const ExecuteAthenahealthCcPayment = proto3.makeMessageType(
  "api.commons.public.ExecuteAthenahealthCcPayment",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBrainworksGetCustomersByPhone
 */
export const ExecuteBrainworksGetCustomersByPhone = proto3.makeMessageType(
  "api.commons.public.ExecuteBrainworksGetCustomersByPhone",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBrainworksGetSuspends
 */
export const ExecuteBrainworksGetSuspends = proto3.makeMessageType(
  "api.commons.public.ExecuteBrainworksGetSuspends",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBrainworksGetCustomerByCustIdV2
 */
export const ExecuteBrainworksGetCustomerByCustIdV2 = proto3.makeMessageType(
  "api.commons.public.ExecuteBrainworksGetCustomerByCustIdV2",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBrainworksGetComplaints
 */
export const ExecuteBrainworksGetComplaints = proto3.makeMessageType(
  "api.commons.public.ExecuteBrainworksGetComplaints",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBrainworksGetCodesOrTypes
 */
export const ExecuteBrainworksGetCodesOrTypes = proto3.makeMessageType(
  "api.commons.public.ExecuteBrainworksGetCodesOrTypes",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBrainworksStopSuspends
 */
export const ExecuteBrainworksStopSuspends = proto3.makeMessageType(
  "api.commons.public.ExecuteBrainworksStopSuspends",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBrainworksStartSuspends
 */
export const ExecuteBrainworksStartSuspends = proto3.makeMessageType(
  "api.commons.public.ExecuteBrainworksStartSuspends",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBrainworksSendComplaint
 */
export const ExecuteBrainworksSendComplaint = proto3.makeMessageType(
  "api.commons.public.ExecuteBrainworksSendComplaint",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteBrainworksGetCustomerByCustId
 */
export const ExecuteBrainworksGetCustomerByCustId = proto3.makeMessageType(
  "api.commons.public.ExecuteBrainworksGetCustomerByCustId",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteOsgconnectCcPayments
 */
export const ExecuteOsgconnectCcPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteOsgconnectCcPayments",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteOsgconnectAchPayments
 */
export const ExecuteOsgconnectAchPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteOsgconnectAchPayments",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteOsgconnectValidateAccountNo
 */
export const ExecuteOsgconnectValidateAccountNo = proto3.makeMessageType(
  "api.commons.public.ExecuteOsgconnectValidateAccountNo",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbCreditMissedDelivery
 */
export const ExecuteNtvbCreditMissedDelivery = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbCreditMissedDelivery",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbCustomerSearch
 */
export const ExecuteNtvbCustomerSearch = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbCustomerSearch",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbEndCall
 */
export const ExecuteNtvbEndCall = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbEndCall",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbIntegrationDefinition
 */
export const ExecuteNtvbIntegrationDefinition = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbIntegrationDefinition",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbMissedDelivery
 */
export const ExecuteNtvbMissedDelivery = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbMissedDelivery",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbRemoveAutorenewal
 */
export const ExecuteNtvbRemoveAutorenewal = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbRemoveAutorenewal",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbRenewSubscription
 */
export const ExecuteNtvbRenewSubscription = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbRenewSubscription",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbRenewalOffers
 */
export const ExecuteNtvbRenewalOffers = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbRenewalOffers",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbSetAutorenewal
 */
export const ExecuteNtvbSetAutorenewal = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbSetAutorenewal",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbStartIncomingCall
 */
export const ExecuteNtvbStartIncomingCall = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbStartIncomingCall",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbStartOutgoingCall
 */
export const ExecuteNtvbStartOutgoingCall = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbStartOutgoingCall",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbSubscriptionInfo
 */
export const ExecuteNtvbSubscriptionInfo = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbSubscriptionInfo",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbVacationStop
 */
export const ExecuteNtvbVacationStop = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbVacationStop",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteNtvbAuthtest
 */
export const ExecuteNtvbAuthtest = proto3.makeMessageType(
  "api.commons.public.ExecuteNtvbAuthtest",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonCreditCardSale
 */
export const ExecuteElavonCreditCardSale = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonCreditCardSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonAddRecurring
 */
export const ExecuteElavonAddRecurring = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonAddRecurring",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonDccResponse
 */
export const ExecuteElavonDccResponse = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonDccResponse",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonUpdateRecurring
 */
export const ExecuteElavonUpdateRecurring = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonUpdateRecurring",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonDeleteRecurring
 */
export const ExecuteElavonDeleteRecurring = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonDeleteRecurring",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonMccCreditCardSale
 */
export const ExecuteElavonMccCreditCardSale = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonMccCreditCardSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonHealthCareCCSale
 */
export const ExecuteElavonHealthCareCCSale = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonHealthCareCCSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonAddInstallment
 */
export const ExecuteElavonAddInstallment = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonAddInstallment",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonDeleteInstallment
 */
export const ExecuteElavonDeleteInstallment = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonDeleteInstallment",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteElavonUpdateInstallment
 */
export const ExecuteElavonUpdateInstallment = proto3.makeMessageType(
  "api.commons.public.ExecuteElavonUpdateInstallment",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteGlobalPaymentsCardSale
 */
export const ExecuteGlobalPaymentsCardSale = proto3.makeMessageType(
  "api.commons.public.ExecuteGlobalPaymentsCardSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteGlobalPaymentsGetTransactionByID
 */
export const ExecuteGlobalPaymentsGetTransactionByID = proto3.makeMessageType(
  "api.commons.public.ExecuteGlobalPaymentsGetTransactionByID",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteGlobalPaymentsListTransactions
 */
export const ExecuteGlobalPaymentsListTransactions = proto3.makeMessageType(
  "api.commons.public.ExecuteGlobalPaymentsListTransactions",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteGlobalPaymentsRefundSale
 */
export const ExecuteGlobalPaymentsRefundSale = proto3.makeMessageType(
  "api.commons.public.ExecuteGlobalPaymentsRefundSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteGlobalPaymentsReverseSaleOrRefund
 */
export const ExecuteGlobalPaymentsReverseSaleOrRefund = proto3.makeMessageType(
  "api.commons.public.ExecuteGlobalPaymentsReverseSaleOrRefund",
  [],
);

/**
 * @generated from message api.commons.public.ExecutePayScoutCreditCardSale
 */
export const ExecutePayScoutCreditCardSale = proto3.makeMessageType(
  "api.commons.public.ExecutePayScoutCreditCardSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecutePayScoutEcheckSale
 */
export const ExecutePayScoutEcheckSale = proto3.makeMessageType(
  "api.commons.public.ExecutePayScoutEcheckSale",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cEcho
 */
export const ExecuteI2cEcho = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cEcho",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cBalanceInquiry
 */
export const ExecuteI2cBalanceInquiry = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cBalanceInquiry",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cVerifyUser
 */
export const ExecuteI2cVerifyUser = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cVerifyUser",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cSearchCustomer
 */
export const ExecuteI2cSearchCustomer = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cSearchCustomer",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cMakePayment
 */
export const ExecuteI2cMakePayment = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cMakePayment",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cGetCardholderProfile
 */
export const ExecuteI2cGetCardholderProfile = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cGetCardholderProfile",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cGetCardholderStatement
 */
export const ExecuteI2cGetCardholderStatement = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cGetCardholderStatement",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cGetCardholderBalance
 */
export const ExecuteI2cGetCardholderBalance = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cGetCardholderBalance",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cGetCreditPaymentInfo
 */
export const ExecuteI2cGetCreditPaymentInfo = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cGetCreditPaymentInfo",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteI2cTransactionHistory
 */
export const ExecuteI2cTransactionHistory = proto3.makeMessageType(
  "api.commons.public.ExecuteI2cTransactionHistory",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteOpayoCcPayments
 */
export const ExecuteOpayoCcPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteOpayoCcPayments",
  [],
);

/**
 * @generated from message api.commons.public.ExecuteShift4CcPayments
 */
export const ExecuteShift4CcPayments = proto3.makeMessageType(
  "api.commons.public.ExecuteShift4CcPayments",
  [],
);

