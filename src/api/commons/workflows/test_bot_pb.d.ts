// @generated by protoc-gen-es v1.3.3 with parameter "target=js+dts"
// @generated from file api/commons/workflows/test_bot.proto (package api.commons.workflows, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { AuthenticatedUser } from "../auth/user_pb.js";
import type { Project } from "../../v0alpha/omniapi_pb.js";

/**
 * TestBotTestStepType represents the type of test step.
 *
 * @generated from enum api.commons.workflows.TestBotTestStepType
 */
export declare enum TestBotTestStepType {
  /**
   * @generated from enum value: TEST_BOT_TEST_STEP_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * OMNICHANNEL
   *
   * @generated from enum value: TEST_BOT_TEST_STEP_TYPE_OMNICHANNEL_CREATE_PROJECT = 1000;
   */
  OMNICHANNEL_CREATE_PROJECT = 1000,

  /**
   * @generated from enum value: TEST_BOT_TEST_STEP_TYPE_OMNICHANNEL_GET_PROJECT = 1001;
   */
  OMNICHANNEL_GET_PROJECT = 1001,
}

/**
 * TestBotEntityType represents the type of entity.
 *
 * @generated from enum api.commons.workflows.TestBotEntityType
 */
export declare enum TestBotEntityType {
  /**
   * @generated from enum value: TEST_BOT_ENTITY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TEST_BOT_ENTITY_TYPE_USER = 100;
   */
  USER = 100,

  /**
   * OMNICHANNEL
   *
   * @generated from enum value: TEST_BOT_ENTITY_TYPE_OMNICHANNEL_PROJECT = 300;
   */
  OMNICHANNEL_PROJECT = 300,
}

/**
 * TestBotNodeTestStart represents a start-of-test node.
 *
 * @generated from message api.commons.workflows.TestBotNodeTestStart
 */
export declare class TestBotNodeTestStart extends Message<TestBotNodeTestStart> {
  /**
   * Optional. The entities the test requires to run, where
   * the key is a unique name given to the entity for the
   * sole purpose of this flow.
   *
   * @generated from field: map<string, api.commons.workflows.TestBotEntity> entities = 1;
   */
  entities: { [key: string]: TestBotEntity };

  constructor(data?: PartialMessage<TestBotNodeTestStart>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.workflows.TestBotNodeTestStart";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestBotNodeTestStart;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestBotNodeTestStart;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestBotNodeTestStart;

  static equals(a: TestBotNodeTestStart | PlainMessage<TestBotNodeTestStart> | undefined, b: TestBotNodeTestStart | PlainMessage<TestBotNodeTestStart> | undefined): boolean;
}

/**
 * TestBotNodeTestStep represents an test-bot test-step node.
 *
 * @generated from message api.commons.workflows.TestBotNodeTestStep
 */
export declare class TestBotNodeTestStep extends Message<TestBotNodeTestStep> {
  /**
   * Optional. Whether the test should error if the step fails.
   *
   * @generated from field: bool should_error = 1;
   */
  shouldError: boolean;

  /**
   * Required. The type of test step.
   *
   * @generated from field: api.commons.workflows.TestBotTestStepType type = 2;
   */
  type: TestBotTestStepType;

  /**
   * Optional. The names of the entities to use in the test step.
   * These names must correspond to the names provided in the
   * NodeTestStart message.
   *
   * @generated from field: repeated string entity_names = 3;
   */
  entityNames: string[];

  constructor(data?: PartialMessage<TestBotNodeTestStep>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.workflows.TestBotNodeTestStep";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestBotNodeTestStep;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestBotNodeTestStep;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestBotNodeTestStep;

  static equals(a: TestBotNodeTestStep | PlainMessage<TestBotNodeTestStep> | undefined, b: TestBotNodeTestStep | PlainMessage<TestBotNodeTestStep> | undefined): boolean;
}

/**
 * TestBotNodeTestEnd represents an test-bot end-of-test node.
 *
 * @generated from message api.commons.workflows.TestBotNodeTestEnd
 */
export declare class TestBotNodeTestEnd extends Message<TestBotNodeTestEnd> {
  /**
   * Optional. Error message if the test failed.
   *
   * @generated from field: string error = 1;
   */
  error: string;

  constructor(data?: PartialMessage<TestBotNodeTestEnd>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.workflows.TestBotNodeTestEnd";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestBotNodeTestEnd;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestBotNodeTestEnd;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestBotNodeTestEnd;

  static equals(a: TestBotNodeTestEnd | PlainMessage<TestBotNodeTestEnd> | undefined, b: TestBotNodeTestEnd | PlainMessage<TestBotNodeTestEnd> | undefined): boolean;
}

/**
 * TestBotEntity represents an entity that is required for the test.
 *
 * @generated from message api.commons.workflows.TestBotEntity
 */
export declare class TestBotEntity extends Message<TestBotEntity> {
  /**
   * Required. The entity type.
   *
   * @generated from field: api.commons.workflows.TestBotEntityType type = 1;
   */
  type: TestBotEntityType;

  /**
   * Optional. Whether the entity is "atomic." An atomic entity
   * is one that can only be used by one test at any given time.
   *
   * @generated from field: bool atomic = 2;
   */
  atomic: boolean;

  /**
   * Required. The entity value.
   *
   * @generated from oneof api.commons.workflows.TestBotEntity.data
   */
  data: {
    /**
     * @generated from field: api.commons.auth.AuthenticatedUser user = 100;
     */
    value: AuthenticatedUser;
    case: "user";
  } | {
    /**
     * OMNICHANNEL
     *
     * @generated from field: api.v0alpha.Project omnichannel_project = 300;
     */
    value: Project;
    case: "omnichannelProject";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<TestBotEntity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.workflows.TestBotEntity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestBotEntity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestBotEntity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestBotEntity;

  static equals(a: TestBotEntity | PlainMessage<TestBotEntity> | undefined, b: TestBotEntity | PlainMessage<TestBotEntity> | undefined): boolean;
}

