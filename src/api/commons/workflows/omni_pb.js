// @generated by protoc-gen-es v1.3.0 with parameter "target=js+dts"
// @generated from file api/commons/workflows/omni.proto (package api.commons.workflows, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * OmniNodePrompt is the PoC all-in-one version to send a message (optionally displaying options) and store the user input
 *
 * @generated from message api.commons.workflows.OmniNodePrompt
 */
export const OmniNodePrompt = proto3.makeMessageType(
  "api.commons.workflows.OmniNodePrompt",
  () => [
    { no: 1, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "store_to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * OmniNodeOptions will store a list of options under a given subkey in the payload.options
 *
 * @generated from message api.commons.workflows.OmniNodeOptions
 */
export const OmniNodeOptions = proto3.makeMessageType(
  "api.commons.workflows.OmniNodeOptions",
  () => [
    { no: 1, name: "options_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * OmniNodeSendMessage will send a message, optionally displaying options
 *
 * @generated from message api.commons.workflows.OmniNodeSendMessage
 */
export const OmniNodeSendMessage = proto3.makeMessageType(
  "api.commons.workflows.OmniNodeSendMessage",
  () => [
    { no: 1, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OmniNodeStore will store the text value of an incoming message under a given key in the payload
 *
 * @generated from message api.commons.workflows.OmniNodeStore
 */
export const OmniNodeStore = proto3.makeMessageType(
  "api.commons.workflows.OmniNodeStore",
  () => [
    { no: 1, name: "store_to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OmniNodeDecision compares the input against previously stored options (via OmniNodeOptions)
 *
 * @generated from message api.commons.workflows.OmniNodeDecision
 */
export const OmniNodeDecision = proto3.makeMessageType(
  "api.commons.workflows.OmniNodeDecision",
  () => [
    { no: 1, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "input", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OmniNodeSetSkill adds the given string as a skill on the coversation
 *
 * @generated from message api.commons.workflows.OmniNodeSetSkill
 */
export const OmniNodeSetSkill = proto3.makeMessageType(
  "api.commons.workflows.OmniNodeSetSkill",
  () => [
    { no: 1, name: "skill", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OmniNodeToAgent removes the conversation from the flow (updates the status)
 *
 * @generated from message api.commons.workflows.OmniNodeToAgent
 */
export const OmniNodeToAgent = proto3.makeMessageType(
  "api.commons.workflows.OmniNodeToAgent",
  [],
);

/**
 * OmniNodeError will send an error message to the user and log an error
 *
 * @generated from message api.commons.workflows.OmniNodeError
 */
export const OmniNodeError = proto3.makeMessageType(
  "api.commons.workflows.OmniNodeError",
  () => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

