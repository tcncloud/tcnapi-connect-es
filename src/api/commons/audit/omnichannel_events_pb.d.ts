// @generated by protoc-gen-es v1.3.1 with parameter "target=js+dts"
// @generated from file api/commons/audit/omnichannel_events.proto (package api.commons.audit, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { CampaignDirection, ChannelType, ConnectedInbox, ConversationCollectedData, OmniCampaign, OmniConversation, OmniMessage, OmniTask } from "../omnichannel_pb.js";

/**
 * OmnichannelCreateProjectEvent - whenever a project is created
 *
 * @generated from message api.commons.audit.OmnichannelCreateProjectEvent
 */
export declare class OmnichannelCreateProjectEvent extends Message<OmnichannelCreateProjectEvent> {
  /**
   * @generated from field: int64 client_sid = 1;
   */
  clientSid: bigint;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  constructor(data?: PartialMessage<OmnichannelCreateProjectEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelCreateProjectEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelCreateProjectEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelCreateProjectEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelCreateProjectEvent;

  static equals(a: OmnichannelCreateProjectEvent | PlainMessage<OmnichannelCreateProjectEvent> | undefined, b: OmnichannelCreateProjectEvent | PlainMessage<OmnichannelCreateProjectEvent> | undefined): boolean;
}

/**
 * OmnichannelCreateCampaignEvent - whenever a campaign is created
 *
 * @generated from message api.commons.audit.OmnichannelCreateCampaignEvent
 */
export declare class OmnichannelCreateCampaignEvent extends Message<OmnichannelCreateCampaignEvent> {
  /**
   * campaign name
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * campaign description
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * campaign type
   *
   * @generated from field: api.commons.ChannelType channel_type = 3;
   */
  channelType: ChannelType;

  /**
   * campaign direction
   *
   * @generated from field: api.commons.CampaignDirection campaign_direction = 4;
   */
  campaignDirection: CampaignDirection;

  /**
   * generated campaign sid
   *
   * @generated from field: int64 campaign_sid = 5;
   */
  campaignSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 6;
   */
  omniCampaign?: OmniCampaign;

  /**
   * project identifier
   *
   * @generated from field: int64 project_sid = 7;
   */
  projectSid: bigint;

  constructor(data?: PartialMessage<OmnichannelCreateCampaignEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelCreateCampaignEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelCreateCampaignEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelCreateCampaignEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelCreateCampaignEvent;

  static equals(a: OmnichannelCreateCampaignEvent | PlainMessage<OmnichannelCreateCampaignEvent> | undefined, b: OmnichannelCreateCampaignEvent | PlainMessage<OmnichannelCreateCampaignEvent> | undefined): boolean;
}

/**
 * OmnichannelT10Event - whenever a T10 is triggered
 *
 * @generated from message api.commons.audit.OmnichannelT10Event
 */
export declare class OmnichannelT10Event extends Message<OmnichannelT10Event> {
  /**
   * conversation_id
   *
   * @generated from field: int64 conversation_sid = 1;
   */
  conversationSid: bigint;

  /**
   * campaign_id
   *
   * @generated from field: int64 campaign_sid = 2;
   */
  campaignSid: bigint;

  /**
   * channel_type
   *
   * @generated from field: api.commons.ChannelType channel_type = 3;
   */
  channelType: ChannelType;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 4;
   */
  conversation?: OmniConversation;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 5;
   */
  message?: OmniMessage;

  constructor(data?: PartialMessage<OmnichannelT10Event>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelT10Event";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelT10Event;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelT10Event;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelT10Event;

  static equals(a: OmnichannelT10Event | PlainMessage<OmnichannelT10Event> | undefined, b: OmnichannelT10Event | PlainMessage<OmnichannelT10Event> | undefined): boolean;
}

/**
 * OmnichannelDailyReportEvent - whenever a daily project report is generated
 *
 * @generated from message api.commons.audit.OmnichannelDailyProjectReportEvent
 */
export declare class OmnichannelDailyProjectReportEvent extends Message<OmnichannelDailyProjectReportEvent> {
  /**
   * @generated from field: string download_url = 1;
   */
  downloadUrl: string;

  constructor(data?: PartialMessage<OmnichannelDailyProjectReportEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelDailyProjectReportEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelDailyProjectReportEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelDailyProjectReportEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelDailyProjectReportEvent;

  static equals(a: OmnichannelDailyProjectReportEvent | PlainMessage<OmnichannelDailyProjectReportEvent> | undefined, b: OmnichannelDailyProjectReportEvent | PlainMessage<OmnichannelDailyProjectReportEvent> | undefined): boolean;
}

/**
 * OmnichannelDailyReportEvent - whenever a daily conversation report is generated
 *
 * @generated from message api.commons.audit.OmnichannelDailyConversationReportEvent
 */
export declare class OmnichannelDailyConversationReportEvent extends Message<OmnichannelDailyConversationReportEvent> {
  /**
   * @generated from field: string download_url = 1;
   */
  downloadUrl: string;

  constructor(data?: PartialMessage<OmnichannelDailyConversationReportEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelDailyConversationReportEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelDailyConversationReportEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelDailyConversationReportEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelDailyConversationReportEvent;

  static equals(a: OmnichannelDailyConversationReportEvent | PlainMessage<OmnichannelDailyConversationReportEvent> | undefined, b: OmnichannelDailyConversationReportEvent | PlainMessage<OmnichannelDailyConversationReportEvent> | undefined): boolean;
}

/**
 * OmnichannelAgentAssignConversationEvent - handle agent assign conversation event
 *
 * @generated from message api.commons.audit.OmnichannelAgentAssignConversationEvent
 */
export declare class OmnichannelAgentAssignConversationEvent extends Message<OmnichannelAgentAssignConversationEvent> {
  /**
   * conversation id
   *
   * @generated from field: int64 conversation_sid = 1;
   */
  conversationSid: bigint;

  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 2;
   */
  campaignSid: bigint;

  /**
   * channel type - chat|email|sms
   *
   * @generated from field: api.commons.ChannelType channel_type = 3;
   */
  channelType: ChannelType;

  /**
   * agent user id
   *
   * @generated from field: string user_id = 4;
   */
  userId: string;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 5;
   */
  conversation?: OmniConversation;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 6;
   */
  message?: OmniMessage;

  constructor(data?: PartialMessage<OmnichannelAgentAssignConversationEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelAgentAssignConversationEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelAgentAssignConversationEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelAgentAssignConversationEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelAgentAssignConversationEvent;

  static equals(a: OmnichannelAgentAssignConversationEvent | PlainMessage<OmnichannelAgentAssignConversationEvent> | undefined, b: OmnichannelAgentAssignConversationEvent | PlainMessage<OmnichannelAgentAssignConversationEvent> | undefined): boolean;
}

/**
 * OmnichannelAgentUnassignConversationEvent - handle agent unassign conversation event
 *
 * @generated from message api.commons.audit.OmnichannelAgentUnassignConversationEvent
 */
export declare class OmnichannelAgentUnassignConversationEvent extends Message<OmnichannelAgentUnassignConversationEvent> {
  /**
   * conversation id
   *
   * @generated from field: int64 conversation_sid = 1;
   */
  conversationSid: bigint;

  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 2;
   */
  campaignSid: bigint;

  /**
   * channel type - chat|email|sms
   *
   * @generated from field: api.commons.ChannelType channel_type = 3;
   */
  channelType: ChannelType;

  /**
   * agent user id
   *
   * @generated from field: string user_id = 4;
   */
  userId: string;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 5;
   */
  conversation?: OmniConversation;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 6;
   */
  message?: OmniMessage;

  constructor(data?: PartialMessage<OmnichannelAgentUnassignConversationEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelAgentUnassignConversationEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelAgentUnassignConversationEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelAgentUnassignConversationEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelAgentUnassignConversationEvent;

  static equals(a: OmnichannelAgentUnassignConversationEvent | PlainMessage<OmnichannelAgentUnassignConversationEvent> | undefined, b: OmnichannelAgentUnassignConversationEvent | PlainMessage<OmnichannelAgentUnassignConversationEvent> | undefined): boolean;
}

/**
 * OmnichannelAgentReassignConversationEvent - handle agent reassign conversation event
 *
 * @generated from message api.commons.audit.OmnichannelAgentReassignConversationEvent
 */
export declare class OmnichannelAgentReassignConversationEvent extends Message<OmnichannelAgentReassignConversationEvent> {
  /**
   * conversation id
   *
   * @generated from field: int64 conversation_sid = 1;
   */
  conversationSid: bigint;

  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 2;
   */
  campaignSid: bigint;

  /**
   * channel type - chat|email|sms
   *
   * @generated from field: api.commons.ChannelType channel_type = 3;
   */
  channelType: ChannelType;

  /**
   * manager/agent who initiated reassign
   *
   * @generated from field: string user_id = 4;
   */
  userId: string;

  /**
   * current agent who is being unassigned
   *
   * @generated from field: string current_user_id = 5;
   */
  currentUserId: string;

  /**
   * new agent who who is being assigned to
   *
   * @generated from field: string new_user_id = 6;
   */
  newUserId: string;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 7;
   */
  conversation?: OmniConversation;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 8;
   */
  message?: OmniMessage;

  /**
   * the AsmSession Sid
   *
   * @generated from field: google.protobuf.Int64Value new_user_asm_session_sid = 9;
   */
  newUserAsmSessionSid?: bigint;

  constructor(data?: PartialMessage<OmnichannelAgentReassignConversationEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelAgentReassignConversationEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelAgentReassignConversationEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelAgentReassignConversationEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelAgentReassignConversationEvent;

  static equals(a: OmnichannelAgentReassignConversationEvent | PlainMessage<OmnichannelAgentReassignConversationEvent> | undefined, b: OmnichannelAgentReassignConversationEvent | PlainMessage<OmnichannelAgentReassignConversationEvent> | undefined): boolean;
}

/**
 * OmnichannelCustomerTextMessageEvent - whenever a customer sends a text message
 *
 * @generated from message api.commons.audit.OmnichannelCustomerTextMessageEvent
 */
export declare class OmnichannelCustomerTextMessageEvent extends Message<OmnichannelCustomerTextMessageEvent> {
  /**
   * the unique identifier for the conversation
   *
   * @generated from field: int64 conversation_sid = 3;
   */
  conversationSid: bigint;

  /**
   * the message sent by the customer
   *
   * @generated from field: api.commons.OmniMessage message = 4;
   */
  message?: OmniMessage;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 5;
   */
  conversation?: OmniConversation;

  constructor(data?: PartialMessage<OmnichannelCustomerTextMessageEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelCustomerTextMessageEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelCustomerTextMessageEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelCustomerTextMessageEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelCustomerTextMessageEvent;

  static equals(a: OmnichannelCustomerTextMessageEvent | PlainMessage<OmnichannelCustomerTextMessageEvent> | undefined, b: OmnichannelCustomerTextMessageEvent | PlainMessage<OmnichannelCustomerTextMessageEvent> | undefined): boolean;
}

/**
 * OmnichannelAgentTextMessageEvent - whenever an agent send a text message
 *
 * @generated from message api.commons.audit.OmnichannelAgentTextMessageEvent
 */
export declare class OmnichannelAgentTextMessageEvent extends Message<OmnichannelAgentTextMessageEvent> {
  /**
   * the unique identifier for the conversation
   *
   * @generated from field: int64 conversation_sid = 3;
   */
  conversationSid: bigint;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 4;
   */
  message?: OmniMessage;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 5;
   */
  conversation?: OmniConversation;

  constructor(data?: PartialMessage<OmnichannelAgentTextMessageEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelAgentTextMessageEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelAgentTextMessageEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelAgentTextMessageEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelAgentTextMessageEvent;

  static equals(a: OmnichannelAgentTextMessageEvent | PlainMessage<OmnichannelAgentTextMessageEvent> | undefined, b: OmnichannelAgentTextMessageEvent | PlainMessage<OmnichannelAgentTextMessageEvent> | undefined): boolean;
}

/**
 * OmnichannelManagerTextMessageEvent - whenever an agent send a text message
 *
 * @generated from message api.commons.audit.OmnichannelManagerTextMessageEvent
 */
export declare class OmnichannelManagerTextMessageEvent extends Message<OmnichannelManagerTextMessageEvent> {
  /**
   * the unique identifier for the conversation
   *
   * @generated from field: int64 conversation_sid = 3;
   */
  conversationSid: bigint;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 4;
   */
  message?: OmniMessage;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 5;
   */
  conversation?: OmniConversation;

  constructor(data?: PartialMessage<OmnichannelManagerTextMessageEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelManagerTextMessageEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelManagerTextMessageEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelManagerTextMessageEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelManagerTextMessageEvent;

  static equals(a: OmnichannelManagerTextMessageEvent | PlainMessage<OmnichannelManagerTextMessageEvent> | undefined, b: OmnichannelManagerTextMessageEvent | PlainMessage<OmnichannelManagerTextMessageEvent> | undefined): boolean;
}

/**
 * OmnichannelFinishWrapUpEvent - when an agent has finished wrap up
 *
 * @generated from message api.commons.audit.OmnichannelFinishWrapUpEvent
 */
export declare class OmnichannelFinishWrapUpEvent extends Message<OmnichannelFinishWrapUpEvent> {
  /**
   * the unique identifier for the conversation
   *
   * @generated from field: int64 conversation_sid = 1;
   */
  conversationSid: bigint;

  /**
   * the campaign identifier the event is associated with
   *
   * @generated from field: int64 campaign_sid = 2;
   */
  campaignSid: bigint;

  /**
   * the channel type i.e. chat|email|sms|etc.
   *
   * @generated from field: api.commons.ChannelType channel_type = 3;
   */
  channelType: ChannelType;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 4;
   */
  conversation?: OmniConversation;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 5;
   */
  message?: OmniMessage;

  /**
   * AsmSessionSid
   *
   * @generated from field: google.protobuf.Int64Value asm_session_sid = 6;
   */
  asmSessionSid?: bigint;

  constructor(data?: PartialMessage<OmnichannelFinishWrapUpEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelFinishWrapUpEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelFinishWrapUpEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelFinishWrapUpEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelFinishWrapUpEvent;

  static equals(a: OmnichannelFinishWrapUpEvent | PlainMessage<OmnichannelFinishWrapUpEvent> | undefined, b: OmnichannelFinishWrapUpEvent | PlainMessage<OmnichannelFinishWrapUpEvent> | undefined): boolean;
}

/**
 * OmnichannelBeginWrapUpEvent - when a conversation closes and moves to wrap up
 *
 * @generated from message api.commons.audit.OmnichannelBeginWrapUpEvent
 */
export declare class OmnichannelBeginWrapUpEvent extends Message<OmnichannelBeginWrapUpEvent> {
  /**
   * the unique identifier for the conversation
   *
   * @generated from field: int64 conversation_sid = 1;
   */
  conversationSid: bigint;

  /**
   * the campaign identifier this event is associated with
   *
   * @generated from field: int64 campaign_sid = 2;
   */
  campaignSid: bigint;

  /**
   * the channel type i.e. chat|email|sms|etc.
   *
   * @generated from field: api.commons.ChannelType channel_type = 3;
   */
  channelType: ChannelType;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 4;
   */
  conversation?: OmniConversation;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 5;
   */
  message?: OmniMessage;

  constructor(data?: PartialMessage<OmnichannelBeginWrapUpEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelBeginWrapUpEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelBeginWrapUpEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelBeginWrapUpEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelBeginWrapUpEvent;

  static equals(a: OmnichannelBeginWrapUpEvent | PlainMessage<OmnichannelBeginWrapUpEvent> | undefined, b: OmnichannelBeginWrapUpEvent | PlainMessage<OmnichannelBeginWrapUpEvent> | undefined): boolean;
}

/**
 * OmnichannelT11Event - whenever the t11 timer went off
 *
 * @generated from message api.commons.audit.OmnichannelT11Event
 */
export declare class OmnichannelT11Event extends Message<OmnichannelT11Event> {
  /**
   * the identifier of the conversation the timer is associated with
   *
   * @generated from field: int64 conversation_sid = 1;
   */
  conversationSid: bigint;

  /**
   * the identifier of the campaign the timer is associated with
   *
   * @generated from field: int64 campaign_sid = 2;
   */
  campaignSid: bigint;

  /**
   * the channel type i.e. chat|sms|email|etc.
   *
   * @generated from field: api.commons.ChannelType channel_type = 3;
   */
  channelType: ChannelType;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 4;
   */
  conversation?: OmniConversation;

  constructor(data?: PartialMessage<OmnichannelT11Event>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelT11Event";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelT11Event;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelT11Event;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelT11Event;

  static equals(a: OmnichannelT11Event | PlainMessage<OmnichannelT11Event> | undefined, b: OmnichannelT11Event | PlainMessage<OmnichannelT11Event> | undefined): boolean;
}

/**
 * // create conversation when customer sends initial message and T1 starts
 *
 * @generated from message api.commons.audit.OmnichannelCreateConversationEvent
 */
export declare class OmnichannelCreateConversationEvent extends Message<OmnichannelCreateConversationEvent> {
  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 1;
   */
  campaignSid: bigint;

  /**
   * channel type - chat|email|sms
   *
   * @generated from field: api.commons.ChannelType channel_type = 2;
   */
  channelType: ChannelType;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 3;
   */
  conversation?: OmniConversation;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 4;
   */
  message?: OmniMessage;

  constructor(data?: PartialMessage<OmnichannelCreateConversationEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelCreateConversationEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelCreateConversationEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelCreateConversationEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelCreateConversationEvent;

  static equals(a: OmnichannelCreateConversationEvent | PlainMessage<OmnichannelCreateConversationEvent> | undefined, b: OmnichannelCreateConversationEvent | PlainMessage<OmnichannelCreateConversationEvent> | undefined): boolean;
}

/**
 * OmnichannelAgentSuspendEvent - whenever agent suspends the conversation
 *
 * @generated from message api.commons.audit.OmnichannelAgentSuspendEvent
 */
export declare class OmnichannelAgentSuspendEvent extends Message<OmnichannelAgentSuspendEvent> {
  /**
   * the suspend message
   *
   * @generated from field: api.commons.OmniMessage message = 1;
   */
  message?: OmniMessage;

  /**
   * conversation this message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 2;
   */
  conversation?: OmniConversation;

  /**
   * asm Session sid
   *
   * @generated from field: google.protobuf.Int64Value asm_session_sid = 3;
   */
  asmSessionSid?: bigint;

  constructor(data?: PartialMessage<OmnichannelAgentSuspendEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelAgentSuspendEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelAgentSuspendEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelAgentSuspendEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelAgentSuspendEvent;

  static equals(a: OmnichannelAgentSuspendEvent | PlainMessage<OmnichannelAgentSuspendEvent> | undefined, b: OmnichannelAgentSuspendEvent | PlainMessage<OmnichannelAgentSuspendEvent> | undefined): boolean;
}

/**
 * OmnichannelCloseConversationEvent - close conversation
 *
 * @generated from message api.commons.audit.OmnichannelCloseConversationEvent
 */
export declare class OmnichannelCloseConversationEvent extends Message<OmnichannelCloseConversationEvent> {
  /**
   * the close message
   *
   * @generated from field: api.commons.OmniMessage message = 1;
   */
  message?: OmniMessage;

  /**
   * conversation the message belongs to
   *
   * @generated from field: api.commons.OmniConversation conversation = 2;
   */
  conversation?: OmniConversation;

  constructor(data?: PartialMessage<OmnichannelCloseConversationEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelCloseConversationEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelCloseConversationEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelCloseConversationEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelCloseConversationEvent;

  static equals(a: OmnichannelCloseConversationEvent | PlainMessage<OmnichannelCloseConversationEvent> | undefined, b: OmnichannelCloseConversationEvent | PlainMessage<OmnichannelCloseConversationEvent> | undefined): boolean;
}

/**
 * OmnichannelUpdateCampaignEvent - whenever a campaign is update
 *
 * @generated from message api.commons.audit.OmnichannelUpdateCampaignEvent
 */
export declare class OmnichannelUpdateCampaignEvent extends Message<OmnichannelUpdateCampaignEvent> {
  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 1;
   */
  campaignSid: bigint;

  /**
   * campaign name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * campaign description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * campaign type
   *
   * @generated from field: api.commons.ChannelType channel_type = 4;
   */
  channelType: ChannelType;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 5;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelUpdateCampaignEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelUpdateCampaignEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelUpdateCampaignEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelUpdateCampaignEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelUpdateCampaignEvent;

  static equals(a: OmnichannelUpdateCampaignEvent | PlainMessage<OmnichannelUpdateCampaignEvent> | undefined, b: OmnichannelUpdateCampaignEvent | PlainMessage<OmnichannelUpdateCampaignEvent> | undefined): boolean;
}

/**
 * OmnichannelSetConversationCollectedDataEvent - handle set conversation collected data event
 *
 * @generated from message api.commons.audit.OmnichannelSetConversationCollectedDataEvent
 */
export declare class OmnichannelSetConversationCollectedDataEvent extends Message<OmnichannelSetConversationCollectedDataEvent> {
  /**
   * conversation id
   *
   * @generated from field: int64 conversation_sid = 1;
   */
  conversationSid: bigint;

  /**
   * the id of the agent
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * channel type - chat|email|sms
   *
   * @generated from field: api.commons.ChannelType channel_type = 3;
   */
  channelType: ChannelType;

  /**
   * campaign direction
   *
   * @generated from field: api.commons.CampaignDirection campaign_direction = 4;
   */
  campaignDirection: CampaignDirection;

  /**
   * collected data
   *
   * @generated from field: api.commons.ConversationCollectedData collected_data = 5;
   */
  collectedData?: ConversationCollectedData;

  constructor(data?: PartialMessage<OmnichannelSetConversationCollectedDataEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelSetConversationCollectedDataEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelSetConversationCollectedDataEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelSetConversationCollectedDataEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelSetConversationCollectedDataEvent;

  static equals(a: OmnichannelSetConversationCollectedDataEvent | PlainMessage<OmnichannelSetConversationCollectedDataEvent> | undefined, b: OmnichannelSetConversationCollectedDataEvent | PlainMessage<OmnichannelSetConversationCollectedDataEvent> | undefined): boolean;
}

/**
 * OmnichannelCompleteCampaignEvent - whenever a campaign is completed
 *
 * @generated from message api.commons.audit.OmnichannelCompleteCampaignEvent
 */
export declare class OmnichannelCompleteCampaignEvent extends Message<OmnichannelCompleteCampaignEvent> {
  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 1;
   */
  campaignSid: bigint;

  /**
   * campaign name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * campaign description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * campaign type
   *
   * @generated from field: api.commons.ChannelType channel_type = 4;
   */
  channelType: ChannelType;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 5;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelCompleteCampaignEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelCompleteCampaignEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelCompleteCampaignEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelCompleteCampaignEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelCompleteCampaignEvent;

  static equals(a: OmnichannelCompleteCampaignEvent | PlainMessage<OmnichannelCompleteCampaignEvent> | undefined, b: OmnichannelCompleteCampaignEvent | PlainMessage<OmnichannelCompleteCampaignEvent> | undefined): boolean;
}

/**
 * OmnichannelArchiveCampaignEvent - whenever a campaign is archived
 *
 * @generated from message api.commons.audit.OmnichannelArchiveCampaignEvent
 */
export declare class OmnichannelArchiveCampaignEvent extends Message<OmnichannelArchiveCampaignEvent> {
  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 1;
   */
  campaignSid: bigint;

  /**
   * campaign name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * campaign description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * campaign type
   *
   * @generated from field: api.commons.ChannelType channel_type = 4;
   */
  channelType: ChannelType;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 5;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelArchiveCampaignEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelArchiveCampaignEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelArchiveCampaignEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelArchiveCampaignEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelArchiveCampaignEvent;

  static equals(a: OmnichannelArchiveCampaignEvent | PlainMessage<OmnichannelArchiveCampaignEvent> | undefined, b: OmnichannelArchiveCampaignEvent | PlainMessage<OmnichannelArchiveCampaignEvent> | undefined): boolean;
}

/**
 * OmnichannelStartCampaignEvent - whenever a campaign is completed
 *
 * @generated from message api.commons.audit.OmnichannelStartCampaignEvent
 */
export declare class OmnichannelStartCampaignEvent extends Message<OmnichannelStartCampaignEvent> {
  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 1;
   */
  campaignSid: bigint;

  /**
   * campaign name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * campaign description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * campaign type
   *
   * @generated from field: api.commons.ChannelType channel_type = 4;
   */
  channelType: ChannelType;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 5;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelStartCampaignEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelStartCampaignEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelStartCampaignEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelStartCampaignEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelStartCampaignEvent;

  static equals(a: OmnichannelStartCampaignEvent | PlainMessage<OmnichannelStartCampaignEvent> | undefined, b: OmnichannelStartCampaignEvent | PlainMessage<OmnichannelStartCampaignEvent> | undefined): boolean;
}

/**
 * OmnichannelPauseCampaignEvent - whenever a campaign is paused
 *
 * @generated from message api.commons.audit.OmnichannelPauseCampaignEvent
 */
export declare class OmnichannelPauseCampaignEvent extends Message<OmnichannelPauseCampaignEvent> {
  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 1;
   */
  campaignSid: bigint;

  /**
   * campaign name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * campaign description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * campaign type
   *
   * @generated from field: api.commons.ChannelType channel_type = 4;
   */
  channelType: ChannelType;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 5;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelPauseCampaignEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelPauseCampaignEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelPauseCampaignEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelPauseCampaignEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelPauseCampaignEvent;

  static equals(a: OmnichannelPauseCampaignEvent | PlainMessage<OmnichannelPauseCampaignEvent> | undefined, b: OmnichannelPauseCampaignEvent | PlainMessage<OmnichannelPauseCampaignEvent> | undefined): boolean;
}

/**
 * OmnichannelResumeCampaignEvent - whenever a campaign is resumed
 *
 * @generated from message api.commons.audit.OmnichannelResumeCampaignEvent
 */
export declare class OmnichannelResumeCampaignEvent extends Message<OmnichannelResumeCampaignEvent> {
  /**
   * campaign id
   *
   * @generated from field: int64 campaign_sid = 1;
   */
  campaignSid: bigint;

  /**
   * campaign name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * campaign description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * campaign type
   *
   * @generated from field: api.commons.ChannelType channel_type = 4;
   */
  channelType: ChannelType;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 5;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelResumeCampaignEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelResumeCampaignEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelResumeCampaignEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelResumeCampaignEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelResumeCampaignEvent;

  static equals(a: OmnichannelResumeCampaignEvent | PlainMessage<OmnichannelResumeCampaignEvent> | undefined, b: OmnichannelResumeCampaignEvent | PlainMessage<OmnichannelResumeCampaignEvent> | undefined): boolean;
}

/**
 * OmnichannelScheduleModuleEvent - whenever a module is schedule status
 *
 * @generated from message api.commons.audit.OmnichannelScheduleModuleEvent
 */
export declare class OmnichannelScheduleModuleEvent extends Message<OmnichannelScheduleModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelScheduleModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelScheduleModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelScheduleModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelScheduleModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelScheduleModuleEvent;

  static equals(a: OmnichannelScheduleModuleEvent | PlainMessage<OmnichannelScheduleModuleEvent> | undefined, b: OmnichannelScheduleModuleEvent | PlainMessage<OmnichannelScheduleModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelStartModuleEvent - whenever a module is start status
 *
 * @generated from message api.commons.audit.OmnichannelStartModuleEvent
 */
export declare class OmnichannelStartModuleEvent extends Message<OmnichannelStartModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelStartModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelStartModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelStartModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelStartModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelStartModuleEvent;

  static equals(a: OmnichannelStartModuleEvent | PlainMessage<OmnichannelStartModuleEvent> | undefined, b: OmnichannelStartModuleEvent | PlainMessage<OmnichannelStartModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelPauseModuleEvent - whenever a module is pause status
 *
 * @generated from message api.commons.audit.OmnichannelPauseModuleEvent
 */
export declare class OmnichannelPauseModuleEvent extends Message<OmnichannelPauseModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelPauseModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelPauseModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelPauseModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelPauseModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelPauseModuleEvent;

  static equals(a: OmnichannelPauseModuleEvent | PlainMessage<OmnichannelPauseModuleEvent> | undefined, b: OmnichannelPauseModuleEvent | PlainMessage<OmnichannelPauseModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelResumeModuleEvent - whenever a module is resume status
 *
 * @generated from message api.commons.audit.OmnichannelResumeModuleEvent
 */
export declare class OmnichannelResumeModuleEvent extends Message<OmnichannelResumeModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelResumeModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelResumeModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelResumeModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelResumeModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelResumeModuleEvent;

  static equals(a: OmnichannelResumeModuleEvent | PlainMessage<OmnichannelResumeModuleEvent> | undefined, b: OmnichannelResumeModuleEvent | PlainMessage<OmnichannelResumeModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelErrorModuleEvent - whenever a module is error status
 *
 * @generated from message api.commons.audit.OmnichannelErrorModuleEvent
 */
export declare class OmnichannelErrorModuleEvent extends Message<OmnichannelErrorModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelErrorModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelErrorModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelErrorModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelErrorModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelErrorModuleEvent;

  static equals(a: OmnichannelErrorModuleEvent | PlainMessage<OmnichannelErrorModuleEvent> | undefined, b: OmnichannelErrorModuleEvent | PlainMessage<OmnichannelErrorModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelSuccessModuleEvent - whenever a module is success status
 *
 * @generated from message api.commons.audit.OmnichannelSuccessModuleEvent
 */
export declare class OmnichannelSuccessModuleEvent extends Message<OmnichannelSuccessModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelSuccessModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelSuccessModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelSuccessModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelSuccessModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelSuccessModuleEvent;

  static equals(a: OmnichannelSuccessModuleEvent | PlainMessage<OmnichannelSuccessModuleEvent> | undefined, b: OmnichannelSuccessModuleEvent | PlainMessage<OmnichannelSuccessModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelFailModuleEvent - whenever a module is fail status
 *
 * @generated from message api.commons.audit.OmnichannelFailModuleEvent
 */
export declare class OmnichannelFailModuleEvent extends Message<OmnichannelFailModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelFailModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelFailModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelFailModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelFailModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelFailModuleEvent;

  static equals(a: OmnichannelFailModuleEvent | PlainMessage<OmnichannelFailModuleEvent> | undefined, b: OmnichannelFailModuleEvent | PlainMessage<OmnichannelFailModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelCompleteModuleEvent - whenever a module is complete status
 *
 * @generated from message api.commons.audit.OmnichannelCompleteModuleEvent
 */
export declare class OmnichannelCompleteModuleEvent extends Message<OmnichannelCompleteModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelCompleteModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelCompleteModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelCompleteModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelCompleteModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelCompleteModuleEvent;

  static equals(a: OmnichannelCompleteModuleEvent | PlainMessage<OmnichannelCompleteModuleEvent> | undefined, b: OmnichannelCompleteModuleEvent | PlainMessage<OmnichannelCompleteModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelArchiveModuleEvent - whenever a module is archive status
 *
 * @generated from message api.commons.audit.OmnichannelArchiveModuleEvent
 */
export declare class OmnichannelArchiveModuleEvent extends Message<OmnichannelArchiveModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelArchiveModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelArchiveModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelArchiveModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelArchiveModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelArchiveModuleEvent;

  static equals(a: OmnichannelArchiveModuleEvent | PlainMessage<OmnichannelArchiveModuleEvent> | undefined, b: OmnichannelArchiveModuleEvent | PlainMessage<OmnichannelArchiveModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelUpdateModuleEvent - whenever a module is update status
 *
 * @generated from message api.commons.audit.OmnichannelUpdateModuleEvent
 */
export declare class OmnichannelUpdateModuleEvent extends Message<OmnichannelUpdateModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 2;
   */
  omniCampaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelUpdateModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelUpdateModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelUpdateModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelUpdateModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelUpdateModuleEvent;

  static equals(a: OmnichannelUpdateModuleEvent | PlainMessage<OmnichannelUpdateModuleEvent> | undefined, b: OmnichannelUpdateModuleEvent | PlainMessage<OmnichannelUpdateModuleEvent> | undefined): boolean;
}

/**
 * OmnichannelAddSmsMessageSentAuditEvent - handle omnimessage and messageunits
 *
 * @generated from message api.commons.audit.OmnichannelSmsMessageSentModuleEvent
 */
export declare class OmnichannelSmsMessageSentModuleEvent extends Message<OmnichannelSmsMessageSentModuleEvent> {
  /**
   * module id
   *
   * @generated from field: int64 module_sid = 1;
   */
  moduleSid: bigint;

  /**
   * messageunits
   *
   * @generated from field: int64 message_units = 2;
   */
  messageUnits: bigint;

  /**
   * omni campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 3;
   */
  omniCampaign?: OmniCampaign;

  /**
   * the message sent by the agent
   *
   * @generated from field: api.commons.OmniMessage message = 4;
   */
  message?: OmniMessage;

  constructor(data?: PartialMessage<OmnichannelSmsMessageSentModuleEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelSmsMessageSentModuleEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelSmsMessageSentModuleEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelSmsMessageSentModuleEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelSmsMessageSentModuleEvent;

  static equals(a: OmnichannelSmsMessageSentModuleEvent | PlainMessage<OmnichannelSmsMessageSentModuleEvent> | undefined, b: OmnichannelSmsMessageSentModuleEvent | PlainMessage<OmnichannelSmsMessageSentModuleEvent> | undefined): boolean;
}

/**
 * OmniChannelModuleInitialReplyEvent -
 *
 * @generated from message api.commons.audit.OmnichannelModuleInitialReplyEvent
 */
export declare class OmnichannelModuleInitialReplyEvent extends Message<OmnichannelModuleInitialReplyEvent> {
  /**
   * org id
   *
   * @generated from field: string org_id = 1;
   */
  orgId: string;

  /**
   * campaign_sid
   *
   * @generated from field: int64 campaign_sid = 2;
   */
  campaignSid: bigint;

  /**
   * campaign_module_sid
   *
   * @generated from field: int64 campaign_module_sid = 3;
   */
  campaignModuleSid: bigint;

  /**
   * conversation_sid
   *
   * @generated from field: int64 conversation_sid = 4;
   */
  conversationSid: bigint;

  /**
   * channel type
   *
   * @generated from field: api.commons.ChannelType channel_type = 5;
   */
  channelType: ChannelType;

  /**
   * omnimessage
   *
   * @generated from field: api.commons.OmniMessage message = 6;
   */
  message?: OmniMessage;

  /**
   * omnicampaign
   *
   * @generated from field: api.commons.OmniCampaign campaign = 7;
   */
  campaign?: OmniCampaign;

  constructor(data?: PartialMessage<OmnichannelModuleInitialReplyEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelModuleInitialReplyEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelModuleInitialReplyEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelModuleInitialReplyEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelModuleInitialReplyEvent;

  static equals(a: OmnichannelModuleInitialReplyEvent | PlainMessage<OmnichannelModuleInitialReplyEvent> | undefined, b: OmnichannelModuleInitialReplyEvent | PlainMessage<OmnichannelModuleInitialReplyEvent> | undefined): boolean;
}

/**
 * OmnichannelTaskMessageSentEvent -
 *
 * @generated from message api.commons.audit.OmnichannelTaskMessageSentEvent
 */
export declare class OmnichannelTaskMessageSentEvent extends Message<OmnichannelTaskMessageSentEvent> {
  /**
   * task identifier
   *
   * @generated from field: int64 task_sid = 1;
   */
  taskSid: bigint;

  /**
   * campaign identifier
   *
   * @generated from field: int64 campaign_sid = 2;
   */
  campaignSid: bigint;

  /**
   * module identifier
   *
   * @generated from field: int64 module_sid = 3;
   */
  moduleSid: bigint;

  /**
   * the number of individual messages sent out
   *
   * @generated from field: int64 message_units = 4;
   */
  messageUnits: bigint;

  /**
   * the campaign the task is a part of
   *
   * @generated from field: api.commons.OmniCampaign campaign = 5;
   */
  campaign?: OmniCampaign;

  /**
   * the message sent
   *
   * @generated from field: api.commons.OmniMessage message = 6;
   */
  message?: OmniMessage;

  /**
   * the task that sent the message
   *
   * @generated from field: api.commons.OmniTask task = 7;
   */
  task?: OmniTask;

  constructor(data?: PartialMessage<OmnichannelTaskMessageSentEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelTaskMessageSentEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelTaskMessageSentEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelTaskMessageSentEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelTaskMessageSentEvent;

  static equals(a: OmnichannelTaskMessageSentEvent | PlainMessage<OmnichannelTaskMessageSentEvent> | undefined, b: OmnichannelTaskMessageSentEvent | PlainMessage<OmnichannelTaskMessageSentEvent> | undefined): boolean;
}

/**
 * OmnichannelConnectedInboxPollEvent -
 *
 * @generated from message api.commons.audit.OmnichannelConnectedInboxPollEvent
 */
export declare class OmnichannelConnectedInboxPollEvent extends Message<OmnichannelConnectedInboxPollEvent> {
  /**
   * campaign
   *
   * @generated from field: api.commons.OmniCampaign omni_campaign = 1;
   */
  omniCampaign?: OmniCampaign;

  /**
   * campaign_module_sid
   *
   * @generated from field: int64 campaign_module_sid = 2;
   */
  campaignModuleSid: bigint;

  /**
   * connected inbox
   *
   * @generated from field: api.commons.ConnectedInbox connected_inbox = 3;
   */
  connectedInbox?: ConnectedInbox;

  constructor(data?: PartialMessage<OmnichannelConnectedInboxPollEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelConnectedInboxPollEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelConnectedInboxPollEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelConnectedInboxPollEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelConnectedInboxPollEvent;

  static equals(a: OmnichannelConnectedInboxPollEvent | PlainMessage<OmnichannelConnectedInboxPollEvent> | undefined, b: OmnichannelConnectedInboxPollEvent | PlainMessage<OmnichannelConnectedInboxPollEvent> | undefined): boolean;
}

/**
 * OmnichannelConnectedInboxCreatedEvent -
 *
 * @generated from message api.commons.audit.OmnichannelConnectedInboxCreatedEvent
 */
export declare class OmnichannelConnectedInboxCreatedEvent extends Message<OmnichannelConnectedInboxCreatedEvent> {
  /**
   * the created connected inbox
   *
   * @generated from field: api.commons.ConnectedInbox connected_inbox = 1;
   */
  connectedInbox?: ConnectedInbox;

  constructor(data?: PartialMessage<OmnichannelConnectedInboxCreatedEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelConnectedInboxCreatedEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelConnectedInboxCreatedEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelConnectedInboxCreatedEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelConnectedInboxCreatedEvent;

  static equals(a: OmnichannelConnectedInboxCreatedEvent | PlainMessage<OmnichannelConnectedInboxCreatedEvent> | undefined, b: OmnichannelConnectedInboxCreatedEvent | PlainMessage<OmnichannelConnectedInboxCreatedEvent> | undefined): boolean;
}

/**
 * Omnichannel
 *
 * @generated from message api.commons.audit.OmnichannelAgentMessageUnitsEvent
 */
export declare class OmnichannelAgentMessageUnitsEvent extends Message<OmnichannelAgentMessageUnitsEvent> {
  /**
   * the omni message
   *
   * @generated from field: api.commons.OmniMessage message = 1;
   */
  message?: OmniMessage;

  /**
   * the total number of messages sent
   *
   * @generated from field: int32 message_units = 2;
   */
  messageUnits: number;

  constructor(data?: PartialMessage<OmnichannelAgentMessageUnitsEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelAgentMessageUnitsEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelAgentMessageUnitsEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelAgentMessageUnitsEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelAgentMessageUnitsEvent;

  static equals(a: OmnichannelAgentMessageUnitsEvent | PlainMessage<OmnichannelAgentMessageUnitsEvent> | undefined, b: OmnichannelAgentMessageUnitsEvent | PlainMessage<OmnichannelAgentMessageUnitsEvent> | undefined): boolean;
}

/**
 * OmniChannelManagerMessageUnitsEvent -
 *
 * @generated from message api.commons.audit.OmnichannelManagerMessageUnitsEvent
 */
export declare class OmnichannelManagerMessageUnitsEvent extends Message<OmnichannelManagerMessageUnitsEvent> {
  /**
   * the omni message
   *
   * @generated from field: api.commons.OmniMessage message = 1;
   */
  message?: OmniMessage;

  /**
   * the total number of messages sent
   *
   * @generated from field: int32 message_units = 2;
   */
  messageUnits: number;

  constructor(data?: PartialMessage<OmnichannelManagerMessageUnitsEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelManagerMessageUnitsEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelManagerMessageUnitsEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelManagerMessageUnitsEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelManagerMessageUnitsEvent;

  static equals(a: OmnichannelManagerMessageUnitsEvent | PlainMessage<OmnichannelManagerMessageUnitsEvent> | undefined, b: OmnichannelManagerMessageUnitsEvent | PlainMessage<OmnichannelManagerMessageUnitsEvent> | undefined): boolean;
}

/**
 * OmniChannelCustomerMessageUnitsEvent -
 *
 * @generated from message api.commons.audit.OmnichannelCustomerMessageUnitsEvent
 */
export declare class OmnichannelCustomerMessageUnitsEvent extends Message<OmnichannelCustomerMessageUnitsEvent> {
  /**
   * the omni message
   *
   * @generated from field: api.commons.OmniMessage message = 1;
   */
  message?: OmniMessage;

  /**
   * the total number of messages sent
   *
   * @generated from field: int32 message_units = 2;
   */
  messageUnits: number;

  constructor(data?: PartialMessage<OmnichannelCustomerMessageUnitsEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelCustomerMessageUnitsEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelCustomerMessageUnitsEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelCustomerMessageUnitsEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelCustomerMessageUnitsEvent;

  static equals(a: OmnichannelCustomerMessageUnitsEvent | PlainMessage<OmnichannelCustomerMessageUnitsEvent> | undefined, b: OmnichannelCustomerMessageUnitsEvent | PlainMessage<OmnichannelCustomerMessageUnitsEvent> | undefined): boolean;
}

/**
 * OmnichannelSystemMessageUnitsEvent -
 *
 * @generated from message api.commons.audit.OmnichannelSystemMessageUnitsEvent
 */
export declare class OmnichannelSystemMessageUnitsEvent extends Message<OmnichannelSystemMessageUnitsEvent> {
  /**
   * the omni message
   *
   * @generated from field: api.commons.OmniMessage message = 1;
   */
  message?: OmniMessage;

  /**
   * the total number of messages sent
   *
   * @generated from field: int32 message_units = 2;
   */
  messageUnits: number;

  constructor(data?: PartialMessage<OmnichannelSystemMessageUnitsEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelSystemMessageUnitsEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelSystemMessageUnitsEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelSystemMessageUnitsEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelSystemMessageUnitsEvent;

  static equals(a: OmnichannelSystemMessageUnitsEvent | PlainMessage<OmnichannelSystemMessageUnitsEvent> | undefined, b: OmnichannelSystemMessageUnitsEvent | PlainMessage<OmnichannelSystemMessageUnitsEvent> | undefined): boolean;
}

/**
 * OmniChannelAgentMessageSentEvent -
 *
 * @generated from message api.commons.audit.OmnichannelPaymentLinkSentEvent
 */
export declare class OmnichannelPaymentLinkSentEvent extends Message<OmnichannelPaymentLinkSentEvent> {
  /**
   * the message sent
   *
   * @generated from field: api.commons.OmniMessage message = 1;
   */
  message?: OmniMessage;

  /**
   * the payment link
   *
   * @generated from field: string link = 2;
   */
  link: string;

  constructor(data?: PartialMessage<OmnichannelPaymentLinkSentEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.audit.OmnichannelPaymentLinkSentEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OmnichannelPaymentLinkSentEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OmnichannelPaymentLinkSentEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OmnichannelPaymentLinkSentEvent;

  static equals(a: OmnichannelPaymentLinkSentEvent | PlainMessage<OmnichannelPaymentLinkSentEvent> | undefined, b: OmnichannelPaymentLinkSentEvent | PlainMessage<OmnichannelPaymentLinkSentEvent> | undefined): boolean;
}

