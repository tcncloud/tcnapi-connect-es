// @generated by protoc-gen-es v1.2.0 with parameter "target=js+dts"
// @generated from file api/commons/audit/omnichannel_events.proto (package api.commons.audit, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Int64Value, proto3 } from "@bufbuild/protobuf";
import { CampaignDirection, ChannelType, ConnectedInbox, ConversationCollectedData, OmniCampaign, OmniConversation, OmniMessage, OmniTask } from "../omnichannel_pb.js";

/**
 * OmnichannelCreateProjectEvent - whenever a project is created
 *
 * @generated from message api.commons.audit.OmnichannelCreateProjectEvent
 */
export const OmnichannelCreateProjectEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelCreateProjectEvent",
  () => [
    { no: 1, name: "client_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OmnichannelCreateCampaignEvent - whenever a campaign is created
 *
 * @generated from message api.commons.audit.OmnichannelCreateCampaignEvent
 */
export const OmnichannelCreateCampaignEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelCreateCampaignEvent",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 4, name: "campaign_direction", kind: "enum", T: proto3.getEnumType(CampaignDirection) },
    { no: 5, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "omni_campaign", kind: "message", T: OmniCampaign },
    { no: 7, name: "project_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * OmnichannelT10Event - whenever a T10 is triggered
 *
 * @generated from message api.commons.audit.OmnichannelT10Event
 */
export const OmnichannelT10Event = proto3.makeMessageType(
  "api.commons.audit.OmnichannelT10Event",
  () => [
    { no: 1, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 4, name: "conversation", kind: "message", T: OmniConversation },
    { no: 5, name: "message", kind: "message", T: OmniMessage },
  ],
);

/**
 * OmnichannelDailyReportEvent - whenever a daily project report is generated
 *
 * @generated from message api.commons.audit.OmnichannelDailyProjectReportEvent
 */
export const OmnichannelDailyProjectReportEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelDailyProjectReportEvent",
  () => [
    { no: 1, name: "download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OmnichannelDailyReportEvent - whenever a daily conversation report is generated
 *
 * @generated from message api.commons.audit.OmnichannelDailyConversationReportEvent
 */
export const OmnichannelDailyConversationReportEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelDailyConversationReportEvent",
  () => [
    { no: 1, name: "download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OmnichannelAgentAssignConversationEvent - handle agent assign conversation event
 *
 * @generated from message api.commons.audit.OmnichannelAgentAssignConversationEvent
 */
export const OmnichannelAgentAssignConversationEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelAgentAssignConversationEvent",
  () => [
    { no: 1, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "conversation", kind: "message", T: OmniConversation },
    { no: 6, name: "message", kind: "message", T: OmniMessage },
  ],
);

/**
 * OmnichannelAgentUnassignConversationEvent - handle agent unassign conversation event
 *
 * @generated from message api.commons.audit.OmnichannelAgentUnassignConversationEvent
 */
export const OmnichannelAgentUnassignConversationEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelAgentUnassignConversationEvent",
  () => [
    { no: 1, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "conversation", kind: "message", T: OmniConversation },
    { no: 6, name: "message", kind: "message", T: OmniMessage },
  ],
);

/**
 * OmnichannelAgentReassignConversationEvent - handle agent reassign conversation event
 *
 * @generated from message api.commons.audit.OmnichannelAgentReassignConversationEvent
 */
export const OmnichannelAgentReassignConversationEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelAgentReassignConversationEvent",
  () => [
    { no: 1, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "current_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "new_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "conversation", kind: "message", T: OmniConversation },
    { no: 8, name: "message", kind: "message", T: OmniMessage },
    { no: 9, name: "new_user_asm_session_sid", kind: "message", T: Int64Value },
  ],
);

/**
 * OmnichannelCustomerTextMessageEvent - whenever a customer sends a text message
 *
 * @generated from message api.commons.audit.OmnichannelCustomerTextMessageEvent
 */
export const OmnichannelCustomerTextMessageEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelCustomerTextMessageEvent",
  () => [
    { no: 3, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "message", kind: "message", T: OmniMessage },
    { no: 5, name: "conversation", kind: "message", T: OmniConversation },
  ],
);

/**
 * OmnichannelAgentTextMessageEvent - whenever an agent send a text message
 *
 * @generated from message api.commons.audit.OmnichannelAgentTextMessageEvent
 */
export const OmnichannelAgentTextMessageEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelAgentTextMessageEvent",
  () => [
    { no: 3, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "message", kind: "message", T: OmniMessage },
    { no: 5, name: "conversation", kind: "message", T: OmniConversation },
  ],
);

/**
 * OmnichannelManagerTextMessageEvent - whenever an agent send a text message
 *
 * @generated from message api.commons.audit.OmnichannelManagerTextMessageEvent
 */
export const OmnichannelManagerTextMessageEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelManagerTextMessageEvent",
  () => [
    { no: 3, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "message", kind: "message", T: OmniMessage },
    { no: 5, name: "conversation", kind: "message", T: OmniConversation },
  ],
);

/**
 * OmnichannelFinishWrapUpEvent - when an agent has finished wrap up
 *
 * @generated from message api.commons.audit.OmnichannelFinishWrapUpEvent
 */
export const OmnichannelFinishWrapUpEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelFinishWrapUpEvent",
  () => [
    { no: 1, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 4, name: "conversation", kind: "message", T: OmniConversation },
    { no: 5, name: "message", kind: "message", T: OmniMessage },
    { no: 6, name: "asm_session_sid", kind: "message", T: Int64Value },
  ],
);

/**
 * OmnichannelBeginWrapUpEvent - when a conversation closes and moves to wrap up
 *
 * @generated from message api.commons.audit.OmnichannelBeginWrapUpEvent
 */
export const OmnichannelBeginWrapUpEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelBeginWrapUpEvent",
  () => [
    { no: 1, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 4, name: "conversation", kind: "message", T: OmniConversation },
    { no: 5, name: "message", kind: "message", T: OmniMessage },
  ],
);

/**
 * OmnichannelT11Event - whenever the t11 timer went off
 *
 * @generated from message api.commons.audit.OmnichannelT11Event
 */
export const OmnichannelT11Event = proto3.makeMessageType(
  "api.commons.audit.OmnichannelT11Event",
  () => [
    { no: 1, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 4, name: "conversation", kind: "message", T: OmniConversation },
  ],
);

/**
 * // create conversation when customer sends initial message and T1 starts
 *
 * @generated from message api.commons.audit.OmnichannelCreateConversationEvent
 */
export const OmnichannelCreateConversationEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelCreateConversationEvent",
  () => [
    { no: 1, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 3, name: "conversation", kind: "message", T: OmniConversation },
    { no: 4, name: "message", kind: "message", T: OmniMessage },
  ],
);

/**
 * OmnichannelAgentSuspendEvent - whenever agent suspends the conversation
 *
 * @generated from message api.commons.audit.OmnichannelAgentSuspendEvent
 */
export const OmnichannelAgentSuspendEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelAgentSuspendEvent",
  () => [
    { no: 1, name: "message", kind: "message", T: OmniMessage },
    { no: 2, name: "conversation", kind: "message", T: OmniConversation },
    { no: 3, name: "asm_session_sid", kind: "message", T: Int64Value },
  ],
);

/**
 * OmnichannelCloseConversationEvent - close conversation
 *
 * @generated from message api.commons.audit.OmnichannelCloseConversationEvent
 */
export const OmnichannelCloseConversationEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelCloseConversationEvent",
  () => [
    { no: 1, name: "message", kind: "message", T: OmniMessage },
    { no: 2, name: "conversation", kind: "message", T: OmniConversation },
  ],
);

/**
 * OmnichannelUpdateCampaignEvent - whenever a campaign is update
 *
 * @generated from message api.commons.audit.OmnichannelUpdateCampaignEvent
 */
export const OmnichannelUpdateCampaignEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelUpdateCampaignEvent",
  () => [
    { no: 1, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 5, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelSetConversationCollectedDataEvent - handle set conversation collected data event
 *
 * @generated from message api.commons.audit.OmnichannelSetConversationCollectedDataEvent
 */
export const OmnichannelSetConversationCollectedDataEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelSetConversationCollectedDataEvent",
  () => [
    { no: 1, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 4, name: "campaign_direction", kind: "enum", T: proto3.getEnumType(CampaignDirection) },
    { no: 5, name: "collected_data", kind: "message", T: ConversationCollectedData },
  ],
);

/**
 * OmnichannelCompleteCampaignEvent - whenever a campaign is completed
 *
 * @generated from message api.commons.audit.OmnichannelCompleteCampaignEvent
 */
export const OmnichannelCompleteCampaignEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelCompleteCampaignEvent",
  () => [
    { no: 1, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 5, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelArchiveCampaignEvent - whenever a campaign is archived
 *
 * @generated from message api.commons.audit.OmnichannelArchiveCampaignEvent
 */
export const OmnichannelArchiveCampaignEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelArchiveCampaignEvent",
  () => [
    { no: 1, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 5, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelStartCampaignEvent - whenever a campaign is completed
 *
 * @generated from message api.commons.audit.OmnichannelStartCampaignEvent
 */
export const OmnichannelStartCampaignEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelStartCampaignEvent",
  () => [
    { no: 1, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 5, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelPauseCampaignEvent - whenever a campaign is paused
 *
 * @generated from message api.commons.audit.OmnichannelPauseCampaignEvent
 */
export const OmnichannelPauseCampaignEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelPauseCampaignEvent",
  () => [
    { no: 1, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 5, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelResumeCampaignEvent - whenever a campaign is resumed
 *
 * @generated from message api.commons.audit.OmnichannelResumeCampaignEvent
 */
export const OmnichannelResumeCampaignEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelResumeCampaignEvent",
  () => [
    { no: 1, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 5, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelScheduleModuleEvent - whenever a module is schedule status
 *
 * @generated from message api.commons.audit.OmnichannelScheduleModuleEvent
 */
export const OmnichannelScheduleModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelScheduleModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelStartModuleEvent - whenever a module is start status
 *
 * @generated from message api.commons.audit.OmnichannelStartModuleEvent
 */
export const OmnichannelStartModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelStartModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelPauseModuleEvent - whenever a module is pause status
 *
 * @generated from message api.commons.audit.OmnichannelPauseModuleEvent
 */
export const OmnichannelPauseModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelPauseModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelResumeModuleEvent - whenever a module is resume status
 *
 * @generated from message api.commons.audit.OmnichannelResumeModuleEvent
 */
export const OmnichannelResumeModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelResumeModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelErrorModuleEvent - whenever a module is error status
 *
 * @generated from message api.commons.audit.OmnichannelErrorModuleEvent
 */
export const OmnichannelErrorModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelErrorModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelSuccessModuleEvent - whenever a module is success status
 *
 * @generated from message api.commons.audit.OmnichannelSuccessModuleEvent
 */
export const OmnichannelSuccessModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelSuccessModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelFailModuleEvent - whenever a module is fail status
 *
 * @generated from message api.commons.audit.OmnichannelFailModuleEvent
 */
export const OmnichannelFailModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelFailModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelCompleteModuleEvent - whenever a module is complete status
 *
 * @generated from message api.commons.audit.OmnichannelCompleteModuleEvent
 */
export const OmnichannelCompleteModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelCompleteModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelArchiveModuleEvent - whenever a module is archive status
 *
 * @generated from message api.commons.audit.OmnichannelArchiveModuleEvent
 */
export const OmnichannelArchiveModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelArchiveModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelUpdateModuleEvent - whenever a module is update status
 *
 * @generated from message api.commons.audit.OmnichannelUpdateModuleEvent
 */
export const OmnichannelUpdateModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelUpdateModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "omni_campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelAddSmsMessageSentAuditEvent - handle omnimessage and messageunits
 *
 * @generated from message api.commons.audit.OmnichannelSmsMessageSentModuleEvent
 */
export const OmnichannelSmsMessageSentModuleEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelSmsMessageSentModuleEvent",
  () => [
    { no: 1, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "message_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "omni_campaign", kind: "message", T: OmniCampaign },
    { no: 4, name: "message", kind: "message", T: OmniMessage },
  ],
);

/**
 * OmniChannelModuleInitialReplyEvent -
 *
 * @generated from message api.commons.audit.OmnichannelModuleInitialReplyEvent
 */
export const OmnichannelModuleInitialReplyEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelModuleInitialReplyEvent",
  () => [
    { no: 1, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "campaign_module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "channel_type", kind: "enum", T: proto3.getEnumType(ChannelType) },
    { no: 6, name: "message", kind: "message", T: OmniMessage },
    { no: 7, name: "campaign", kind: "message", T: OmniCampaign },
  ],
);

/**
 * OmnichannelTaskMessageSentEvent -
 *
 * @generated from message api.commons.audit.OmnichannelTaskMessageSentEvent
 */
export const OmnichannelTaskMessageSentEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelTaskMessageSentEvent",
  () => [
    { no: 1, name: "task_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "campaign_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "message_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "campaign", kind: "message", T: OmniCampaign },
    { no: 6, name: "message", kind: "message", T: OmniMessage },
    { no: 7, name: "task", kind: "message", T: OmniTask },
  ],
);

/**
 * OmnichannelConnectedInboxPollEvent -
 *
 * @generated from message api.commons.audit.OmnichannelConnectedInboxPollEvent
 */
export const OmnichannelConnectedInboxPollEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelConnectedInboxPollEvent",
  () => [
    { no: 1, name: "omni_campaign", kind: "message", T: OmniCampaign },
    { no: 2, name: "campaign_module_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "connected_inbox", kind: "message", T: ConnectedInbox },
  ],
);

/**
 * OmnichannelConnectedInboxCreatedEvent -
 *
 * @generated from message api.commons.audit.OmnichannelConnectedInboxCreatedEvent
 */
export const OmnichannelConnectedInboxCreatedEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelConnectedInboxCreatedEvent",
  () => [
    { no: 1, name: "connected_inbox", kind: "message", T: ConnectedInbox },
  ],
);

/**
 * Omnichannel
 *
 * @generated from message api.commons.audit.OmnichannelAgentMessageUnitsEvent
 */
export const OmnichannelAgentMessageUnitsEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelAgentMessageUnitsEvent",
  () => [
    { no: 1, name: "message", kind: "message", T: OmniMessage },
    { no: 2, name: "message_units", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * OmniChannelManagerMessageUnitsEvent -
 *
 * @generated from message api.commons.audit.OmnichannelManagerMessageUnitsEvent
 */
export const OmnichannelManagerMessageUnitsEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelManagerMessageUnitsEvent",
  () => [
    { no: 1, name: "message", kind: "message", T: OmniMessage },
    { no: 2, name: "message_units", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * OmniChannelCustomerMessageUnitsEvent -
 *
 * @generated from message api.commons.audit.OmnichannelCustomerMessageUnitsEvent
 */
export const OmnichannelCustomerMessageUnitsEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelCustomerMessageUnitsEvent",
  () => [
    { no: 1, name: "message", kind: "message", T: OmniMessage },
    { no: 2, name: "message_units", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * OmnichannelSystemMessageUnitsEvent -
 *
 * @generated from message api.commons.audit.OmnichannelSystemMessageUnitsEvent
 */
export const OmnichannelSystemMessageUnitsEvent = proto3.makeMessageType(
  "api.commons.audit.OmnichannelSystemMessageUnitsEvent",
  () => [
    { no: 1, name: "message", kind: "message", T: OmniMessage },
    { no: 2, name: "message_units", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

