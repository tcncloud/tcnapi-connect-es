// @generated by protoc-gen-es v1.2.0 with parameter "target=js+dts"
// @generated from file api/commons/scorecards.proto (package api.commons, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { CallType_Enum } from "./acd_pb.js";

/**
 * @generated from enum api.commons.CategoryType
 */
export declare enum CategoryType {
  /**
   * @generated from enum value: INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: SKILL_CALLS = 1;
   */
  SKILL_CALLS = 1,

  /**
   * @generated from enum value: MANUAL_DIAL = 2;
   */
  MANUAL_DIAL = 2,
}

/**
 * Evaluation is how a scorecard gets evaluated.
 * It is not a boolean because it might grow (i.e. MIXED).
 *
 * @generated from enum api.commons.EvaluationType
 */
export declare enum EvaluationType {
  /**
   * a person must fill out (score) the scorecard
   *
   * @generated from enum value: EVALUATE_MANUAL = 0;
   */
  EVALUATE_MANUAL = 0,

  /**
   * the system fills out (scores) the scorecard
   *
   * @generated from enum value: EVALUATE_AUTO = 1;
   */
  EVALUATE_AUTO = 1,
}

/**
 * ScoreType is how the score is calculated.
 * It is not a boolean because it might grow (i.e. OTHER).
 *
 * @generated from enum api.commons.ScoreType
 */
export declare enum ScoreType {
  /**
   * score is total awarded points / total possible points
   *
   * @generated from enum value: SCORE_SIMPLE_SUM = 0;
   */
  SCORE_SIMPLE_SUM = 0,

  /**
   * score is sum of each section (simple sum) * section weight
   *
   * @generated from enum value: SCORE_WEIGHTED_SUM = 1;
   */
  SCORE_WEIGHTED_SUM = 1,

  /**
   * weighted sum where weights are expected to be even (+/-1)
   *
   * @generated from enum value: SCORE_EVEN_WEIGHTED_SUM = 2;
   */
  SCORE_EVEN_WEIGHTED_SUM = 2,
}

/**
 * FailType is how affect the scoring of the scorecard.
 * Some answer options have points, which add to the score.
 * Other options have fail types which are applied, when chosen.
 *
 * @generated from enum api.commons.FailType
 */
export declare enum FailType {
  /**
   * default. fail the question
   *
   * @generated from enum value: FAIL_QUESTION = 0;
   */
  FAIL_QUESTION = 0,

  /**
   * fail the scorecard's section
   *
   * @generated from enum value: FAIL_SECTION = 1;
   */
  FAIL_SECTION = 1,

  /**
   * fail the entire scorecard
   *
   * @generated from enum value: FAIL_SCORECARD = 2;
   */
  FAIL_SCORECARD = 2,
}

/**
 * ScorecardState is state of the scorecard, which
 * determines if, or how, it can be used.
 *
 * @generated from enum api.commons.ScorecardState
 */
export declare enum ScorecardState {
  /**
   * Default. All scorecards start as draft.
   * User must change to not draft in order to use.
   *
   * @generated from enum value: SCORECARD_IS_DRAFT = 0;
   */
  SCORECARD_IS_DRAFT = 0,

  /**
   * Scorecard is no longer a draft, but has not been used.
   * Updates are allowed.
   *
   * @generated from enum value: SCORECARD_IS_READY = 1;
   */
  SCORECARD_IS_READY = 1,

  /**
   * Scorecard is in use and cannot be edited.
   * The system marks as in use on first use.
   * UI cannot update to, or from, this state.
   *
   * @generated from enum value: SCORECARD_IS_IN_USE = 2;
   */
  SCORECARD_IS_IN_USE = 2,

  /**
   * Scorecard is a template and is read-only.
   * Scorecards cannot be updated to, or from, this state.
   *
   * @generated from enum value: SCORECARD_IS_TEMPLATE = 3;
   */
  SCORECARD_IS_TEMPLATE = 3,

  /**
   * Scorecard is disabled and cannot be used for scoring.
   * Can only be reached from, or updated to, READY.
   *
   * @generated from enum value: SCORECARD_IS_READY_DISABLED = 4;
   */
  SCORECARD_IS_READY_DISABLED = 4,

  /**
   * Scorecard is disabled and cannot be used for scoring.
   * Can only be reached from, or updated to, IN_USE.
   *
   * @generated from enum value: SCORECARD_IS_IN_USE_DISABLED = 5;
   */
  SCORECARD_IS_IN_USE_DISABLED = 5,
}

/**
 * EvaluationState is enum to describe where the scorecard is in the state of the evaluation
 *
 * @generated from enum api.commons.EvaluationState
 */
export declare enum EvaluationState {
  /**
   * Default.  All evaluations will begin in progress.
   *
   * @generated from enum value: EVALUATION_IN_PROGRESS = 0;
   */
  EVALUATION_IN_PROGRESS = 0,

  /**
   * Evaluation is completed.
   * Agent passed the scorecard.
   *
   * @generated from enum value: EVALUATION_PASSED = 1;
   */
  EVALUATION_PASSED = 1,

  /**
   * Evaluation is completed.
   * Agent failed the scorecard.
   *
   * @generated from enum value: EVALUATION_FAILED = 2;
   */
  EVALUATION_FAILED = 2,
}

/**
 * RiskLevel is an assigned risk level in an evaluation.
 *
 * @generated from enum api.commons.RiskLevel
 */
export declare enum RiskLevel {
  /**
   * @generated from enum value: RISK_LEVEL_NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: RISK_LEVEL_LOW = 1;
   */
  LOW = 1,

  /**
   * @generated from enum value: RISK_LEVEL_MEDIUM = 2;
   */
  MEDIUM = 2,

  /**
   * @generated from enum value: RISK_LEVEL_HIGH = 3;
   */
  HIGH = 3,
}

/**
 * TimeFilter allows optional filtering by timestamp
 * Multple fields are ANDed together.
 *
 * @generated from message api.commons.TimeFilter
 */
export declare class TimeFilter extends Message<TimeFilter> {
  /**
   * must match timestamp exactly
   *
   * @generated from field: google.protobuf.Timestamp eq = 1;
   */
  eq?: Timestamp;

  /**
   * must be greater than or equal to timestamp
   *
   * @generated from field: google.protobuf.Timestamp gte = 2;
   */
  gte?: Timestamp;

  /**
   * must be less than or equal to timestamp
   *
   * @generated from field: google.protobuf.Timestamp lte = 3;
   */
  lte?: Timestamp;

  /**
   * must be greater than timestamp
   *
   * @generated from field: google.protobuf.Timestamp gt = 4;
   */
  gt?: Timestamp;

  /**
   * must be less than timestamp
   *
   * @generated from field: google.protobuf.Timestamp lt = 5;
   */
  lt?: Timestamp;

  constructor(data?: PartialMessage<TimeFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.TimeFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeFilter;

  static equals(a: TimeFilter | PlainMessage<TimeFilter> | undefined, b: TimeFilter | PlainMessage<TimeFilter> | undefined): boolean;
}

/**
 * Category wraps a set of skills (or labels).
 * A scorecard can only be used to evaluate calls
 * with the same skill(s) as its category.
 *
 * @generated from message api.commons.Category
 */
export declare class Category extends Message<Category> {
  /**
   * unique id of the category
   *
   * @generated from field: int64 category_id = 1;
   */
  categoryId: bigint;

  /**
   * user who created the category
   *
   * @generated from field: string author_id = 3;
   */
  authorId: string;

  /**
   * title, or name, of the category
   *
   * @generated from field: string title = 4;
   */
  title: string;

  /**
   * description of category (i.e. purpose and use)
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * skill_profiles ids related to category
   *
   * @generated from field: repeated int64 skill_profiles = 6;
   */
  skillProfiles: bigint[];

  /**
   * current version of the category
   *
   * @generated from field: int32 version = 7;
   */
  version: number;

  /**
   * call types supported by the category
   *
   * @generated from field: repeated api.commons.CallType.Enum call_types = 10;
   */
  callTypes: CallType_Enum[];

  /**
   * whether a category is a system category (read only)
   *
   * @generated from field: bool is_system = 11;
   */
  isSystem: boolean;

  /**
   * Type of category, (skill calls or manual calls)
   *
   * @generated from field: api.commons.CategoryType category_type = 12;
   */
  categoryType: CategoryType;

  constructor(data?: PartialMessage<Category>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.Category";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Category;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Category;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Category;

  static equals(a: Category | PlainMessage<Category> | undefined, b: Category | PlainMessage<Category> | undefined): boolean;
}

/**
 * Evaluation represents a evaluated scorecard.
 * A Evaluation represents a single call and single agent that has been evaluated.
 *
 * @generated from message api.commons.Evaluation
 */
export declare class Evaluation extends Message<Evaluation> {
  /**
   * unique id of the evaluation scorecard
   *
   * @generated from field: int64 evaluation_id = 2;
   */
  evaluationId: bigint;

  /**
   * id of evaluated scorecard
   *
   * @generated from field: int64 scorecard_id = 3;
   */
  scorecardId: bigint;

  /**
   * user_id of person performing evaluation
   *
   * @generated from field: string scorer_id = 4;
   */
  scorerId: string;

  /**
   * sid of the call being evaluated
   *
   * @generated from field: int64 call_sid = 6;
   */
  callSid: bigint;

  /**
   * calculated score as percentage to two decimal places
   *
   * @generated from field: double score = 7;
   */
  score: number;

  /**
   * state of the current evaluation.
   *
   * @generated from field: api.commons.EvaluationState evaluation_state = 8;
   */
  evaluationState: EvaluationState;

  /**
   * @generated from field: repeated api.commons.EvaluationSection evaluation_sections = 9;
   */
  evaluationSections: EvaluationSection[];

  /**
   * time evaluation was completed
   *
   * @generated from field: google.protobuf.Timestamp completed_at = 10;
   */
  completedAt?: Timestamp;

  /**
   * user_id of the agent being evaluated
   *
   * @generated from field: string agent_user_id = 13;
   */
  agentUserId: string;

  /**
   * call type of call being evaluated
   *
   * @generated from field: api.commons.CallType.Enum call_type = 14;
   */
  callType: CallType_Enum;

  /**
   * optional - transcript sid associated with evaluation
   *
   * @generated from field: int64 transcript_sid = 15;
   */
  transcriptSid: bigint;

  /**
   * Custom key-value fields.
   *
   * @generated from field: repeated api.commons.Evaluation.CustomField custom_fields = 17;
   */
  customFields: Evaluation_CustomField[];

  constructor(data?: PartialMessage<Evaluation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.Evaluation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Evaluation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Evaluation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Evaluation;

  static equals(a: Evaluation | PlainMessage<Evaluation> | undefined, b: Evaluation | PlainMessage<Evaluation> | undefined): boolean;
}

/**
 * CustomField represents a custom key-value pair defined by users.
 *
 * @generated from message api.commons.Evaluation.CustomField
 */
export declare class Evaluation_CustomField extends Message<Evaluation_CustomField> {
  /**
   * Keys are defined on scorecard.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Each field MUST be populated on scoring.
   *
   * @generated from field: string field = 2;
   */
  field: string;

  constructor(data?: PartialMessage<Evaluation_CustomField>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.Evaluation.CustomField";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Evaluation_CustomField;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Evaluation_CustomField;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Evaluation_CustomField;

  static equals(a: Evaluation_CustomField | PlainMessage<Evaluation_CustomField> | undefined, b: Evaluation_CustomField | PlainMessage<Evaluation_CustomField> | undefined): boolean;
}

/**
 * EvaluationSection is collection of evaluation questions in a section
 *
 * @generated from message api.commons.EvaluationSection
 */
export declare class EvaluationSection extends Message<EvaluationSection> {
  /**
   * unique id of evaluation section
   *
   * @generated from field: int64 evaluation_section_id = 2;
   */
  evaluationSectionId: bigint;

  /**
   * unique id of evaluation
   *
   * @generated from field: int64 evaluation_id = 3;
   */
  evaluationId: bigint;

  /**
   * unique id of section
   *
   * @generated from field: int64 section_id = 4;
   */
  sectionId: bigint;

  /**
   * amount of points scored
   *
   * @generated from field: int32 points = 5;
   */
  points: number;

  /**
   * amount of points possible
   *
   * @generated from field: int32 possible_points = 6;
   */
  possiblePoints: number;

  /**
   * order number of evaluation section
   *
   * @generated from field: int32 sort_order = 7;
   */
  sortOrder: number;

  /**
   * time evaluation section was deleted at
   *
   * @generated from field: google.protobuf.Timestamp deleted_at = 8;
   */
  deletedAt?: Timestamp;

  /**
   * time evaluation section was created at
   *
   * @generated from field: google.protobuf.Timestamp created_at = 9;
   */
  createdAt?: Timestamp;

  /**
   * array of evaluation questions in a section
   *
   * @generated from field: repeated api.commons.EvaluationQuestion evaluation_questions = 10;
   */
  evaluationQuestions: EvaluationQuestion[];

  /**
   * array of auto evaluation questions in a section
   *
   * @generated from field: repeated api.commons.AutoEvaluationQuestion auto_evaluation_questions = 11;
   */
  autoEvaluationQuestions: AutoEvaluationQuestion[];

  constructor(data?: PartialMessage<EvaluationSection>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.EvaluationSection";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluationSection;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluationSection;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluationSection;

  static equals(a: EvaluationSection | PlainMessage<EvaluationSection> | undefined, b: EvaluationSection | PlainMessage<EvaluationSection> | undefined): boolean;
}

/**
 * EvaluationQuestion is a question in an evaluation
 *
 * @generated from message api.commons.EvaluationQuestion
 */
export declare class EvaluationQuestion extends Message<EvaluationQuestion> {
  /**
   * unique id of evaluation question
   *
   * @generated from field: int64 evaluation_question_id = 2;
   */
  evaluationQuestionId: bigint;

  /**
   * unique id of evaluation
   *
   * @generated from field: int64 evaluation_id = 3;
   */
  evaluationId: bigint;

  /**
   * unique id of scorecard question
   *
   * @generated from field: int64 scorecard_question_id = 4;
   */
  scorecardQuestionId: bigint;

  /**
   * if question was skipped
   *
   * @generated from field: bool skipped = 5;
   */
  skipped: boolean;

  /**
   * total points awarded to question
   *
   * @generated from field: int64 points = 6;
   */
  points: bigint;

  /**
   * answers selected
   *
   * @generated from field: repeated api.commons.EvaluationQuestion.Answer answers = 7;
   */
  answers: EvaluationQuestion_Answer[];

  /**
   * unique id of evaluation section
   *
   * @generated from field: int64 evaluation_section_id = 8;
   */
  evaluationSectionId: bigint;

  /**
   * comment on the evaluation question
   *
   * @generated from field: string comment = 9;
   */
  comment: string;

  /**
   * order number of evaluation question
   *
   * @generated from field: int32 sort_order = 10;
   */
  sortOrder: number;

  constructor(data?: PartialMessage<EvaluationQuestion>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.EvaluationQuestion";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluationQuestion;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluationQuestion;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluationQuestion;

  static equals(a: EvaluationQuestion | PlainMessage<EvaluationQuestion> | undefined, b: EvaluationQuestion | PlainMessage<EvaluationQuestion> | undefined): boolean;
}

/**
 * Answer represents an answer option of an evaluation question
 *
 * @generated from message api.commons.EvaluationQuestion.Answer
 */
export declare class EvaluationQuestion_Answer extends Message<EvaluationQuestion_Answer> {
  /**
   * answer option to display to the user
   *
   * @generated from field: string answer_option = 1;
   */
  answerOption: string;

  /**
   * two results are possible: award points or fail
   *
   * @generated from oneof api.commons.EvaluationQuestion.Answer.result
   */
  result: {
    /**
     * points to award if option selected
     *
     * @generated from field: uint32 points = 2;
     */
    value: number;
    case: "points";
  } | {
    /**
     * how to fail if option selected (e.g. fail section)
     *
     * @generated from field: api.commons.FailType fail_type = 3;
     */
    value: FailType;
    case: "failType";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<EvaluationQuestion_Answer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.EvaluationQuestion.Answer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluationQuestion_Answer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluationQuestion_Answer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluationQuestion_Answer;

  static equals(a: EvaluationQuestion_Answer | PlainMessage<EvaluationQuestion_Answer> | undefined, b: EvaluationQuestion_Answer | PlainMessage<EvaluationQuestion_Answer> | undefined): boolean;
}

/**
 * AutoEvaluation is an auto evaluation
 *
 * @generated from message api.commons.AutoEvaluation
 */
export declare class AutoEvaluation extends Message<AutoEvaluation> {
  /**
   * unique id of the auto evaluation
   *
   * @generated from field: int64 auto_evaluation_id = 2;
   */
  autoEvaluationId: bigint;

  /**
   * id of evaluated scorecard
   *
   * @generated from field: int64 scorecard_id = 3;
   */
  scorecardId: bigint;

  /**
   * sid of the call being evaluated
   *
   * @generated from field: int64 call_sid = 4;
   */
  callSid: bigint;

  /**
   * user_id of the agent being evaluated
   *
   * @generated from field: string agent_user_id = 5;
   */
  agentUserId: string;

  /**
   * @generated from field: repeated api.commons.AutoEvaluationSection auto_evaluation_sections = 6;
   */
  autoEvaluationSections: AutoEvaluationSection[];

  /**
   * time evaluation was completed
   *
   * @generated from field: google.protobuf.Timestamp completed_at = 7;
   */
  completedAt?: Timestamp;

  /**
   * time evaluation was deleted
   *
   * @generated from field: google.protobuf.Timestamp deleted_at = 8;
   */
  deletedAt?: Timestamp;

  /**
   * call type of call being evaluated
   *
   * @generated from field: api.commons.CallType.Enum call_type = 9;
   */
  callType: CallType_Enum;

  /**
   * optional - transcript sid associated with evaluation
   *
   * @generated from field: int64 transcript_sid = 10;
   */
  transcriptSid: bigint;

  /**
   * whether the expression was matched or not
   *
   * @generated from field: bool expression_matched = 11;
   */
  expressionMatched: boolean;

  /**
   * The risk level of the evaluation
   *
   * @generated from field: api.commons.RiskLevel risk_level = 12;
   */
  riskLevel: RiskLevel;

  constructor(data?: PartialMessage<AutoEvaluation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.AutoEvaluation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoEvaluation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoEvaluation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoEvaluation;

  static equals(a: AutoEvaluation | PlainMessage<AutoEvaluation> | undefined, b: AutoEvaluation | PlainMessage<AutoEvaluation> | undefined): boolean;
}

/**
 * AutoEvaluationQuestion is an auto question in an evaluation.
 *
 * @generated from message api.commons.AutoEvaluationQuestion
 */
export declare class AutoEvaluationQuestion extends Message<AutoEvaluationQuestion> {
  /**
   * unique id of auto evaluation question.
   *
   * @generated from field: int64 auto_evaluation_question_id = 2;
   */
  autoEvaluationQuestionId: bigint;

  /**
   * unique id of evaluation.
   *
   * @generated from field: int64 auto_evaluation_id = 3;
   */
  autoEvaluationId: bigint;

  /**
   * unique id of evaluation section.
   *
   * @generated from field: int64 auto_evaluation_section_id = 4;
   */
  autoEvaluationSectionId: bigint;

  /**
   * unique id of auto question.
   *
   * @generated from field: int64 auto_question_id = 5;
   */
  autoQuestionId: bigint;

  /**
   * a subset of flag sids found.
   *
   * @generated from field: repeated int64 flagged = 6;
   */
  flagged: bigint[];

  /**
   * whether the auto question evaluation was passed/failed.
   *
   * @generated from field: bool passed = 7;
   */
  passed: boolean;

  /**
   * order number of auto evaluation question.
   *
   * @generated from field: int32 sort_order = 8;
   */
  sortOrder: number;

  /**
   * The risk level of the evaluation question.
   *
   * @generated from field: api.commons.RiskLevel risk_level = 11;
   */
  riskLevel: RiskLevel;

  /**
   * Whether the flag expression matched.
   *
   * @generated from field: bool expression_matched = 14;
   */
  expressionMatched: boolean;

  constructor(data?: PartialMessage<AutoEvaluationQuestion>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.AutoEvaluationQuestion";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoEvaluationQuestion;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoEvaluationQuestion;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoEvaluationQuestion;

  static equals(a: AutoEvaluationQuestion | PlainMessage<AutoEvaluationQuestion> | undefined, b: AutoEvaluationQuestion | PlainMessage<AutoEvaluationQuestion> | undefined): boolean;
}

/**
 * AutoEvaluationSection is an auto Section in an evaluation.
 *
 * @generated from message api.commons.AutoEvaluationSection
 */
export declare class AutoEvaluationSection extends Message<AutoEvaluationSection> {
  /**
   * unique id of auto evaluation section
   *
   * @generated from field: int64 auto_evaluation_section_id = 2;
   */
  autoEvaluationSectionId: bigint;

  /**
   * unique id of auto evaluation
   *
   * @generated from field: int64 auto_evaluation_id = 3;
   */
  autoEvaluationId: bigint;

  /**
   * unique id of section
   *
   * @generated from field: int64 section_id = 4;
   */
  sectionId: bigint;

  /**
   * order number of evaluation section
   *
   * @generated from field: int32 sort_order = 5;
   */
  sortOrder: number;

  /**
   * time evaluation section was deleted at
   *
   * @generated from field: google.protobuf.Timestamp deleted_at = 6;
   */
  deletedAt?: Timestamp;

  /**
   * time evaluation section was created at
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * array of auto evaluation questions in a section
   *
   * @generated from field: repeated api.commons.AutoEvaluationQuestion auto_evaluation_questions = 8;
   */
  autoEvaluationQuestions: AutoEvaluationQuestion[];

  /**
   * The risk level of the evaluation section
   *
   * @generated from field: api.commons.RiskLevel risk_level = 9;
   */
  riskLevel: RiskLevel;

  constructor(data?: PartialMessage<AutoEvaluationSection>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.AutoEvaluationSection";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoEvaluationSection;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoEvaluationSection;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoEvaluationSection;

  static equals(a: AutoEvaluationSection | PlainMessage<AutoEvaluationSection> | undefined, b: AutoEvaluationSection | PlainMessage<AutoEvaluationSection> | undefined): boolean;
}

/**
 * Question is a question in the Question Library.
 * It is not to be confused with ScorecardQuestion, which represents
 * a question inside of a scorecard.
 *
 * @generated from message api.commons.Question
 */
export declare class Question extends Message<Question> {
  /**
   * unique question id
   *
   * @generated from field: int64 question_id = 2;
   */
  questionId: bigint;

  /**
   * the creator of the question
   *
   * @generated from field: string author_id = 3;
   */
  authorId: string;

  /**
   * the question to display
   *
   * @generated from field: string question = 4;
   */
  question: string;

  /**
   * extra info or context for the question
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * the categories associated with the question
   *
   * @generated from field: repeated api.commons.Category categories = 6;
   */
  categories: Category[];

  constructor(data?: PartialMessage<Question>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.Question";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Question;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Question;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Question;

  static equals(a: Question | PlainMessage<Question> | undefined, b: Question | PlainMessage<Question> | undefined): boolean;
}

/**
 * ScorecardQuestion represents a question inside of a scorecard.
 *
 * @generated from message api.commons.ScorecardQuestion
 */
export declare class ScorecardQuestion extends Message<ScorecardQuestion> {
  /**
   * unique id of the scorecard question
   *
   * @generated from field: int64 scorecard_question_id = 2;
   */
  scorecardQuestionId: bigint;

  /**
   * question to display
   *
   * @generated from field: string question = 3;
   */
  question: string;

  /**
   * optional; additional info about question
   *
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * optional; library question id
   *
   * @generated from field: int64 question_id = 5;
   */
  questionId: bigint;

  /**
   * question can be excluded from scoring (allow n/a)
   *
   * @generated from field: bool allow_skip = 6;
   */
  allowSkip: boolean;

  /**
   * the answer options with point values
   *
   * @generated from field: repeated api.commons.ScorecardQuestion.Answer answers = 7;
   */
  answers: ScorecardQuestion_Answer[];

  /**
   * single-select if nil; otherwise multiselect
   *
   * @generated from field: api.commons.ScorecardQuestion.MultiSelect multi_select = 8;
   */
  multiSelect?: ScorecardQuestion_MultiSelect;

  /**
   * question belongs to scorecard
   *
   * @generated from field: int64 scorecard_id = 9;
   */
  scorecardId: bigint;

  /**
   * question belongs to scorecard section
   *
   * @generated from field: int64 section_id = 10;
   */
  sectionId: bigint;

  /**
   * current version of scorecard question
   *
   * @generated from field: int32 version = 11;
   */
  version: number;

  /**
   * order number of scorecard question
   *
   * @generated from field: int32 sort_order = 12;
   */
  sortOrder: number;

  constructor(data?: PartialMessage<ScorecardQuestion>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.ScorecardQuestion";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScorecardQuestion;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScorecardQuestion;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScorecardQuestion;

  static equals(a: ScorecardQuestion | PlainMessage<ScorecardQuestion> | undefined, b: ScorecardQuestion | PlainMessage<ScorecardQuestion> | undefined): boolean;
}

/**
 * Answer are all the possible answers for a scorecard question.
 *
 * @generated from message api.commons.ScorecardQuestion.Answer
 */
export declare class ScorecardQuestion_Answer extends Message<ScorecardQuestion_Answer> {
  /**
   * answer option to display to the user
   *
   * @generated from field: string answer_option = 1;
   */
  answerOption: string;

  /**
   * two results are possible: award points or fail
   *
   * @generated from oneof api.commons.ScorecardQuestion.Answer.result
   */
  result: {
    /**
     * points to award if option selected
     *
     * @generated from field: uint32 points = 2;
     */
    value: number;
    case: "points";
  } | {
    /**
     * how to fail if option selected (e.g. fail section)
     *
     * @generated from field: api.commons.FailType fail_type = 3;
     */
    value: FailType;
    case: "failType";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ScorecardQuestion_Answer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.ScorecardQuestion.Answer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScorecardQuestion_Answer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScorecardQuestion_Answer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScorecardQuestion_Answer;

  static equals(a: ScorecardQuestion_Answer | PlainMessage<ScorecardQuestion_Answer> | undefined, b: ScorecardQuestion_Answer | PlainMessage<ScorecardQuestion_Answer> | undefined): boolean;
}

/**
 * MultiSelect sets parameters for multi-select answer types.
 *
 * @generated from message api.commons.ScorecardQuestion.MultiSelect
 */
export declare class ScorecardQuestion_MultiSelect extends Message<ScorecardQuestion_MultiSelect> {
  /**
   * Maximum points to award to the question.
   * If not set, maximum points is sum of all answer options.
   *
   * @generated from field: int64 max_points = 1;
   */
  maxPoints: bigint;

  constructor(data?: PartialMessage<ScorecardQuestion_MultiSelect>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.ScorecardQuestion.MultiSelect";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScorecardQuestion_MultiSelect;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScorecardQuestion_MultiSelect;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScorecardQuestion_MultiSelect;

  static equals(a: ScorecardQuestion_MultiSelect | PlainMessage<ScorecardQuestion_MultiSelect> | undefined, b: ScorecardQuestion_MultiSelect | PlainMessage<ScorecardQuestion_MultiSelect> | undefined): boolean;
}

/**
 * Section represents a section of a scorecard (template).
 *
 * @generated from message api.commons.Section
 */
export declare class Section extends Message<Section> {
  /**
   * unique section id
   *
   * @generated from field: int64 section_id = 2;
   */
  sectionId: bigint;

  /**
   * scorecard to which section belongs
   *
   * @generated from field: int64 scorecard_id = 3;
   */
  scorecardId: bigint;

  /**
   * section title or name
   *
   * @generated from field: string title = 4;
   */
  title: string;

  /**
   * extra context about the section
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * used for scorecards with weighted scoring
   *
   * @generated from field: uint32 weight = 6;
   */
  weight: number;

  /**
   * the questions in the section
   *
   * @generated from field: repeated api.commons.ScorecardQuestion questions = 7;
   */
  questions: ScorecardQuestion[];

  /**
   * current version of the section
   *
   * @generated from field: int32 version = 8;
   */
  version: number;

  /**
   * order number of section
   *
   * @generated from field: int32 sort_order = 9;
   */
  sortOrder: number;

  /**
   * the auto questions in the section
   *
   * @generated from field: repeated api.commons.AutoQuestion auto_questions = 11;
   */
  autoQuestions: AutoQuestion[];

  constructor(data?: PartialMessage<Section>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.Section";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Section;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Section;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Section;

  static equals(a: Section | PlainMessage<Section> | undefined, b: Section | PlainMessage<Section> | undefined): boolean;
}

/**
 * Scorecard represents a scorecard (template).
 * A scorecard can be used to score a call.
 *
 * @generated from message api.commons.Scorecard
 */
export declare class Scorecard extends Message<Scorecard> {
  /**
   * unique id of the scorecard
   *
   * @generated from field: int64 scorecard_id = 2;
   */
  scorecardId: bigint;

  /**
   * user_id of the scorecard creator
   *
   * @generated from field: string author_id = 3;
   */
  authorId: string;

  /**
   * title, or name, of scorecard
   *
   * @generated from field: string title = 4;
   */
  title: string;

  /**
   * description of scorecard (i.e. purpose and use)
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * percentage to two decimal places between (0 or 1?) and 100
   *
   * @generated from field: double pass_score = 6;
   */
  passScore: number;

  /**
   * how a score is calculated (i.e. simple sum)
   *
   * @generated from field: api.commons.ScoreType score_type = 7;
   */
  scoreType: ScoreType;

  /**
   * how the scorecard gets evaluated (i.e. manual)
   *
   * @generated from field: api.commons.EvaluationType evaluation_type = 8;
   */
  evaluationType: EvaluationType;

  /**
   * default false (disable agent feedback)
   *
   * @generated from field: bool allow_feedback = 10;
   */
  allowFeedback: boolean;

  /**
   * FE only; if true, weights are evenly distributed and locked
   *
   * @generated from field: bool distribute_weights = 11;
   */
  distributeWeights: boolean;

  /**
   * sets the required agent skills
   *
   * @generated from field: api.commons.Category category = 12;
   */
  category?: Category;

  /**
   * logical groupings of questions
   *
   * @generated from field: repeated api.commons.Section sections = 13;
   */
  sections: Section[];

  /**
   * current version of the scorecard
   *
   * @generated from field: int32 version = 14;
   */
  version: number;

  /**
   * determines how a scorecard can be used
   *
   * @generated from field: api.commons.ScorecardState state = 15;
   */
  state: ScorecardState;

  /**
   * Deprecated. Use Ad Hoc category.
   *
   * @generated from field: bool is_ad_hoc = 16 [deprecated = true];
   * @deprecated
   */
  isAdHoc: boolean;

  /**
   * Optional. Set of unique keys for custom key-value fields.
   *
   * @generated from field: repeated string custom_field_keys = 19;
   */
  customFieldKeys: string[];

  /**
   * call types supported by scorecard
   *
   * @generated from field: repeated api.commons.CallType.Enum call_types = 20;
   */
  callTypes: CallType_Enum[];

  constructor(data?: PartialMessage<Scorecard>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.Scorecard";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Scorecard;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Scorecard;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Scorecard;

  static equals(a: Scorecard | PlainMessage<Scorecard> | undefined, b: Scorecard | PlainMessage<Scorecard> | undefined): boolean;
}

/**
 * AutoQuestion represents an automatically scored question.
 *
 * @generated from message api.commons.AutoQuestion
 */
export declare class AutoQuestion extends Message<AutoQuestion> {
  /**
   * unique id of the auto question.
   *
   * @generated from field: int64 auto_question_id = 2;
   */
  autoQuestionId: bigint;

  /**
   * Deprecated. Use FlagExpr.
   *
   * @generated from field: int64 flag_sid = 3;
   */
  flagSid: bigint;

  /**
   * auto question belongs to scorecard.
   *
   * @generated from field: int64 scorecard_id = 5;
   */
  scorecardId: bigint;

  /**
   * auto question belongs to auto section.
   *
   * @generated from field: int64 auto_section_id = 6;
   */
  autoSectionId: bigint;

  /**
   * order number of auto question.
   *
   * @generated from field: int32 sort_order = 7;
   */
  sortOrder: number;

  /**
   * Boolean expression of which flags to match
   *
   * @generated from field: api.commons.AutoQuestion.FlagExpr flag_expression = 10;
   */
  flagExpression?: AutoQuestion_FlagExpr;

  /**
   * The question to display.
   *
   * @generated from field: string question = 11;
   */
  question: string;

  /**
   * Optional. Extra info about question.
   *
   * @generated from field: string description = 12;
   */
  description: string;

  /**
   * Optional. Library question id.
   *
   * @generated from field: int64 question_id = 13;
   */
  questionId: bigint;

  /**
   * The risk level of the evaluation question.
   *
   * @generated from field: api.commons.RiskLevel risk_level = 14;
   */
  riskLevel: RiskLevel;

  constructor(data?: PartialMessage<AutoQuestion>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.AutoQuestion";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoQuestion;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoQuestion;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoQuestion;

  static equals(a: AutoQuestion | PlainMessage<AutoQuestion> | undefined, b: AutoQuestion | PlainMessage<AutoQuestion> | undefined): boolean;
}

/**
 * FlagExpr defines a boolean expression of filters.
 *
 * @generated from message api.commons.AutoQuestion.FlagExpr
 */
export declare class AutoQuestion_FlagExpr extends Message<AutoQuestion_FlagExpr> {
  /**
   * Optional. Boolean and operator.
   *
   * @generated from field: repeated api.commons.AutoQuestion.FlagExpr and = 1;
   */
  and: AutoQuestion_FlagExpr[];

  /**
   * Optional. Boolean or operator.
   *
   * @generated from field: repeated api.commons.AutoQuestion.FlagExpr or = 2;
   */
  or: AutoQuestion_FlagExpr[];

  /**
   * Optional. Flag to match.
   *
   * @generated from field: api.commons.AutoQuestion.FlagExpr.Flag flag = 3;
   */
  flag?: AutoQuestion_FlagExpr_Flag;

  /**
   * Optional. Boolean not operator.
   *
   * @generated from field: api.commons.AutoQuestion.FlagExpr not = 4;
   */
  not?: AutoQuestion_FlagExpr;

  constructor(data?: PartialMessage<AutoQuestion_FlagExpr>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.AutoQuestion.FlagExpr";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoQuestion_FlagExpr;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoQuestion_FlagExpr;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoQuestion_FlagExpr;

  static equals(a: AutoQuestion_FlagExpr | PlainMessage<AutoQuestion_FlagExpr> | undefined, b: AutoQuestion_FlagExpr | PlainMessage<AutoQuestion_FlagExpr> | undefined): boolean;
}

/**
 * Filter defines a filter.
 *
 * @generated from message api.commons.AutoQuestion.FlagExpr.Flag
 */
export declare class AutoQuestion_FlagExpr_Flag extends Message<AutoQuestion_FlagExpr_Flag> {
  /**
   * Required. Filter sid.
   *
   * @generated from field: int64 flag_sid = 1;
   */
  flagSid: bigint;

  constructor(data?: PartialMessage<AutoQuestion_FlagExpr_Flag>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.commons.AutoQuestion.FlagExpr.Flag";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoQuestion_FlagExpr_Flag;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoQuestion_FlagExpr_Flag;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoQuestion_FlagExpr_Flag;

  static equals(a: AutoQuestion_FlagExpr_Flag | PlainMessage<AutoQuestion_FlagExpr_Flag> | undefined, b: AutoQuestion_FlagExpr_Flag | PlainMessage<AutoQuestion_FlagExpr_Flag> | undefined): boolean;
}

