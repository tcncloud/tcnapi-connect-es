// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts"
// @generated from file api/v1alpha1/org/permissions.proto (package api.v1alpha1.org, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Permission } from "../../commons/auth/perms_pb.js";
import type { Permission as Permission$1 } from "../../commons/perms_pb.js";
import type { User } from "../../commons/org/user_pb.js";
import type { OperatorApplications } from "../../commons/org_pb.js";
import type { Label } from "../../commons/org/labels_pb.js";
import type { License, PermissionGroup } from "../../commons/org/permissions_pb.js";

/**
 * Request message for the GetPermissions RPC.
 *
 * @generated from message api.v1alpha1.org.GetPermissionsRequest
 */
export declare class GetPermissionsRequest extends Message<GetPermissionsRequest> {
  constructor(data?: PartialMessage<GetPermissionsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetPermissionsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPermissionsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPermissionsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPermissionsRequest;

  static equals(a: GetPermissionsRequest | PlainMessage<GetPermissionsRequest> | undefined, b: GetPermissionsRequest | PlainMessage<GetPermissionsRequest> | undefined): boolean;
}

/**
 * Response message for the GetPermissions RPC.
 *
 * @generated from message api.v1alpha1.org.GetPermissionsResponse
 */
export declare class GetPermissionsResponse extends Message<GetPermissionsResponse> {
  /**
   * List of permissions for the user.
   *
   * @generated from field: repeated api.commons.auth.Permission permissions = 1;
   */
  permissions: Permission[];

  /**
   * List of legacy P3 permissions.
   *
   * @generated from field: repeated api.commons.Permission p3_permissions = 2;
   */
  p3Permissions: Permission$1[];

  /**
   * User entity.
   *
   * @generated from field: api.commons.org.User user = 3;
   */
  user?: User;

  /**
   * Default operator application for user.
   *
   * @generated from field: api.commons.OperatorApplications default_app = 4;
   */
  defaultApp: OperatorApplications;

  constructor(data?: PartialMessage<GetPermissionsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetPermissionsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPermissionsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPermissionsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPermissionsResponse;

  static equals(a: GetPermissionsResponse | PlainMessage<GetPermissionsResponse> | undefined, b: GetPermissionsResponse | PlainMessage<GetPermissionsResponse> | undefined): boolean;
}

/**
 * Request message for the GetUserPermissions RPC.
 *
 * @generated from message api.v1alpha1.org.GetUserPermissionsRequest
 */
export declare class GetUserPermissionsRequest extends Message<GetUserPermissionsRequest> {
  constructor(data?: PartialMessage<GetUserPermissionsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetUserPermissionsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserPermissionsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserPermissionsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserPermissionsRequest;

  static equals(a: GetUserPermissionsRequest | PlainMessage<GetUserPermissionsRequest> | undefined, b: GetUserPermissionsRequest | PlainMessage<GetUserPermissionsRequest> | undefined): boolean;
}

/**
 * Response message for the GetUserPermissions RPC.
 *
 * @generated from message api.v1alpha1.org.GetUserPermissionsResponse
 */
export declare class GetUserPermissionsResponse extends Message<GetUserPermissionsResponse> {
  /**
   * List of permissions for the user.
   *
   * @generated from field: repeated api.commons.auth.Permission permissions = 1;
   */
  permissions: Permission[];

  /**
   * A list of the labels associated with the user
   *
   * @generated from field: repeated api.commons.org.Label labels = 2;
   */
  labels: Label[];

  constructor(data?: PartialMessage<GetUserPermissionsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetUserPermissionsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserPermissionsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserPermissionsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserPermissionsResponse;

  static equals(a: GetUserPermissionsResponse | PlainMessage<GetUserPermissionsResponse> | undefined, b: GetUserPermissionsResponse | PlainMessage<GetUserPermissionsResponse> | undefined): boolean;
}

/**
 * Request message for the CreatePermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.CreatePermissionGroupRequest
 */
export declare class CreatePermissionGroupRequest extends Message<CreatePermissionGroupRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Description of permission group
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Permissions to include in new permission group
   *
   * @generated from field: repeated api.commons.auth.Permission permissions = 3;
   */
  permissions: Permission[];

  constructor(data?: PartialMessage<CreatePermissionGroupRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.CreatePermissionGroupRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePermissionGroupRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePermissionGroupRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePermissionGroupRequest;

  static equals(a: CreatePermissionGroupRequest | PlainMessage<CreatePermissionGroupRequest> | undefined, b: CreatePermissionGroupRequest | PlainMessage<CreatePermissionGroupRequest> | undefined): boolean;
}

/**
 * Response message for the CreatePermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.CreatePermissionGroupResponse
 */
export declare class CreatePermissionGroupResponse extends Message<CreatePermissionGroupResponse> {
  /**
   * The permission group that was just created.
   *
   * @generated from field: string permission_group_id = 1;
   */
  permissionGroupId: string;

  constructor(data?: PartialMessage<CreatePermissionGroupResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.CreatePermissionGroupResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePermissionGroupResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePermissionGroupResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePermissionGroupResponse;

  static equals(a: CreatePermissionGroupResponse | PlainMessage<CreatePermissionGroupResponse> | undefined, b: CreatePermissionGroupResponse | PlainMessage<CreatePermissionGroupResponse> | undefined): boolean;
}

/**
 * Request message for the UpdatePermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.UpdatePermissionGroupRequest
 */
export declare class UpdatePermissionGroupRequest extends Message<UpdatePermissionGroupRequest> {
  /**
   * Id of the permission group to be updated.
   *
   * @generated from field: string permission_group_id = 1;
   */
  permissionGroupId: string;

  /**
   * Name of permission group
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Description of permission group
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Permissions to include in new permission group
   *
   * @generated from field: repeated api.commons.auth.Permission permissions = 4;
   */
  permissions: Permission[];

  constructor(data?: PartialMessage<UpdatePermissionGroupRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.UpdatePermissionGroupRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePermissionGroupRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePermissionGroupRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePermissionGroupRequest;

  static equals(a: UpdatePermissionGroupRequest | PlainMessage<UpdatePermissionGroupRequest> | undefined, b: UpdatePermissionGroupRequest | PlainMessage<UpdatePermissionGroupRequest> | undefined): boolean;
}

/**
 * Response message for the UpdatePermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.UpdatePermissionGroupResponse
 */
export declare class UpdatePermissionGroupResponse extends Message<UpdatePermissionGroupResponse> {
  /**
   * Updated permission group.
   *
   * @generated from field: api.commons.org.PermissionGroup permission_group = 1;
   */
  permissionGroup?: PermissionGroup;

  constructor(data?: PartialMessage<UpdatePermissionGroupResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.UpdatePermissionGroupResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePermissionGroupResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePermissionGroupResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePermissionGroupResponse;

  static equals(a: UpdatePermissionGroupResponse | PlainMessage<UpdatePermissionGroupResponse> | undefined, b: UpdatePermissionGroupResponse | PlainMessage<UpdatePermissionGroupResponse> | undefined): boolean;
}

/**
 * Request message for the DeletePermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.DeletePermissionGroupRequest
 */
export declare class DeletePermissionGroupRequest extends Message<DeletePermissionGroupRequest> {
  /**
   * Id of the permission group to be deleted.
   *
   * @generated from field: string permission_group_id = 1;
   */
  permissionGroupId: string;

  constructor(data?: PartialMessage<DeletePermissionGroupRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.DeletePermissionGroupRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePermissionGroupRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePermissionGroupRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePermissionGroupRequest;

  static equals(a: DeletePermissionGroupRequest | PlainMessage<DeletePermissionGroupRequest> | undefined, b: DeletePermissionGroupRequest | PlainMessage<DeletePermissionGroupRequest> | undefined): boolean;
}

/**
 * Response message for the DeletePermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.DeletePermissionGroupResponse
 */
export declare class DeletePermissionGroupResponse extends Message<DeletePermissionGroupResponse> {
  constructor(data?: PartialMessage<DeletePermissionGroupResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.DeletePermissionGroupResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePermissionGroupResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePermissionGroupResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePermissionGroupResponse;

  static equals(a: DeletePermissionGroupResponse | PlainMessage<DeletePermissionGroupResponse> | undefined, b: DeletePermissionGroupResponse | PlainMessage<DeletePermissionGroupResponse> | undefined): boolean;
}

/**
 * Request message for the GetPermissions RPC.
 *
 * @generated from message api.v1alpha1.org.ListPermissionGroupsRequest
 */
export declare class ListPermissionGroupsRequest extends Message<ListPermissionGroupsRequest> {
  constructor(data?: PartialMessage<ListPermissionGroupsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.ListPermissionGroupsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPermissionGroupsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPermissionGroupsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPermissionGroupsRequest;

  static equals(a: ListPermissionGroupsRequest | PlainMessage<ListPermissionGroupsRequest> | undefined, b: ListPermissionGroupsRequest | PlainMessage<ListPermissionGroupsRequest> | undefined): boolean;
}

/**
 * Response message for the GetPermissions RPC.
 *
 * @generated from message api.v1alpha1.org.ListPermissionGroupsResponse
 */
export declare class ListPermissionGroupsResponse extends Message<ListPermissionGroupsResponse> {
  /**
   * Permission groups in caller's organization
   *
   * @generated from field: repeated api.commons.org.PermissionGroup permission_groups = 1;
   */
  permissionGroups: PermissionGroup[];

  constructor(data?: PartialMessage<ListPermissionGroupsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.ListPermissionGroupsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPermissionGroupsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPermissionGroupsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPermissionGroupsResponse;

  static equals(a: ListPermissionGroupsResponse | PlainMessage<ListPermissionGroupsResponse> | undefined, b: ListPermissionGroupsResponse | PlainMessage<ListPermissionGroupsResponse> | undefined): boolean;
}

/**
 * Request message for the GetPermissions RPC.
 *
 * @generated from message api.v1alpha1.org.ListPermissionGroupsByOrgIdRequest
 */
export declare class ListPermissionGroupsByOrgIdRequest extends Message<ListPermissionGroupsByOrgIdRequest> {
  /**
   * Id of organization to get permission groups for
   *
   * @generated from field: string org_id = 1;
   */
  orgId: string;

  constructor(data?: PartialMessage<ListPermissionGroupsByOrgIdRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.ListPermissionGroupsByOrgIdRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPermissionGroupsByOrgIdRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPermissionGroupsByOrgIdRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPermissionGroupsByOrgIdRequest;

  static equals(a: ListPermissionGroupsByOrgIdRequest | PlainMessage<ListPermissionGroupsByOrgIdRequest> | undefined, b: ListPermissionGroupsByOrgIdRequest | PlainMessage<ListPermissionGroupsByOrgIdRequest> | undefined): boolean;
}

/**
 * Response message for the GetPermissions RPC.
 *
 * @generated from message api.v1alpha1.org.ListPermissionGroupsByOrgIdResponse
 */
export declare class ListPermissionGroupsByOrgIdResponse extends Message<ListPermissionGroupsByOrgIdResponse> {
  /**
   * Permission groups in specified organization
   *
   * @generated from field: repeated api.commons.org.PermissionGroup permission_groups = 1;
   */
  permissionGroups: PermissionGroup[];

  constructor(data?: PartialMessage<ListPermissionGroupsByOrgIdResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.ListPermissionGroupsByOrgIdResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPermissionGroupsByOrgIdResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPermissionGroupsByOrgIdResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPermissionGroupsByOrgIdResponse;

  static equals(a: ListPermissionGroupsByOrgIdResponse | PlainMessage<ListPermissionGroupsByOrgIdResponse> | undefined, b: ListPermissionGroupsByOrgIdResponse | PlainMessage<ListPermissionGroupsByOrgIdResponse> | undefined): boolean;
}

/**
 * Request message for the AssignUsersPermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.AssignUsersPermissionGroupRequest
 */
export declare class AssignUsersPermissionGroupRequest extends Message<AssignUsersPermissionGroupRequest> {
  /**
   * Required. The ID of the permission group that is being assigned.
   *
   * @generated from field: string permission_group_id = 1;
   */
  permissionGroupId: string;

  /**
   * Required. The IDs of the users the permission group is being assigned to.
   *
   * @generated from field: repeated string assign_user_ids = 2;
   */
  assignUserIds: string[];

  constructor(data?: PartialMessage<AssignUsersPermissionGroupRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.AssignUsersPermissionGroupRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignUsersPermissionGroupRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignUsersPermissionGroupRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignUsersPermissionGroupRequest;

  static equals(a: AssignUsersPermissionGroupRequest | PlainMessage<AssignUsersPermissionGroupRequest> | undefined, b: AssignUsersPermissionGroupRequest | PlainMessage<AssignUsersPermissionGroupRequest> | undefined): boolean;
}

/**
 * Response message for the AssignUsersPermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.AssignUsersPermissionGroupResponse
 */
export declare class AssignUsersPermissionGroupResponse extends Message<AssignUsersPermissionGroupResponse> {
  constructor(data?: PartialMessage<AssignUsersPermissionGroupResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.AssignUsersPermissionGroupResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignUsersPermissionGroupResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignUsersPermissionGroupResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignUsersPermissionGroupResponse;

  static equals(a: AssignUsersPermissionGroupResponse | PlainMessage<AssignUsersPermissionGroupResponse> | undefined, b: AssignUsersPermissionGroupResponse | PlainMessage<AssignUsersPermissionGroupResponse> | undefined): boolean;
}

/**
 * Request message for the RevokeUsersPermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.RevokeUsersPermissionGroupRequest
 */
export declare class RevokeUsersPermissionGroupRequest extends Message<RevokeUsersPermissionGroupRequest> {
  /**
   * Required. The ID of the permission group that is being revoked.
   *
   * @generated from field: string permission_group_id = 1;
   */
  permissionGroupId: string;

  /**
   * Required. The IDs of the users the permission group is being revoked from.
   *
   * @generated from field: repeated string revoke_user_ids = 2;
   */
  revokeUserIds: string[];

  constructor(data?: PartialMessage<RevokeUsersPermissionGroupRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.RevokeUsersPermissionGroupRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeUsersPermissionGroupRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeUsersPermissionGroupRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeUsersPermissionGroupRequest;

  static equals(a: RevokeUsersPermissionGroupRequest | PlainMessage<RevokeUsersPermissionGroupRequest> | undefined, b: RevokeUsersPermissionGroupRequest | PlainMessage<RevokeUsersPermissionGroupRequest> | undefined): boolean;
}

/**
 * Response message for the RevokeUsersPermissionGroup RPC.
 *
 * @generated from message api.v1alpha1.org.RevokeUsersPermissionGroupResponse
 */
export declare class RevokeUsersPermissionGroupResponse extends Message<RevokeUsersPermissionGroupResponse> {
  constructor(data?: PartialMessage<RevokeUsersPermissionGroupResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.RevokeUsersPermissionGroupResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeUsersPermissionGroupResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeUsersPermissionGroupResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeUsersPermissionGroupResponse;

  static equals(a: RevokeUsersPermissionGroupResponse | PlainMessage<RevokeUsersPermissionGroupResponse> | undefined, b: RevokeUsersPermissionGroupResponse | PlainMessage<RevokeUsersPermissionGroupResponse> | undefined): boolean;
}

/**
 * Request message for the AssignAccountOwnerPermissionToUser RPC.
 *
 * @generated from message api.v1alpha1.org.AssignAccountOwnerPermissionToUserRequest
 */
export declare class AssignAccountOwnerPermissionToUserRequest extends Message<AssignAccountOwnerPermissionToUserRequest> {
  /**
   * User which will be assigned the account owner permissions.
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  constructor(data?: PartialMessage<AssignAccountOwnerPermissionToUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.AssignAccountOwnerPermissionToUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignAccountOwnerPermissionToUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignAccountOwnerPermissionToUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignAccountOwnerPermissionToUserRequest;

  static equals(a: AssignAccountOwnerPermissionToUserRequest | PlainMessage<AssignAccountOwnerPermissionToUserRequest> | undefined, b: AssignAccountOwnerPermissionToUserRequest | PlainMessage<AssignAccountOwnerPermissionToUserRequest> | undefined): boolean;
}

/**
 * Response message for the AssignAccountOwnerPermissionToUser RPC.
 *
 * @generated from message api.v1alpha1.org.AssignAccountOwnerPermissionToUserResponse
 */
export declare class AssignAccountOwnerPermissionToUserResponse extends Message<AssignAccountOwnerPermissionToUserResponse> {
  constructor(data?: PartialMessage<AssignAccountOwnerPermissionToUserResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.AssignAccountOwnerPermissionToUserResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignAccountOwnerPermissionToUserResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignAccountOwnerPermissionToUserResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignAccountOwnerPermissionToUserResponse;

  static equals(a: AssignAccountOwnerPermissionToUserResponse | PlainMessage<AssignAccountOwnerPermissionToUserResponse> | undefined, b: AssignAccountOwnerPermissionToUserResponse | PlainMessage<AssignAccountOwnerPermissionToUserResponse> | undefined): boolean;
}

/**
 * Request message for the RevokeAccountOwnerPermissionFromUser RPC.
 *
 * @generated from message api.v1alpha1.org.RevokeAccountOwnerPermissionFromUserRequest
 */
export declare class RevokeAccountOwnerPermissionFromUserRequest extends Message<RevokeAccountOwnerPermissionFromUserRequest> {
  /**
   * User which will be revoked the account owner permissions.
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * The organization which the target user belongs to
   *
   * @generated from field: string org_id = 2;
   */
  orgId: string;

  constructor(data?: PartialMessage<RevokeAccountOwnerPermissionFromUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.RevokeAccountOwnerPermissionFromUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeAccountOwnerPermissionFromUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeAccountOwnerPermissionFromUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeAccountOwnerPermissionFromUserRequest;

  static equals(a: RevokeAccountOwnerPermissionFromUserRequest | PlainMessage<RevokeAccountOwnerPermissionFromUserRequest> | undefined, b: RevokeAccountOwnerPermissionFromUserRequest | PlainMessage<RevokeAccountOwnerPermissionFromUserRequest> | undefined): boolean;
}

/**
 * Response message for the RevokeAccountOwnerPermissionFromUser RPC.
 *
 * @generated from message api.v1alpha1.org.RevokeAccountOwnerPermissionFromUserResponse
 */
export declare class RevokeAccountOwnerPermissionFromUserResponse extends Message<RevokeAccountOwnerPermissionFromUserResponse> {
  constructor(data?: PartialMessage<RevokeAccountOwnerPermissionFromUserResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.RevokeAccountOwnerPermissionFromUserResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeAccountOwnerPermissionFromUserResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeAccountOwnerPermissionFromUserResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeAccountOwnerPermissionFromUserResponse;

  static equals(a: RevokeAccountOwnerPermissionFromUserResponse | PlainMessage<RevokeAccountOwnerPermissionFromUserResponse> | undefined, b: RevokeAccountOwnerPermissionFromUserResponse | PlainMessage<RevokeAccountOwnerPermissionFromUserResponse> | undefined): boolean;
}

/**
 * Request message for the InitDefaultPermissionGroups RPC.
 *
 * @generated from message api.v1alpha1.org.InitDefaultPermissionGroupsRequest
 */
export declare class InitDefaultPermissionGroupsRequest extends Message<InitDefaultPermissionGroupsRequest> {
  constructor(data?: PartialMessage<InitDefaultPermissionGroupsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.InitDefaultPermissionGroupsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitDefaultPermissionGroupsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitDefaultPermissionGroupsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitDefaultPermissionGroupsRequest;

  static equals(a: InitDefaultPermissionGroupsRequest | PlainMessage<InitDefaultPermissionGroupsRequest> | undefined, b: InitDefaultPermissionGroupsRequest | PlainMessage<InitDefaultPermissionGroupsRequest> | undefined): boolean;
}

/**
 * Response message for the InitDefaultPermissionGroups RPC.
 *
 * @generated from message api.v1alpha1.org.InitDefaultPermissionGroupsResponse
 */
export declare class InitDefaultPermissionGroupsResponse extends Message<InitDefaultPermissionGroupsResponse> {
  /**
   * The list of default permission groups.
   *
   * @generated from field: repeated api.commons.org.PermissionGroup default_permission_groups = 1;
   */
  defaultPermissionGroups: PermissionGroup[];

  constructor(data?: PartialMessage<InitDefaultPermissionGroupsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.InitDefaultPermissionGroupsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitDefaultPermissionGroupsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitDefaultPermissionGroupsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitDefaultPermissionGroupsResponse;

  static equals(a: InitDefaultPermissionGroupsResponse | PlainMessage<InitDefaultPermissionGroupsResponse> | undefined, b: InitDefaultPermissionGroupsResponse | PlainMessage<InitDefaultPermissionGroupsResponse> | undefined): boolean;
}

/**
 * Request message for the GetAccountOwnerGroup RPC.
 *
 * @generated from message api.v1alpha1.org.GetAccountOwnerGroupRequest
 */
export declare class GetAccountOwnerGroupRequest extends Message<GetAccountOwnerGroupRequest> {
  /**
   * Id of organization to get account owner group for
   *
   * @generated from field: string org_id = 1;
   */
  orgId: string;

  constructor(data?: PartialMessage<GetAccountOwnerGroupRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetAccountOwnerGroupRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountOwnerGroupRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountOwnerGroupRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountOwnerGroupRequest;

  static equals(a: GetAccountOwnerGroupRequest | PlainMessage<GetAccountOwnerGroupRequest> | undefined, b: GetAccountOwnerGroupRequest | PlainMessage<GetAccountOwnerGroupRequest> | undefined): boolean;
}

/**
 * Response message for the GetAccountOwnerGroup RPC.
 *
 * @generated from message api.v1alpha1.org.GetAccountOwnerGroupResponse
 */
export declare class GetAccountOwnerGroupResponse extends Message<GetAccountOwnerGroupResponse> {
  /**
   * Permission groups in specified organization
   *
   * @generated from field: api.commons.org.PermissionGroup permission_group = 1;
   */
  permissionGroup?: PermissionGroup;

  constructor(data?: PartialMessage<GetAccountOwnerGroupResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetAccountOwnerGroupResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountOwnerGroupResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountOwnerGroupResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountOwnerGroupResponse;

  static equals(a: GetAccountOwnerGroupResponse | PlainMessage<GetAccountOwnerGroupResponse> | undefined, b: GetAccountOwnerGroupResponse | PlainMessage<GetAccountOwnerGroupResponse> | undefined): boolean;
}

/**
 * Request message for the GetLicenses RPC.
 *
 * @generated from message api.v1alpha1.org.GetLicensesRequest
 */
export declare class GetLicensesRequest extends Message<GetLicensesRequest> {
  /**
   * Org ID to retrieve the assigned licenses for.
   *
   * @generated from field: string org_id = 1;
   */
  orgId: string;

  constructor(data?: PartialMessage<GetLicensesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetLicensesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLicensesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLicensesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLicensesRequest;

  static equals(a: GetLicensesRequest | PlainMessage<GetLicensesRequest> | undefined, b: GetLicensesRequest | PlainMessage<GetLicensesRequest> | undefined): boolean;
}

/**
 * Response message for the GetLicenses RPC.
 *
 * @generated from message api.v1alpha1.org.GetLicensesResponse
 */
export declare class GetLicensesResponse extends Message<GetLicensesResponse> {
  /**
   * List of licenses organization is authorized for.
   *
   * @generated from field: repeated api.commons.org.License licenses = 1;
   */
  licenses: License[];

  constructor(data?: PartialMessage<GetLicensesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetLicensesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLicensesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLicensesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLicensesResponse;

  static equals(a: GetLicensesResponse | PlainMessage<GetLicensesResponse> | undefined, b: GetLicensesResponse | PlainMessage<GetLicensesResponse> | undefined): boolean;
}

/**
 * Request message for the GetOrgLicenses RPC.
 *
 * This request does not expect an org id
 * since it will be retrieved from the token.
 *
 * @generated from message api.v1alpha1.org.GetOrgLicensesRequest
 */
export declare class GetOrgLicensesRequest extends Message<GetOrgLicensesRequest> {
  constructor(data?: PartialMessage<GetOrgLicensesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetOrgLicensesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrgLicensesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrgLicensesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrgLicensesRequest;

  static equals(a: GetOrgLicensesRequest | PlainMessage<GetOrgLicensesRequest> | undefined, b: GetOrgLicensesRequest | PlainMessage<GetOrgLicensesRequest> | undefined): boolean;
}

/**
 * Response message for the GetOrgLicenses RPC.
 *
 * @generated from message api.v1alpha1.org.GetOrgLicensesResponse
 */
export declare class GetOrgLicensesResponse extends Message<GetOrgLicensesResponse> {
  /**
   * List of licenses organization is authorized for.
   *
   * @generated from field: repeated api.commons.org.License licenses = 1;
   */
  licenses: License[];

  constructor(data?: PartialMessage<GetOrgLicensesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.GetOrgLicensesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrgLicensesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrgLicensesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrgLicensesResponse;

  static equals(a: GetOrgLicensesResponse | PlainMessage<GetOrgLicensesResponse> | undefined, b: GetOrgLicensesResponse | PlainMessage<GetOrgLicensesResponse> | undefined): boolean;
}

/**
 * Request message for the UpdateLicenses RPC.
 *
 * @generated from message api.v1alpha1.org.UpdateLicensesRequest
 */
export declare class UpdateLicensesRequest extends Message<UpdateLicensesRequest> {
  /**
   * Org ID to update the assigned licenses for.
   *
   * @generated from field: string org_id = 1;
   */
  orgId: string;

  /**
   * Permissions to add to license.
   *
   * @generated from field: repeated api.commons.auth.Permission added_licenses = 2;
   */
  addedLicenses: Permission[];

  /**
   * Permissions to revoke from license.
   *
   * @generated from field: repeated api.commons.auth.Permission revoked_licenses = 3;
   */
  revokedLicenses: Permission[];

  constructor(data?: PartialMessage<UpdateLicensesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.UpdateLicensesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLicensesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLicensesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLicensesRequest;

  static equals(a: UpdateLicensesRequest | PlainMessage<UpdateLicensesRequest> | undefined, b: UpdateLicensesRequest | PlainMessage<UpdateLicensesRequest> | undefined): boolean;
}

/**
 * Response message for the UpdateLicenses RPC.
 *
 * @generated from message api.v1alpha1.org.UpdateLicensesResponse
 */
export declare class UpdateLicensesResponse extends Message<UpdateLicensesResponse> {
  constructor(data?: PartialMessage<UpdateLicensesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.UpdateLicensesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLicensesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLicensesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLicensesResponse;

  static equals(a: UpdateLicensesResponse | PlainMessage<UpdateLicensesResponse> | undefined, b: UpdateLicensesResponse | PlainMessage<UpdateLicensesResponse> | undefined): boolean;
}

/**
 * Request message for the RemovePermissionFromAllPermissionGroupsRequest RPC.
 *
 * @generated from message api.v1alpha1.org.RemovePermissionFromAllPermissionGroupsRequest
 */
export declare class RemovePermissionFromAllPermissionGroupsRequest extends Message<RemovePermissionFromAllPermissionGroupsRequest> {
  /**
   * Org ID to remove the permission from.
   *
   * @generated from field: string org_id = 1;
   */
  orgId: string;

  /**
   * Permission to remove from all permission groups.
   *
   * @generated from field: api.commons.auth.Permission permission = 2;
   */
  permission: Permission;

  constructor(data?: PartialMessage<RemovePermissionFromAllPermissionGroupsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.RemovePermissionFromAllPermissionGroupsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemovePermissionFromAllPermissionGroupsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemovePermissionFromAllPermissionGroupsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemovePermissionFromAllPermissionGroupsRequest;

  static equals(a: RemovePermissionFromAllPermissionGroupsRequest | PlainMessage<RemovePermissionFromAllPermissionGroupsRequest> | undefined, b: RemovePermissionFromAllPermissionGroupsRequest | PlainMessage<RemovePermissionFromAllPermissionGroupsRequest> | undefined): boolean;
}

/**
 * Response message for the RemovePermissionFromAllPermissionGroupsRequest RPC.
 *
 * @generated from message api.v1alpha1.org.RemovePermissionFromAllPermissionGroupsResponse
 */
export declare class RemovePermissionFromAllPermissionGroupsResponse extends Message<RemovePermissionFromAllPermissionGroupsResponse> {
  constructor(data?: PartialMessage<RemovePermissionFromAllPermissionGroupsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.org.RemovePermissionFromAllPermissionGroupsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemovePermissionFromAllPermissionGroupsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemovePermissionFromAllPermissionGroupsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemovePermissionFromAllPermissionGroupsResponse;

  static equals(a: RemovePermissionFromAllPermissionGroupsResponse | PlainMessage<RemovePermissionFromAllPermissionGroupsResponse> | undefined, b: RemovePermissionFromAllPermissionGroupsResponse | PlainMessage<RemovePermissionFromAllPermissionGroupsResponse> | undefined): boolean;
}

