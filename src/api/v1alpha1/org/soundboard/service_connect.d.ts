// @generated by protoc-gen-connect-es v0.9.1
// @generated from file api/v1alpha1/org/soundboard/service.proto (package api.v1alpha1.soundboard, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateSoundboardReq, CreateSoundboardRes, DeleteSoundboardReq, DeleteSoundboardRes, GetSoundboardFileReq, GetSoundboardFileRes, ListSoundboardsReq, ListSoundboardsRes, UpdateSoundboardReq, UpdateSoundboardRes } from "./entities_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service api.v1alpha1.soundboard.Soundboard
 */
export declare const Soundboard: {
  readonly typeName: "api.v1alpha1.soundboard.Soundboard",
  readonly methods: {
    /**
     * GetSoundboardFile streams back segments of the audio file stored in rec
     * corresponding to the provided soundboard id and org id.
     *
     * @generated from rpc api.v1alpha1.soundboard.Soundboard.GetSoundboardFile
     */
    readonly getSoundboardFile: {
      readonly name: "GetSoundboardFile",
      readonly I: typeof GetSoundboardFileReq,
      readonly O: typeof GetSoundboardFileRes,
      readonly kind: MethodKind.ServerStreaming,
    },
    /**
     * CreateSoundboard takes in a stream of metadata and audio file segments.
     * The first expected message should contain SoundboardDetails, then following
     * messages will be chunks of audio file data, which is then aggregated and put
     * into rec. The generated soundboard id is returned.
     *
     * @generated from rpc api.v1alpha1.soundboard.Soundboard.CreateSoundboard
     */
    readonly createSoundboard: {
      readonly name: "CreateSoundboard",
      readonly I: typeof CreateSoundboardReq,
      readonly O: typeof CreateSoundboardRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * ListSoundboards returns all of the metadata for soundboards corresponding
     * corresponding to a given org id.
     *
     * @generated from rpc api.v1alpha1.soundboard.Soundboard.ListSoundboards
     */
    readonly listSoundboards: {
      readonly name: "ListSoundboards",
      readonly I: typeof ListSoundboardsReq,
      readonly O: typeof ListSoundboardsRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * UpdateSondboard updates a soundboard's metadata in the soundboard table.
     *
     * @generated from rpc api.v1alpha1.soundboard.Soundboard.UpdateSoundboard
     */
    readonly updateSoundboard: {
      readonly name: "UpdateSoundboard",
      readonly I: typeof UpdateSoundboardReq,
      readonly O: typeof UpdateSoundboardRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DeleteSondboard deletes a soundboard's metadata from the soundboard table.
     *
     * @generated from rpc api.v1alpha1.soundboard.Soundboard.DeleteSoundboard
     */
    readonly deleteSoundboard: {
      readonly name: "DeleteSoundboard",
      readonly I: typeof DeleteSoundboardReq,
      readonly O: typeof DeleteSoundboardRes,
      readonly kind: MethodKind.Unary,
    },
  }
};

