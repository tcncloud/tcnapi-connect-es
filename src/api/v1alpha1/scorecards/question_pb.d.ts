// @generated by protoc-gen-es v1.3.0 with parameter "target=js+dts"
// @generated from file api/v1alpha1/scorecards/question.proto (package api.v1alpha1.scorecards, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, FieldMask, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Question } from "../../commons/scorecards_pb.js";

/**
 * CreateQuestionRequest is the request to create a new question in the library.
 *
 * @generated from message api.v1alpha1.scorecards.CreateQuestionRequest
 */
export declare class CreateQuestionRequest extends Message<CreateQuestionRequest> {
  /**
   * @generated from field: api.commons.Question question = 1;
   */
  question?: Question;

  constructor(data?: PartialMessage<CreateQuestionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.CreateQuestionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateQuestionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateQuestionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateQuestionRequest;

  static equals(a: CreateQuestionRequest | PlainMessage<CreateQuestionRequest> | undefined, b: CreateQuestionRequest | PlainMessage<CreateQuestionRequest> | undefined): boolean;
}

/**
 * CreateQuestionResponse contains the question that was created.
 *
 * @generated from message api.v1alpha1.scorecards.CreateQuestionResponse
 */
export declare class CreateQuestionResponse extends Message<CreateQuestionResponse> {
  /**
   * @generated from field: api.commons.Question question = 1;
   */
  question?: Question;

  constructor(data?: PartialMessage<CreateQuestionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.CreateQuestionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateQuestionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateQuestionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateQuestionResponse;

  static equals(a: CreateQuestionResponse | PlainMessage<CreateQuestionResponse> | undefined, b: CreateQuestionResponse | PlainMessage<CreateQuestionResponse> | undefined): boolean;
}

/**
 * ListQuestionsRequest is the request to list questions by some criteria.
 *
 * @generated from message api.v1alpha1.scorecards.ListQuestionsRequest
 */
export declare class ListQuestionsRequest extends Message<ListQuestionsRequest> {
  /**
   * TODO: Consider more flexible message type(s)
   *
   * Optional.
   *
   * @generated from field: repeated string author_ids = 2;
   */
  authorIds: string[];

  /**
   * Optional.
   *
   * @generated from field: repeated int64 category_ids = 3;
   */
  categoryIds: bigint[];

  constructor(data?: PartialMessage<ListQuestionsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.ListQuestionsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListQuestionsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListQuestionsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListQuestionsRequest;

  static equals(a: ListQuestionsRequest | PlainMessage<ListQuestionsRequest> | undefined, b: ListQuestionsRequest | PlainMessage<ListQuestionsRequest> | undefined): boolean;
}

/**
 * ListQuestionsResponse contains a list of questions.
 *
 * @generated from message api.v1alpha1.scorecards.ListQuestionsResponse
 */
export declare class ListQuestionsResponse extends Message<ListQuestionsResponse> {
  /**
   * @generated from field: repeated api.commons.Question questions = 1;
   */
  questions: Question[];

  constructor(data?: PartialMessage<ListQuestionsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.ListQuestionsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListQuestionsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListQuestionsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListQuestionsResponse;

  static equals(a: ListQuestionsResponse | PlainMessage<ListQuestionsResponse> | undefined, b: ListQuestionsResponse | PlainMessage<ListQuestionsResponse> | undefined): boolean;
}

/**
 * UpdateQuestionRequest is the request to update question by id.
 *
 * @generated from message api.v1alpha1.scorecards.UpdateQuestionRequest
 */
export declare class UpdateQuestionRequest extends Message<UpdateQuestionRequest> {
  /**
   * Required.
   *
   * @generated from field: api.commons.Question question = 1;
   */
  question?: Question;

  /**
   * Required. Valid paths: [question, description].
   * To update Categories, use *Category and *QuestionCategory methods.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateQuestionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.UpdateQuestionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateQuestionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateQuestionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateQuestionRequest;

  static equals(a: UpdateQuestionRequest | PlainMessage<UpdateQuestionRequest> | undefined, b: UpdateQuestionRequest | PlainMessage<UpdateQuestionRequest> | undefined): boolean;
}

/**
 * UpdateQuestionResponse contains the updated question.
 *
 * @generated from message api.v1alpha1.scorecards.UpdateQuestionResponse
 */
export declare class UpdateQuestionResponse extends Message<UpdateQuestionResponse> {
  /**
   * @generated from field: api.commons.Question question = 1;
   */
  question?: Question;

  constructor(data?: PartialMessage<UpdateQuestionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.UpdateQuestionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateQuestionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateQuestionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateQuestionResponse;

  static equals(a: UpdateQuestionResponse | PlainMessage<UpdateQuestionResponse> | undefined, b: UpdateQuestionResponse | PlainMessage<UpdateQuestionResponse> | undefined): boolean;
}

/**
 * DeleteQuestionRequest is the request to delete a question by id.
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionRequest
 */
export declare class DeleteQuestionRequest extends Message<DeleteQuestionRequest> {
  /**
   * Required.
   *
   * @generated from field: int64 question_id = 2;
   */
  questionId: bigint;

  constructor(data?: PartialMessage<DeleteQuestionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.DeleteQuestionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteQuestionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteQuestionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteQuestionRequest;

  static equals(a: DeleteQuestionRequest | PlainMessage<DeleteQuestionRequest> | undefined, b: DeleteQuestionRequest | PlainMessage<DeleteQuestionRequest> | undefined): boolean;
}

/**
 * DeleteQuestionResponse returns the deleted question.
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionResponse
 */
export declare class DeleteQuestionResponse extends Message<DeleteQuestionResponse> {
  /**
   * @generated from field: api.commons.Question question = 1;
   */
  question?: Question;

  constructor(data?: PartialMessage<DeleteQuestionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.DeleteQuestionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteQuestionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteQuestionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteQuestionResponse;

  static equals(a: DeleteQuestionResponse | PlainMessage<DeleteQuestionResponse> | undefined, b: DeleteQuestionResponse | PlainMessage<DeleteQuestionResponse> | undefined): boolean;
}

/**
 * GetQuestionRequest is the request to get a question by id.
 * Must have one of either question_id or question
 *
 * @generated from message api.v1alpha1.scorecards.GetQuestionRequest
 */
export declare class GetQuestionRequest extends Message<GetQuestionRequest> {
  /**
   * Optional.
   *
   * @generated from field: int64 question_id = 2;
   */
  questionId: bigint;

  /**
   * Optional
   *
   * @generated from field: string question = 3;
   */
  question: string;

  constructor(data?: PartialMessage<GetQuestionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.GetQuestionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQuestionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQuestionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQuestionRequest;

  static equals(a: GetQuestionRequest | PlainMessage<GetQuestionRequest> | undefined, b: GetQuestionRequest | PlainMessage<GetQuestionRequest> | undefined): boolean;
}

/**
 * GetQuestionResponse contains a question.
 *
 * @generated from message api.v1alpha1.scorecards.GetQuestionResponse
 */
export declare class GetQuestionResponse extends Message<GetQuestionResponse> {
  /**
   * @generated from field: api.commons.Question question = 1;
   */
  question?: Question;

  constructor(data?: PartialMessage<GetQuestionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.GetQuestionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQuestionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQuestionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQuestionResponse;

  static equals(a: GetQuestionResponse | PlainMessage<GetQuestionResponse> | undefined, b: GetQuestionResponse | PlainMessage<GetQuestionResponse> | undefined): boolean;
}

/**
 * CreateQuestionCategoryRequest is request to link a scorecard question and category
 *
 * @generated from message api.v1alpha1.scorecards.CreateQuestionCategoryRequest
 */
export declare class CreateQuestionCategoryRequest extends Message<CreateQuestionCategoryRequest> {
  /**
   * All Fields Required
   *
   * @generated from field: int64 question_id = 2;
   */
  questionId: bigint;

  /**
   * @generated from field: int64 category_id = 3;
   */
  categoryId: bigint;

  constructor(data?: PartialMessage<CreateQuestionCategoryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.CreateQuestionCategoryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateQuestionCategoryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateQuestionCategoryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateQuestionCategoryRequest;

  static equals(a: CreateQuestionCategoryRequest | PlainMessage<CreateQuestionCategoryRequest> | undefined, b: CreateQuestionCategoryRequest | PlainMessage<CreateQuestionCategoryRequest> | undefined): boolean;
}

/**
 * CreateQuestionCategoryResponse returns the updated question
 *
 * @generated from message api.v1alpha1.scorecards.CreateQuestionCategoryResponse
 */
export declare class CreateQuestionCategoryResponse extends Message<CreateQuestionCategoryResponse> {
  /**
   * @generated from field: int64 question_id = 2;
   */
  questionId: bigint;

  /**
   * @generated from field: int64 category_id = 3;
   */
  categoryId: bigint;

  /**
   * @generated from field: int64 question_category_id = 4;
   */
  questionCategoryId: bigint;

  constructor(data?: PartialMessage<CreateQuestionCategoryResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.CreateQuestionCategoryResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateQuestionCategoryResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateQuestionCategoryResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateQuestionCategoryResponse;

  static equals(a: CreateQuestionCategoryResponse | PlainMessage<CreateQuestionCategoryResponse> | undefined, b: CreateQuestionCategoryResponse | PlainMessage<CreateQuestionCategoryResponse> | undefined): boolean;
}

/**
 * DeleteQuestionCategoryRequest deletes link between a scorecard question and category
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionCategoryRequest
 */
export declare class DeleteQuestionCategoryRequest extends Message<DeleteQuestionCategoryRequest> {
  /**
   * @generated from oneof api.v1alpha1.scorecards.DeleteQuestionCategoryRequest.where
   */
  where: {
    /**
     * Required if not BothIds
     *
     * @generated from field: int64 question_category_id = 2;
     */
    value: bigint;
    case: "questionCategoryId";
  } | {
    /**
     * Required if not question_category_id
     *
     * @generated from field: api.v1alpha1.scorecards.DeleteQuestionCategoryRequest.BothIds both_ids = 3;
     */
    value: DeleteQuestionCategoryRequest_BothIds;
    case: "bothIds";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<DeleteQuestionCategoryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.DeleteQuestionCategoryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteQuestionCategoryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteQuestionCategoryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteQuestionCategoryRequest;

  static equals(a: DeleteQuestionCategoryRequest | PlainMessage<DeleteQuestionCategoryRequest> | undefined, b: DeleteQuestionCategoryRequest | PlainMessage<DeleteQuestionCategoryRequest> | undefined): boolean;
}

/**
 * BothIds is question_id and category_id in a link
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionCategoryRequest.BothIds
 */
export declare class DeleteQuestionCategoryRequest_BothIds extends Message<DeleteQuestionCategoryRequest_BothIds> {
  /**
   * question_id of link
   *
   * @generated from field: int64 question_id = 1;
   */
  questionId: bigint;

  /**
   * category_id of link
   *
   * @generated from field: int64 category_id = 2;
   */
  categoryId: bigint;

  constructor(data?: PartialMessage<DeleteQuestionCategoryRequest_BothIds>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.DeleteQuestionCategoryRequest.BothIds";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteQuestionCategoryRequest_BothIds;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteQuestionCategoryRequest_BothIds;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteQuestionCategoryRequest_BothIds;

  static equals(a: DeleteQuestionCategoryRequest_BothIds | PlainMessage<DeleteQuestionCategoryRequest_BothIds> | undefined, b: DeleteQuestionCategoryRequest_BothIds | PlainMessage<DeleteQuestionCategoryRequest_BothIds> | undefined): boolean;
}

/**
 * DeleteQuestionCategoryResponse returns the updated question
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionCategoryResponse
 */
export declare class DeleteQuestionCategoryResponse extends Message<DeleteQuestionCategoryResponse> {
  /**
   * question id of deleted link
   *
   * @generated from field: int64 question_id = 2;
   */
  questionId: bigint;

  /**
   *  category id of deleted link
   *
   * @generated from field: int64 category_id = 3;
   */
  categoryId: bigint;

  /**
   * question category id of deleted link
   *
   * @generated from field: int64 question_category_id = 4;
   */
  questionCategoryId: bigint;

  constructor(data?: PartialMessage<DeleteQuestionCategoryResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.DeleteQuestionCategoryResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteQuestionCategoryResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteQuestionCategoryResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteQuestionCategoryResponse;

  static equals(a: DeleteQuestionCategoryResponse | PlainMessage<DeleteQuestionCategoryResponse> | undefined, b: DeleteQuestionCategoryResponse | PlainMessage<DeleteQuestionCategoryResponse> | undefined): boolean;
}

/**
 * BulkCreateQuestionsRequest creates questions from a given scorecard
 *
 * @generated from message api.v1alpha1.scorecards.BulkCreateQuestionsRequest
 */
export declare class BulkCreateQuestionsRequest extends Message<BulkCreateQuestionsRequest> {
  /**
   * Required - scorecard id of scorecard to create questions from.
   *
   * @generated from field: int64 scorecard_id = 3;
   */
  scorecardId: bigint;

  /**
   * Whether to use default scorecard.
   *
   * @generated from field: bool use_default = 4;
   */
  useDefault: boolean;

  constructor(data?: PartialMessage<BulkCreateQuestionsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.BulkCreateQuestionsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BulkCreateQuestionsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BulkCreateQuestionsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BulkCreateQuestionsRequest;

  static equals(a: BulkCreateQuestionsRequest | PlainMessage<BulkCreateQuestionsRequest> | undefined, b: BulkCreateQuestionsRequest | PlainMessage<BulkCreateQuestionsRequest> | undefined): boolean;
}

/**
 * BulkCreateQuestionsResponse returns the created questions
 *
 * @generated from message api.v1alpha1.scorecards.BulkCreateQuestionsResponse
 */
export declare class BulkCreateQuestionsResponse extends Message<BulkCreateQuestionsResponse> {
  /**
   * Created questions.
   *
   * @generated from field: repeated api.commons.Question questions = 1;
   */
  questions: Question[];

  constructor(data?: PartialMessage<BulkCreateQuestionsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.v1alpha1.scorecards.BulkCreateQuestionsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BulkCreateQuestionsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BulkCreateQuestionsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BulkCreateQuestionsResponse;

  static equals(a: BulkCreateQuestionsResponse | PlainMessage<BulkCreateQuestionsResponse> | undefined, b: BulkCreateQuestionsResponse | PlainMessage<BulkCreateQuestionsResponse> | undefined): boolean;
}

