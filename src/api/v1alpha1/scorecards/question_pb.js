// @generated by protoc-gen-es v1.4.1 with parameter "target=js+dts"
// @generated from file api/v1alpha1/scorecards/question.proto (package api.v1alpha1.scorecards, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { FieldMask, proto3 } from "@bufbuild/protobuf";
import { Question } from "../../commons/scorecards_pb.js";

/**
 * CreateQuestionRequest is the request to create a new question in the library.
 *
 * @generated from message api.v1alpha1.scorecards.CreateQuestionRequest
 */
export const CreateQuestionRequest = proto3.makeMessageType(
  "api.v1alpha1.scorecards.CreateQuestionRequest",
  () => [
    { no: 1, name: "question", kind: "message", T: Question },
  ],
);

/**
 * CreateQuestionResponse contains the question that was created.
 *
 * @generated from message api.v1alpha1.scorecards.CreateQuestionResponse
 */
export const CreateQuestionResponse = proto3.makeMessageType(
  "api.v1alpha1.scorecards.CreateQuestionResponse",
  () => [
    { no: 1, name: "question", kind: "message", T: Question },
  ],
);

/**
 * ListQuestionsRequest is the request to list questions by some criteria.
 *
 * @generated from message api.v1alpha1.scorecards.ListQuestionsRequest
 */
export const ListQuestionsRequest = proto3.makeMessageType(
  "api.v1alpha1.scorecards.ListQuestionsRequest",
  () => [
    { no: 2, name: "author_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "category_ids", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ],
);

/**
 * ListQuestionsResponse contains a list of questions.
 *
 * @generated from message api.v1alpha1.scorecards.ListQuestionsResponse
 */
export const ListQuestionsResponse = proto3.makeMessageType(
  "api.v1alpha1.scorecards.ListQuestionsResponse",
  () => [
    { no: 1, name: "questions", kind: "message", T: Question, repeated: true },
  ],
);

/**
 * UpdateQuestionRequest is the request to update question by id.
 *
 * @generated from message api.v1alpha1.scorecards.UpdateQuestionRequest
 */
export const UpdateQuestionRequest = proto3.makeMessageType(
  "api.v1alpha1.scorecards.UpdateQuestionRequest",
  () => [
    { no: 1, name: "question", kind: "message", T: Question },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ],
);

/**
 * UpdateQuestionResponse contains the updated question.
 *
 * @generated from message api.v1alpha1.scorecards.UpdateQuestionResponse
 */
export const UpdateQuestionResponse = proto3.makeMessageType(
  "api.v1alpha1.scorecards.UpdateQuestionResponse",
  () => [
    { no: 1, name: "question", kind: "message", T: Question },
  ],
);

/**
 * DeleteQuestionRequest is the request to delete a question by id.
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionRequest
 */
export const DeleteQuestionRequest = proto3.makeMessageType(
  "api.v1alpha1.scorecards.DeleteQuestionRequest",
  () => [
    { no: 2, name: "question_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * DeleteQuestionResponse returns the deleted question.
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionResponse
 */
export const DeleteQuestionResponse = proto3.makeMessageType(
  "api.v1alpha1.scorecards.DeleteQuestionResponse",
  () => [
    { no: 1, name: "question", kind: "message", T: Question },
  ],
);

/**
 * GetQuestionRequest is the request to get a question by id.
 * Must have one of either question_id or question
 *
 * @generated from message api.v1alpha1.scorecards.GetQuestionRequest
 */
export const GetQuestionRequest = proto3.makeMessageType(
  "api.v1alpha1.scorecards.GetQuestionRequest",
  () => [
    { no: 2, name: "question_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "question", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * GetQuestionResponse contains a question.
 *
 * @generated from message api.v1alpha1.scorecards.GetQuestionResponse
 */
export const GetQuestionResponse = proto3.makeMessageType(
  "api.v1alpha1.scorecards.GetQuestionResponse",
  () => [
    { no: 1, name: "question", kind: "message", T: Question },
  ],
);

/**
 * CreateQuestionCategoryRequest is request to link a scorecard question and category
 *
 * @generated from message api.v1alpha1.scorecards.CreateQuestionCategoryRequest
 */
export const CreateQuestionCategoryRequest = proto3.makeMessageType(
  "api.v1alpha1.scorecards.CreateQuestionCategoryRequest",
  () => [
    { no: 2, name: "question_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "category_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * CreateQuestionCategoryResponse returns the updated question
 *
 * @generated from message api.v1alpha1.scorecards.CreateQuestionCategoryResponse
 */
export const CreateQuestionCategoryResponse = proto3.makeMessageType(
  "api.v1alpha1.scorecards.CreateQuestionCategoryResponse",
  () => [
    { no: 2, name: "question_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "category_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "question_category_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * DeleteQuestionCategoryRequest deletes link between a scorecard question and category
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionCategoryRequest
 */
export const DeleteQuestionCategoryRequest = proto3.makeMessageType(
  "api.v1alpha1.scorecards.DeleteQuestionCategoryRequest",
  () => [
    { no: 2, name: "question_category_id", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "where" },
    { no: 3, name: "both_ids", kind: "message", T: DeleteQuestionCategoryRequest_BothIds, oneof: "where" },
  ],
);

/**
 * BothIds is question_id and category_id in a link
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionCategoryRequest.BothIds
 */
export const DeleteQuestionCategoryRequest_BothIds = proto3.makeMessageType(
  "api.v1alpha1.scorecards.DeleteQuestionCategoryRequest.BothIds",
  () => [
    { no: 1, name: "question_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "category_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
  {localName: "DeleteQuestionCategoryRequest_BothIds"},
);

/**
 * DeleteQuestionCategoryResponse returns the updated question
 *
 * @generated from message api.v1alpha1.scorecards.DeleteQuestionCategoryResponse
 */
export const DeleteQuestionCategoryResponse = proto3.makeMessageType(
  "api.v1alpha1.scorecards.DeleteQuestionCategoryResponse",
  () => [
    { no: 2, name: "question_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "category_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "question_category_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * BulkCreateQuestionsRequest creates questions from a given scorecard
 *
 * @generated from message api.v1alpha1.scorecards.BulkCreateQuestionsRequest
 */
export const BulkCreateQuestionsRequest = proto3.makeMessageType(
  "api.v1alpha1.scorecards.BulkCreateQuestionsRequest",
  () => [
    { no: 3, name: "scorecard_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "use_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * BulkCreateQuestionsResponse returns the created questions
 *
 * @generated from message api.v1alpha1.scorecards.BulkCreateQuestionsResponse
 */
export const BulkCreateQuestionsResponse = proto3.makeMessageType(
  "api.v1alpha1.scorecards.BulkCreateQuestionsResponse",
  () => [
    { no: 1, name: "questions", kind: "message", T: Question, repeated: true },
  ],
);

