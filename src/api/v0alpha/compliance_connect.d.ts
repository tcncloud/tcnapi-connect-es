// @generated by protoc-gen-connect-es v0.10.1
// @generated from file api/v0alpha/compliance.proto (package api.v0alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddScrubListEntriesReq, AssignRuleSetReq, AssignRuleSetRes, AssignScenarioReq, CheckRuleSetReq, CheckRuleSetRes, Consent, ConsentProfile, ConsentTopic, CreateConsentProfileReq, CreateConsentProfileRes, CreateConsentReq, CreateConsentRes, CreateRuleSetReq, CreateScenarioReq, CreateScenarioRes, CreateScrubListReq, DeleteConsentReq, DeleteScenarioReq, DeleteScenarioRes, DeleteScrubListEntriesReq, DeleteScrubListReq, DisableConsentProfileReq, DisableRuleSetReq, DisableRuleSetRes, DisableScenarioReq, Empty as Empty$1, EnableConsentProfileReq, EnableRuleSetReq, EnableRuleSetRes, EnableScenarioReq, ExpireConsentReq, ExportScrubListReq, ExportScrubListRes, FieldNames, GetConsentByContentReq, GetConsentByContentRes, GetConsentByProfileAndContentReq, GetConsentByProfileAndContentRes, GetConsentProfileReq, GetConsentReq, GetConsentTopicReq, GetConsentUploadUrlReq, GetConsentUploadUrlRes, GetDefaultRulesReq, GetDefaultRulesRes, GetFieldNamesReq, GetResultDescriptionsReq, GetRuleSetByNameReq, GetRuleSetReq, GetScenarioReq, GetScenarioRes, GetScrubListReq, GetScrubListsReq, GetScrubListUploadUrlReq, GetScrubListUploadUrlRes, ListAllScenariosReq, ListAllScenariosRes, ListAssignedRuleSetsReq, ListAssignedRuleSetsRes, ListAssignedScenariosReq, ListAssignedScenariosRes, ListConsentProfilesReq, ListConsentProfilesRes, ListConsentTopicsReq, ListConsentTopicsRes, ListRuleSetsReq, ListRuleSetsRes, ListUnassignedScenariosReq, ListUnassignedScenariosRes, ProcessConsentListDeleteUploadReq, ProcessConsentUploadReq, ProcessOutboundCallReq, ProcessRes, ProcessScrubListDeleteUploadReq, ProcessScrubListUploadReq, PurgeScrubListReq, PurgeScrubListRes, RenameRuleSetReq, RenameRuleSetRes, RevokeConsentReq, RuleAutoCompleteReq, RuleAutoCompleteRes, RuleSet, RunAssignedScenariosReq, RunAssignedScenariosRes, ScrubList, ScrubListRes, ScrubListsRes, SearchConsentByContentReq, SearchConsentByContentRes, SearchScrubListReq, UnassignScenarioReq, UpdateConsentReq, UpdateConsentTopicReq, UpdateScenarioReq, UpdateScenarioRes, UpdateScrubEntryReq, UpdateScrubEntryRes } from "./compliance_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { Operation } from "../../google/longrunning/operations_pb.js";

/**
 * @generated from service api.v0alpha.Compliance
 */
export declare const Compliance: {
  readonly typeName: "api.v0alpha.Compliance",
  readonly methods: {
    /**
     * @generated from rpc api.v0alpha.Compliance.RuleAutoComplete
     */
    readonly ruleAutoComplete: {
      readonly name: "RuleAutoComplete",
      readonly I: typeof RuleAutoCompleteReq,
      readonly O: typeof RuleAutoCompleteRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.CheckRuleSet
     */
    readonly checkRuleSet: {
      readonly name: "CheckRuleSet",
      readonly I: typeof CheckRuleSetReq,
      readonly O: typeof CheckRuleSetRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.AssignRuleSet
     */
    readonly assignRuleSet: {
      readonly name: "AssignRuleSet",
      readonly I: typeof AssignRuleSetReq,
      readonly O: typeof AssignRuleSetRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.ListRuleSets
     */
    readonly listRuleSets: {
      readonly name: "ListRuleSets",
      readonly I: typeof ListRuleSetsReq,
      readonly O: typeof ListRuleSetsRes,
      readonly kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.GetRuleSet
     */
    readonly getRuleSet: {
      readonly name: "GetRuleSet",
      readonly I: typeof GetRuleSetReq,
      readonly O: typeof RuleSet,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.GetRuleSetByName
     */
    readonly getRuleSetByName: {
      readonly name: "GetRuleSetByName",
      readonly I: typeof GetRuleSetByNameReq,
      readonly O: typeof RuleSet,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.CreateRuleSet
     */
    readonly createRuleSet: {
      readonly name: "CreateRuleSet",
      readonly I: typeof CreateRuleSetReq,
      readonly O: typeof RuleSet,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.RenameRuleSet
     */
    readonly renameRuleSet: {
      readonly name: "RenameRuleSet",
      readonly I: typeof RenameRuleSetReq,
      readonly O: typeof RenameRuleSetRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.EnableRuleSet
     */
    readonly enableRuleSet: {
      readonly name: "EnableRuleSet",
      readonly I: typeof EnableRuleSetReq,
      readonly O: typeof EnableRuleSetRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.DisableRuleSet
     */
    readonly disableRuleSet: {
      readonly name: "DisableRuleSet",
      readonly I: typeof DisableRuleSetReq,
      readonly O: typeof DisableRuleSetRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.CreateScrubList
     */
    readonly createScrubList: {
      readonly name: "CreateScrubList",
      readonly I: typeof CreateScrubListReq,
      readonly O: typeof ScrubListRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add entries to an existing scrub list defined by AddScrubListEntriesReq message.
     * The method will return a ScrubListRes message that will
     * contain the results.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.AddScrubListEntries
     */
    readonly addScrubListEntries: {
      readonly name: "AddScrubListEntries",
      readonly I: typeof AddScrubListEntriesReq,
      readonly O: typeof ScrubListRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update scrub list entry defined by UpdateScrubEntryReq message.
     * The method will update a scrub list entry with the specified fields
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.UpdateScrubEntry
     */
    readonly updateScrubEntry: {
      readonly name: "UpdateScrubEntry",
      readonly I: typeof UpdateScrubEntryReq,
      readonly O: typeof UpdateScrubEntryRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.DeleteScrubListEntries
     */
    readonly deleteScrubListEntries: {
      readonly name: "DeleteScrubListEntries",
      readonly I: typeof DeleteScrubListEntriesReq,
      readonly O: typeof ScrubListRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.GetScrubList
     */
    readonly getScrubList: {
      readonly name: "GetScrubList",
      readonly I: typeof GetScrubListReq,
      readonly O: typeof ScrubListRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.DeleteScrubList
     */
    readonly deleteScrubList: {
      readonly name: "DeleteScrubList",
      readonly I: typeof DeleteScrubListReq,
      readonly O: typeof ScrubListRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.GetDefaultRules
     */
    readonly getDefaultRules: {
      readonly name: "GetDefaultRules",
      readonly I: typeof GetDefaultRulesReq,
      readonly O: typeof GetDefaultRulesRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.GetScrubLists
     */
    readonly getScrubLists: {
      readonly name: "GetScrubLists",
      readonly I: typeof GetScrubListsReq,
      readonly O: typeof ScrubListsRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.SearchScrubList
     */
    readonly searchScrubList: {
      readonly name: "SearchScrubList",
      readonly I: typeof SearchScrubListReq,
      readonly O: typeof ScrubList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.GetScrubListUploadUrl
     */
    readonly getScrubListUploadUrl: {
      readonly name: "GetScrubListUploadUrl",
      readonly I: typeof GetScrubListUploadUrlReq,
      readonly O: typeof GetScrubListUploadUrlRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.ProcessScrubListUpload
     */
    readonly processScrubListUpload: {
      readonly name: "ProcessScrubListUpload",
      readonly I: typeof ProcessScrubListUploadReq,
      readonly O: typeof Operation,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.ProcessScrubListDeleteUpload
     */
    readonly processScrubListDeleteUpload: {
      readonly name: "ProcessScrubListDeleteUpload",
      readonly I: typeof ProcessScrubListDeleteUploadReq,
      readonly O: typeof Operation,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Compliance.ExportScrubList
     */
    readonly exportScrubList: {
      readonly name: "ExportScrubList",
      readonly I: typeof ExportScrubListReq,
      readonly O: typeof ExportScrubListRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Purge entries from a scrub list defined by PurgeScrubListReq message.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.PurgeScrubList
     */
    readonly purgeScrubList: {
      readonly name: "PurgeScrubList",
      readonly I: typeof PurgeScrubListReq,
      readonly O: typeof PurgeScrubListRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Creates a new Scenario
     *
     * @generated from rpc api.v0alpha.Compliance.CreateScenario
     */
    readonly createScenario: {
      readonly name: "CreateScenario",
      readonly I: typeof CreateScenarioReq,
      readonly O: typeof CreateScenarioRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Gets one Scenario
     *
     * @generated from rpc api.v0alpha.Compliance.GetScenario
     */
    readonly getScenario: {
      readonly name: "GetScenario",
      readonly I: typeof GetScenarioReq,
      readonly O: typeof GetScenarioRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Updates a Scenario
     *
     * @generated from rpc api.v0alpha.Compliance.UpdateScenario
     */
    readonly updateScenario: {
      readonly name: "UpdateScenario",
      readonly I: typeof UpdateScenarioReq,
      readonly O: typeof UpdateScenarioRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Deletes a Scenario
     *
     * @generated from rpc api.v0alpha.Compliance.DeleteScenario
     */
    readonly deleteScenario: {
      readonly name: "DeleteScenario",
      readonly I: typeof DeleteScenarioReq,
      readonly O: typeof DeleteScenarioRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Run scenarios against ruleset
     *
     * @generated from rpc api.v0alpha.Compliance.RunAssignedScenarios
     */
    readonly runAssignedScenarios: {
      readonly name: "RunAssignedScenarios",
      readonly I: typeof RunAssignedScenariosReq,
      readonly O: typeof RunAssignedScenariosRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Lists all scenarios
     *
     * @generated from rpc api.v0alpha.Compliance.ListAllScenarios
     */
    readonly listAllScenarios: {
      readonly name: "ListAllScenarios",
      readonly I: typeof ListAllScenariosReq,
      readonly O: typeof ListAllScenariosRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * List currently unassigned scenarios available to be assigned to a given ruleset
     *
     * @generated from rpc api.v0alpha.Compliance.ListUnassignedScenarios
     */
    readonly listUnassignedScenarios: {
      readonly name: "ListUnassignedScenarios",
      readonly I: typeof ListUnassignedScenariosReq,
      readonly O: typeof ListUnassignedScenariosRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * List rule sets currently assigned to a given scenario
     *
     * @generated from rpc api.v0alpha.Compliance.ListAssignedRuleSets
     */
    readonly listAssignedRuleSets: {
      readonly name: "ListAssignedRuleSets",
      readonly I: typeof ListAssignedRuleSetsReq,
      readonly O: typeof ListAssignedRuleSetsRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * List scenarios currently assigned to a given ruleset
     *
     * @generated from rpc api.v0alpha.Compliance.ListAssignedScenarios
     */
    readonly listAssignedScenarios: {
      readonly name: "ListAssignedScenarios",
      readonly I: typeof ListAssignedScenariosReq,
      readonly O: typeof ListAssignedScenariosRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Assign a scenario to a given ruleset
     *
     * @generated from rpc api.v0alpha.Compliance.AssignScenario
     */
    readonly assignScenario: {
      readonly name: "AssignScenario",
      readonly I: typeof AssignScenarioReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Unassign a scenario from a given ruleset
     *
     * @generated from rpc api.v0alpha.Compliance.UnassignScenario
     */
    readonly unassignScenario: {
      readonly name: "UnassignScenario",
      readonly I: typeof UnassignScenarioReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Enable an scenario
     *
     * @generated from rpc api.v0alpha.Compliance.EnableScenario
     */
    readonly enableScenario: {
      readonly name: "EnableScenario",
      readonly I: typeof EnableScenarioReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Disable an scenario
     *
     * @generated from rpc api.v0alpha.Compliance.DisableScenario
     */
    readonly disableScenario: {
      readonly name: "DisableScenario",
      readonly I: typeof DisableScenarioReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Frequency data calls
     * This will get all available Meta Fields
     *
     * @generated from rpc api.v0alpha.Compliance.GetFieldNames
     */
    readonly getFieldNames: {
      readonly name: "GetFieldNames",
      readonly I: typeof GetFieldNamesReq,
      readonly O: typeof FieldNames,
      readonly kind: MethodKind.Unary,
    },
    /**
     * This will get all possible results (Answered, Answered Machine, Busy, etc.)
     *
     * @generated from rpc api.v0alpha.Compliance.GetResultDescriptions
     */
    readonly getResultDescriptions: {
      readonly name: "GetResultDescriptions",
      readonly I: typeof GetResultDescriptionsReq,
      readonly O: typeof FieldNames,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create/Record a consent profile defined by CreateConsentProfileReq
     * message.  The method will return a CreateConsentProfileRes message
     * that will contain the newly created consent_profile_id.
     * Required permissions:
     *      PERMISSION_COMPLIANCE_CONSENT
     *
     * @generated from rpc api.v0alpha.Compliance.CreateConsentProfile
     */
    readonly createConsentProfile: {
      readonly name: "CreateConsentProfile",
      readonly I: typeof CreateConsentProfileReq,
      readonly O: typeof CreateConsentProfileRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create/Record a consent defined by CreateConsentReq message.
     * The method will return a CreateConsentRes message that will
     * contain the newly created consent_id.
     * Required permissions:
     *      none
     *
     * @generated from rpc api.v0alpha.Compliance.CreateConsent
     */
    readonly createConsent: {
      readonly name: "CreateConsent",
      readonly I: typeof CreateConsentReq,
      readonly O: typeof CreateConsentRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Gets a consent profile defined by GetConsentProfileReq message
     * for the specified consent_profile_id and org_id.
     * The method will return a ConsentProfile message/entity.
     * Required permissions:
     *      PERMISSION_COMPLIANCE_CONSENT
     *
     * @generated from rpc api.v0alpha.Compliance.GetConsentProfile
     */
    readonly getConsentProfile: {
      readonly name: "GetConsentProfile",
      readonly I: typeof GetConsentProfileReq,
      readonly O: typeof ConsentProfile,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Gets a consent defined by GetConsentReq message
     * for the specified consent_id and org_id.
     * The method will return a Consent entity.
     * Required permissions:
     *      PERMISSION_COMPLIANCE_CONSENT
     *
     * @generated from rpc api.v0alpha.Compliance.GetConsent
     */
    readonly getConsent: {
      readonly name: "GetConsent",
      readonly I: typeof GetConsentReq,
      readonly O: typeof Consent,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Gets a consent defined by GetConsentByProfileAndContentReq message
     * for the specified consent_profile_id and content.
     * The method will return a GetConsentByProfileAndContentRes message/entity.
     * Required permissions:
     *      PERMISSION_COMPLIANCE_CONSENT
     *
     * @generated from rpc api.v0alpha.Compliance.GetConsentByProfileAndContent
     */
    readonly getConsentByProfileAndContent: {
      readonly name: "GetConsentByProfileAndContent",
      readonly I: typeof GetConsentByProfileAndContentReq,
      readonly O: typeof GetConsentByProfileAndContentRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Gets a consent defined by GetConsentByContentReq message
     * for the specified consent_profile_id and content and channel_type.
     * The method will return a GetConsentByContentRes message/entity.
     * Required permissions:
     *      PERMISSION_COMPLIANCE_CONSENT
     *
     * @generated from rpc api.v0alpha.Compliance.GetConsentByContent
     */
    readonly getConsentByContent: {
      readonly name: "GetConsentByContent",
      readonly I: typeof GetConsentByContentReq,
      readonly O: typeof GetConsentByContentRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Searches for a consent defined by SearchConsentByContentReq message
     * for the specified content.
     * The method will return a SearchConsentByContentRes message/entity.
     * Required permissions:
     *      PERMISSION_COMPLIANCE_CONSENT
     *
     * @generated from rpc api.v0alpha.Compliance.SearchConsentByContent
     */
    readonly searchConsentByContent: {
      readonly name: "SearchConsentByContent",
      readonly I: typeof SearchConsentByContentReq,
      readonly O: typeof SearchConsentByContentRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update a consent defined by UpdateConsentReq message for
     * the specified consent_id, and will update the following
     * consent fields:
     *    Content
     *    Recorded
     *    Revoked
     *    Expire
     *    ReferringUrl
     * The method will return a google.protobuf.Empty message.
     * Required permissions:
     *      PERMISSION_COMPLIANCE_CONSENT
     *
     * @generated from rpc api.v0alpha.Compliance.UpdateConsent
     */
    readonly updateConsent: {
      readonly name: "UpdateConsent",
      readonly I: typeof UpdateConsentReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Expire a consent defined by ExpireConsentReq message.
     * Set the expiration date for the specified consent_id field.
     * The method will return a google.protobuf.Empty message.
     * Required permissions:
     *      PERMISSION_COMPLIANCE_CONSENT
     *
     * @generated from rpc api.v0alpha.Compliance.ExpireConsent
     */
    readonly expireConsent: {
      readonly name: "ExpireConsent",
      readonly I: typeof ExpireConsentReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Revoke a consent defined by RevokeConsentReq message.
     * Set the revoked date for the specified consent_id and
     * consent_profile_id fields.
     * The method will return a google.protobuf.Empty message.
     * Required permissions:
     *      none
     *
     * @generated from rpc api.v0alpha.Compliance.RevokeConsent
     */
    readonly revokeConsent: {
      readonly name: "RevokeConsent",
      readonly I: typeof RevokeConsentReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Delete a consent defined by DeleteConsentReq message
     * The method will return a google.protobuf.Empty message
     * Required permissions:
     *      PERMISSION_COMPLIANCE_CONSENT
     *
     * @generated from rpc api.v0alpha.Compliance.DeleteConsent
     */
    readonly deleteConsent: {
      readonly name: "DeleteConsent",
      readonly I: typeof DeleteConsentReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Process a consent delete list defined by DeleteConsentReq message
     * The method will return a google.protobuf.Empty message
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.ProcessConsentListDeleteUpload
     */
    readonly processConsentListDeleteUpload: {
      readonly name: "ProcessConsentListDeleteUpload",
      readonly I: typeof ProcessConsentListDeleteUploadReq,
      readonly O: typeof Operation,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Enable a consent profile defined by EnableConsentProfileReq message.
     * Set the disabled field to false for the specified
     * consent_profile_id field.
     * The method will return a google.protobuf.Empty message.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.EnableConsentProfile
     */
    readonly enableConsentProfile: {
      readonly name: "EnableConsentProfile",
      readonly I: typeof EnableConsentProfileReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Disable a consent profile defined by DisableConsentProfileReq message.
     * Set the disabled field to true for the specified
     * consent_profile_id field.
     * The method will return a google.protobuf.Empty message.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.DisableConsentProfile
     */
    readonly disableConsentProfile: {
      readonly name: "DisableConsentProfile",
      readonly I: typeof DisableConsentProfileReq,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * List consent profiles defined by ListConsentProfilesReq message.
     * Gets all of the unique consent profiles.
     * The method will return a ListConsentProfilesRes message
     * containing consent_profile_id, profile_name, the number of consents
     * belonging to the profile, and disabled.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.ListConsentProfiles
     */
    readonly listConsentProfiles: {
      readonly name: "ListConsentProfiles",
      readonly I: typeof ListConsentProfilesReq,
      readonly O: typeof ListConsentProfilesRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Get consent upload url defined by GetConsentUploadUrlReq message.
     * The method will return a GetConsentUploadUrlRes messages
     * containing a url with which to upload an import file.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.GetConsentUploadUrl
     */
    readonly getConsentUploadUrl: {
      readonly name: "GetConsentUploadUrl",
      readonly I: typeof GetConsentUploadUrlReq,
      readonly O: typeof GetConsentUploadUrlRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Process consent upload defined by ProcessConsentUploadReq message.
     * The method will process an uploaded consent file.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.ProcessConsentUpload
     */
    readonly processConsentUpload: {
      readonly name: "ProcessConsentUpload",
      readonly I: typeof ProcessConsentUploadReq,
      readonly O: typeof Operation,
      readonly kind: MethodKind.Unary,
    },
    /**
     * List consent topics defined by ListConsentTopicsReq message.
     * Gets all of the unique consent topics.
     * The method will return a ListConsentTopicsRes message
     * containing topic, org_id, and deleted.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.ListConsentTopics
     */
    readonly listConsentTopics: {
      readonly name: "ListConsentTopics",
      readonly I: typeof ListConsentTopicsReq,
      readonly O: typeof ListConsentTopicsRes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Gets a consent topic defined by GetConsentTopicReq message
     * for the specified topic and org_id.
     * The method will return a ConsentTopic message/entity.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.GetConsentTopic
     */
    readonly getConsentTopic: {
      readonly name: "GetConsentTopic",
      readonly I: typeof GetConsentTopicReq,
      readonly O: typeof ConsentTopic,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a consent topic defined by ConsentTopic
     * message.  The method will return an Empty message.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.CreateConsentTopic
     */
    readonly createConsentTopic: {
      readonly name: "CreateConsentTopic",
      readonly I: typeof ConsentTopic,
      readonly O: typeof Empty$1,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Delete a consent topic defined by ConsentTopic message.
     * The method will return an Empty message.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.DeleteConsentTopic
     */
    readonly deleteConsentTopic: {
      readonly name: "DeleteConsentTopic",
      readonly I: typeof ConsentTopic,
      readonly O: typeof Empty$1,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update a consent topic defined by UpdateConsentTopicReq message.
     * The method will return an Empty message.
     * Required permissions:
     *      EXECUTE_DO_NOT_CALL_LIST
     *
     * @generated from rpc api.v0alpha.Compliance.UpdateConsentTopic
     */
    readonly updateConsentTopic: {
      readonly name: "UpdateConsentTopic",
      readonly I: typeof UpdateConsentTopicReq,
      readonly O: typeof Empty$1,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Process and Outbound Phone Number against a rule set.
     * The method will return a response indicating
     * if the call would be permited or not and the list
     * of rules checked against.
     * Required permissions:
     *      AGENT
     *
     * @generated from rpc api.v0alpha.Compliance.ProcessOutboundCall
     */
    readonly processOutboundCall: {
      readonly name: "ProcessOutboundCall",
      readonly I: typeof ProcessOutboundCallReq,
      readonly O: typeof ProcessRes,
      readonly kind: MethodKind.Unary,
    },
  }
};

