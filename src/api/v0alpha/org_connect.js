// @generated by protoc-gen-connect-es v0.8.6
// @generated from file api/v0alpha/org.proto (package api.v0alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AcceptLinkbackRecordingTermsRequest, AcceptLinkbackRecordingTermsResponse, AddLoginToUserRequest, AddLoginToUserResponse, AddOrgBillingOverrideRequest, AddOrgBillingOverrideResponse, AddPermissionToAccountOwnerPermissionGroupRequest, AddPermissionToAccountOwnerPermissionGroupResponse, AddPermissionToOrgDefaultGroupRequest, AddPermissionToOrgDefaultGroupResponse, AddUserRegionRequest, AddUserRegionResponse, AddUserSubscriptionRequest, AddUserSubscriptionResponse, AdminGetUserDetailsRequest, ArchiveOrganizationRequest, ArchiveOrganizationResponse, AssignAgentProfileGroupsRequest, AssignAgentProfileGroupsResponse, AssignUserPermissionGroupRequest, AssignUserPermissionGroupResponse, AssignUsersP3PermissionGroupRequest, AssignUsersP3PermissionGroupResponse, AssignUsersPermissionGroupRequest, AssignUsersPermissionGroupResponse, AssignUserToAccountOwnerPermissionGroupRequest, AssignUserToAccountOwnerPermissionGroupResponse, ClearEmailUnsubscribeAcknowledgementRequest, ClearEmailUnsubscribeAcknowledgementResponse, ConvertOrgToManualRequest, ConvertOrgToManualResponse, CopyQueueConfigReq, CopyQueueConfigRes, CreateAgentPauseCodeRequest, CreateAgentPauseCodeResponse, CreateAgentProfileGroupRequest, CreateAgentProfileGroupResponse, CreateAgentStatisticsTemplateRequest, CreateAgentStatisticsTemplateResponse, CreateAgentTriggerTemplateRequest, CreateAgentTriggerTemplateResponse, CreateAuthConnectionRequest, CreateAuthConnectionResponse, CreateClientInfoDisplayTemplateRequest, CreateClientInfoDisplayTemplateResponse, CreateCustomReportFilterRequest, CreateCustomReportFilterResponse, CreateDelegatedUserRequest, CreateDelegatedUserResponse, CreateP3PermissionGroupRequest, CreateP3PermissionGroupResponse, CreatePermissionGroupRequest, CreatePermissionGroupResponse, CreateQueueConfigReq, CreateQueueConfigRes, CreateUserRequest, CreateUserResponse, CreateWebLinkTemplateRequest, CreateWebLinkTemplateResponse, DeleteAgentPauseCodeRequest, DeleteAgentPauseCodeResponse, DeleteAgentProfileGroupRequest, DeleteAgentProfileGroupResponse, DeleteAgentStatisticsTemplateRequest, DeleteAgentStatisticsTemplateResponse, DeleteAgentTriggerTemplateRequest, DeleteAgentTriggerTemplateResponse, DeleteAuthConnectionRequest, DeleteAuthConnectionResponse, DeleteClientInfoDisplayTemplateRequest, DeleteClientInfoDisplayTemplateResponse, DeleteCustomReportFilterRequest, DeleteCustomReportFilterResponse, DeleteP3PermissionGroupRequest, DeleteP3PermissionGroupResponse, DeletePermissionGroupRequest, DeletePermissionGroupResponse, DeleteQueueConfigReq, DeleteQueueConfigRes, DeleteWebLinkTemplateRequest, DeleteWebLinkTemplateResponse, EditAgentQuickViewPreferencesRequest, EditAgentQuickViewPreferencesResponse, EditBackofficeThemePreferenceRequest, EditBackofficeThemePreferenceResponse, GetAdminClientPreferencesRequest, GetAdminClientPreferencesResponse, GetAgentPreferencesRequest, GetAgentPreferencesResponse, GetAgentProfileGroupRequest, GetAgentProfileGroupResponse, GetAgentQuickViewPreferencesRequest, GetAgentQuickViewPreferencesResponse, GetAgentSettingsRequest, GetAgentSettingsResponse, GetAgentTriggerTemplateRequest, GetAgentTriggerTemplateResponse, GetAgentUsersRequest, GetAgentUsersResponse, GetAllQueueConfigSoundsReq, GetAllQueueConfigSoundsRes, GetAuthConnectionSettingsRequest, GetAuthConnectionSettingsResponse, GetAuthenticationPreferencesRequest, GetAuthenticationPreferencesResponse, GetBackofficeThemePreferenceRequest, GetBackofficeThemePreferenceResponse, GetBroadcastPreferencesRequest, GetBroadcastPreferencesResponse, GetBusinessPreferencesRequest, GetBusinessPreferencesResponse, GetClientInfoDisplayTemplateRequest, GetClientInfoDisplayTemplateResponse, GetCompliancePreferencesRequest, GetCompliancePreferencesResponse, GetContactPreferencesRequest, GetContactPreferencesResponse, GetCountriesListRequest, GetCountriesListResponse, GetDashboardGeneralPreferencesRequest, GetDashboardGeneralPreferencesResponse, GetDashboardQueuePreferencesRequest, GetDashboardQueuePreferencesResponse, GetEmailSmsPreferencesRequest, GetEmailSmsPreferencesResponse, GetEndOfDayPreferencesRequest, GetEndOfDayPreferencesResponse, GetFilterPreferencesRequest, GetFilterPreferencesResponse, GetOrganizationPreferencesRequest, GetOrganizationPreferencesResponse, GetOrganizationProfileByIdRequest, GetOrganizationProfileRequest, GetOrganizationProfileResponse, GetOrgBillingSettingsRequest, GetOrgBillingSettingsResponse, GetOrgDefaultSuperUserGroupRequest, GetOrgDefaultSuperUserGroupResponse, GetP3OwningOrgRequest, GetP3OwningOrgResponse, GetPermissionsRequest, GetPermissionsResponse, GetPhonePreferencesRequest, GetPhonePreferencesResponse, GetQueueConfigReq, GetQueueConfigRes, GetQueueConfigSoundReq, GetQueueConfigSoundRes, GetRecordingPreferencesRequest, GetRecordingPreferencesResponse, GetRegionsRequest, GetRegionsResponse, GetSchedulePreferencesRequest, GetSchedulePreferencesResponse, GetScorecardsPreferencesRequest, GetScorecardsPreferencesResponse, GetSystemDefaultBillingRatesRequest, GetSystemDefaultBillingRatesResponse, GetSystemEnvironmentDetailsRequest, GetSystemEnvironmentDetailsResponse, GetTempUserTokenReq, GetTempUserTokenRes, GetUserBlockedRequest, GetUserBlockedResponse, GetUserDetailsRequest, GetUserDirectoryRequest, GetUserDirectoryResponse, GetUserEmailVerifiedRequest, GetUserEmailVerifiedResponse, GetUserPasswordResetLinkRequest, GetUserPasswordResetLinkResponse, GetUserSubscriptionRequest, GetUserSubscriptionResponse, GetVoiceAnalyticsPreferencesRequest, GetVoiceAnalyticsPreferencesResponse, GetWebhookPreferencesRequest, GetWebhookPreferencesResponse, GetWebLinkTemplateRequest, GetWebLinkTemplateResponse, InitDefaultPermissionGroupsRequest, InitDefaultPermissionGroupsResponse, LinkbackUpdateBroadcastTemplatesRequest, LinkbackUpdateBroadcastTemplatesResponse, ListAgentPauseCodesRequest, ListAgentPauseCodesResponse, ListAgentProfileGroupsRequest, ListAgentProfileGroupsResponse, ListAgentResponseGroupsRequest, ListAgentResponseGroupsResponse, ListAgentStatisticsTemplatesRequest, ListAgentStatisticsTemplatesResponse, ListAgentTriggerTemplatesRequest, ListAgentTriggerTemplatesResponse, ListArchivedOrganizationsRequest, ListArchivedOrganizationsResponse, ListClientInfoDisplayTemplatesRequest, ListClientInfoDisplayTemplatesResponse, ListCustomReportFiltersRequest, ListCustomReportFiltersResponse, ListLastTemplateElementsRequest, ListLastTemplateElementsResponse, ListLoginHistoryRequest, ListLoginHistoryResponse, ListOrganizationDescriptionsRequest, ListOrganizationDescriptionsResponse, ListOrganizationUserDescriptionsRequest, ListOrganizationUserDescriptionsResponse, ListOrgSubscriptionsRequest, ListOrgSubscriptionsResponse, ListOwnedOrgsRequest, ListOwnedOrgsResponse, ListOwnedUsersRequest, ListOwnedUsersResponse, ListP3PermissionGroupsRequest, ListP3PermissionGroupsResponse, ListP3UnMigratedUsersRequest, ListP3UnMigratedUsersResponse, ListPermissionGroupsRequest, ListPermissionGroupsResponse, ListQueueConfigsReq, ListQueueConfigsRes, ListRegionalOrganizationsRequest, ListRegionalOrganizationsResponse, ListUserDescriptionsRequest, ListUserDescriptionsResponse, ListUserSubscriptionsRequest, ListUserSubscriptionsResponse, ListWebLinkTemplatesRequest, ListWebLinkTemplatesResponse, ManualUserEmailVerificationRequest, ManualUserEmailVerificationResponse, MigrateP3UserRequest, MigrateP3UserResponse, RecordEmailUnsubscribeAcknowledgementRequest, RecordEmailUnsubscribeAcknowledgementResponse, RegisterOrganizationRequest, RegisterOrganizationResponse, RemoveLoginStrikesRequest, RemoveLoginStrikesResponse, RemoveOrgBillingOverrideRequest, RemoveOrgBillingOverrideResponse, RemovePermissionFromOrgDefaultGroupRequest, RemovePermissionFromOrgDefaultGroupResponse, RemoveUserLoginStrikesRequest, RemoveUserLoginStrikesResponse, RemoveUserRegionRequest, RemoveUserRegionResponse, RemoveUserSubscriptionRequest, RemoveUserSubscriptionResponse, ResetUserRequirePasswordResetRequest, ResetUserRequirePasswordResetResponse, RevokeAccountOwnerPermissionFromUserRequest, RevokeAccountOwnerPermissionFromUserResponse, RevokePermissionToAccountOwnerPermissionGroupRequest, RevokePermissionToAccountOwnerPermissionGroupResponse, RevokeUserPermissionGroupRequest, RevokeUserPermissionGroupResponse, RevokeUsersP3PermissionGroupRequest, RevokeUsersP3PermissionGroupResponse, RevokeUsersPermissionGroupRequest, RevokeUsersPermissionGroupResponse, SendUserVerificationEmailRequest, SendUserVerificationEmailResponse, SetAllQueueConfigSoundsFromSourceReq, SetAllQueueConfigSoundsFromSourceRes, SetOrgBillingSettingsRequest, SetOrgBillingSettingsResponse, SetQueueConfigSoundReq, SetQueueConfigSoundRes, UnArchiveOrganizationRequest, UnArchiveOrganizationResponse, UnblockUserRequest, UnblockUserResponse, UpdateAdminClientPreferencesRequest, UpdateAdminClientPreferencesResponse, UpdateAgentPauseCodeRequest, UpdateAgentPauseCodeResponse, UpdateAgentPreferencesRequest, UpdateAgentPreferencesResponse, UpdateAgentProfileGroupRequest, UpdateAgentProfileGroupResponse, UpdateAgentStatisticsTemplateRequest, UpdateAgentStatisticsTemplateResponse, UpdateAgentTriggerTemplateRequest, UpdateAgentTriggerTemplateResponse, UpdateAuthConnectionSettingsRequest, UpdateAuthConnectionSettingsResponse, UpdateAuthenticationPreferencesRequest, UpdateAuthenticationPreferencesResponse, UpdateBroadcastPreferencesRequest, UpdateBroadcastPreferencesResponse, UpdateBulkUsersDisabledRequest, UpdateBulkUsersDisabledResponse, UpdateBusinessPreferencesRequest, UpdateBusinessPreferencesResponse, UpdateClientInfoDisplayTemplateRequest, UpdateClientInfoDisplayTemplateResponse, UpdateCompliancePreferencesRequest, UpdateCompliancePreferencesResponse, UpdateContactPreferencesRequest, UpdateContactPreferencesResponse, UpdateCustomReportFilterRequest, UpdateCustomReportFilterResponse, UpdateDashboardGeneralPreferencesRequest, UpdateDashboardGeneralPreferencesResponse, UpdateDashboardQueuePreferencesRequest, UpdateDashboardQueuePreferencesResponse, UpdateEmailSmsPreferencesRequest, UpdateEmailSmsPreferencesResponse, UpdateEndOfDayPreferencesRequest, UpdateEndOfDayPreferencesResponse, UpdateFilterPreferencesRequest, UpdateFilterPreferencesResponse, UpdateOrganizationPreferencesRequest, UpdateOrganizationPreferencesResponse, UpdateOrganizationRequest, UpdateOrganizationResponse, UpdateP3OwningOrgRequest, UpdateP3OwningOrgResponse, UpdateP3PermissionGroupRequest, UpdateP3PermissionGroupResponse, UpdateP3UserNameRequest, UpdateP3UserNameResponse, UpdateP3UserSidsRequest, UpdateP3UserSidsResponse, UpdatePermissionGroupRequest, UpdatePermissionGroupResponse, UpdatePhonePreferencesRequest, UpdatePhonePreferencesResponse, UpdateQueueConfigReq, UpdateQueueConfigRes, UpdateRecordingPreferencesRequest, UpdateRecordingPreferencesResponse, UpdateSchedulePreferencesRequest, UpdateSchedulePreferencesResponse, UpdateScorecardsPreferencesRequest, UpdateScorecardsPreferencesResponse, UpdateUserDisabledRequest, UpdateUserDisabledResponse, UpdateUserNeoPermissionGroupsRequest, UpdateUserNeoPermissionGroupsResponse, UpdateUserPasswordRequest, UpdateUserPasswordResponse, UpdateUserRequest, UpdateUserResponse, UpdateUserSubscriptionRequest, UpdateUserSubscriptionResponse, UpdateVoiceAnalyticsPreferencesRequest, UpdateVoiceAnalyticsPreferencesResponse, UpdateWebhookPreferencesRequest, UpdateWebhookPreferencesResponse, UpdateWebLinkTemplateRequest, UpdateWebLinkTemplateResponse, UserDetails } from "./org_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service api.v0alpha.Org
 */
export const Org = {
  typeName: "api.v0alpha.Org",
  methods: {
    /**
     * Registers a new organization
     *
     * @generated from rpc api.v0alpha.Org.RegisterOrganization
     */
    registerOrganization: {
      name: "RegisterOrganization",
      I: RegisterOrganizationRequest,
      O: RegisterOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Converts a standard organiztion to a manual one.
     * WARNING: this process cannot be reversed.
     *
     * @generated from rpc api.v0alpha.Org.ConvertOrgToManual
     */
    convertOrgToManual: {
      name: "ConvertOrgToManual",
      I: ConvertOrgToManualRequest,
      O: ConvertOrgToManualResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates an organization
     *
     * @generated from rpc api.v0alpha.Org.UpdateOrganization
     */
    updateOrganization: {
      name: "UpdateOrganization",
      I: UpdateOrganizationRequest,
      O: UpdateOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Archives an organization. An archived organization effectively disappears, but isn't deleted.
     *
     * @generated from rpc api.v0alpha.Org.ArchiveOrganization
     */
    archiveOrganization: {
      name: "ArchiveOrganization",
      I: ArchiveOrganizationRequest,
      O: ArchiveOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restores an archived organization.
     *
     * @generated from rpc api.v0alpha.Org.UnArchiveOrganization
     */
    unArchiveOrganization: {
      name: "UnArchiveOrganization",
      I: UnArchiveOrganizationRequest,
      O: UnArchiveOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the list of organizations that have been archived.
     *
     * @generated from rpc api.v0alpha.Org.ListArchivedOrganizations
     */
    listArchivedOrganizations: {
      name: "ListArchivedOrganizations",
      I: ListArchivedOrganizationsRequest,
      O: ListArchivedOrganizationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.GetOrganizationProfile
     */
    getOrganizationProfile: {
      name: "GetOrganizationProfile",
      I: GetOrganizationProfileRequest,
      O: GetOrganizationProfileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.GetOrganizationProfileById
     */
    getOrganizationProfileById: {
      name: "GetOrganizationProfileById",
      I: GetOrganizationProfileByIdRequest,
      O: GetOrganizationProfileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.ListOrganizationDescriptions
     */
    listOrganizationDescriptions: {
      name: "ListOrganizationDescriptions",
      I: ListOrganizationDescriptionsRequest,
      O: ListOrganizationDescriptionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.ListRegionalOrganizations
     */
    listRegionalOrganizations: {
      name: "ListRegionalOrganizations",
      I: ListRegionalOrganizationsRequest,
      O: ListRegionalOrganizationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * update an organizations owning organization.
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.UpdateP3OwningOrg
     */
    updateP3OwningOrg: {
      name: "UpdateP3OwningOrg",
      I: UpdateP3OwningOrgRequest,
      O: UpdateP3OwningOrgResponse,
      kind: MethodKind.Unary,
    },
    /**
     * gets the owning organiztion for the given org
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.GetP3OwningOrg
     */
    getP3OwningOrg: {
      name: "GetP3OwningOrg",
      I: GetP3OwningOrgRequest,
      O: GetP3OwningOrgResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.ListOrganizationUserDescriptions
     */
    listOrganizationUserDescriptions: {
      name: "ListOrganizationUserDescriptions",
      I: ListOrganizationUserDescriptionsRequest,
      O: ListOrganizationUserDescriptionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.ListUserDescriptions
     */
    listUserDescriptions: {
      name: "ListUserDescriptions",
      I: ListUserDescriptionsRequest,
      O: ListUserDescriptionsResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc api.v0alpha.Org.GetUserDirectory
     */
    getUserDirectory: {
      name: "GetUserDirectory",
      I: GetUserDirectoryRequest,
      O: GetUserDirectoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRegions takes nothing in the request and returns a list of all region names
     *
     * @generated from rpc api.v0alpha.Org.GetRegions
     */
    getRegions: {
      name: "GetRegions",
      I: GetRegionsRequest,
      O: GetRegionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.GetUserDetails
     */
    getUserDetails: {
      name: "GetUserDetails",
      I: GetUserDetailsRequest,
      O: UserDetails,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.AdminGetUserDetails
     */
    adminGetUserDetails: {
      name: "AdminGetUserDetails",
      I: AdminGetUserDetailsRequest,
      O: UserDetails,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.GetAgentUsers
     */
    getAgentUsers: {
      name: "GetAgentUsers",
      I: GetAgentUsersRequest,
      O: GetAgentUsersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * This is transitionary api. It will be removed when user api is available.
     * GetAgentSettings gets some agent settings as defined by the GetAgentSettingsRequest.
     * Required Permissions:
     * AGENT
     *
     * @generated from rpc api.v0alpha.Org.GetAgentSettings
     */
    getAgentSettings: {
      name: "GetAgentSettings",
      I: GetAgentSettingsRequest,
      O: GetAgentSettingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAgentProfileGroup gets a single AgentProfileGroup by given ID
     * Required Permissions:
     * ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.GetAgentProfileGroup
     */
    getAgentProfileGroup: {
      name: "GetAgentProfileGroup",
      I: GetAgentProfileGroupRequest,
      O: GetAgentProfileGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
     * Required Permissions:
     * ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.UpdateAgentProfileGroup
     */
    updateAgentProfileGroup: {
      name: "UpdateAgentProfileGroup",
      I: UpdateAgentProfileGroupRequest,
      O: UpdateAgentProfileGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
     * Required Permissions:
     * ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.CreateAgentProfileGroup
     */
    createAgentProfileGroup: {
      name: "CreateAgentProfileGroup",
      I: CreateAgentProfileGroupRequest,
      O: CreateAgentProfileGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListAgentProfileGroups lists all AgentProfileGroups for a given org
     * Required Permissions:
     * ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.ListAgentProfileGroups
     */
    listAgentProfileGroups: {
      name: "ListAgentProfileGroups",
      I: ListAgentProfileGroupsRequest,
      O: ListAgentProfileGroupsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAgentProfileGroup deletes a single AgentProfileGroup by given ID. Can only delete if user is in same org as AgentProfileGroup
     * Required Permissions:
     * ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.DeleteAgentProfileGroup
     */
    deleteAgentProfileGroup: {
      name: "DeleteAgentProfileGroup",
      I: DeleteAgentProfileGroupRequest,
      O: DeleteAgentProfileGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AssignAgentProfileGroups bulk assigns a list of users to a given AgentProfileGroup
     * Required Permissions:
     * ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.AssignAgentProfileGroups
     */
    assignAgentProfileGroups: {
      name: "AssignAgentProfileGroups",
      I: AssignAgentProfileGroupsRequest,
      O: AssignAgentProfileGroupsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateUser updates a user as defined by the UpdateUserRequest.
     * Required Permissions:
     * USER_EDIT if the user_id is given on the request.
     * NONE (TODO: create & use new perm) if the user_id is NOT given.
     *  This will only the currently logged in user.
     *  Only some of the fields on the request message can be updated
     *  for the currently logged in user: time_zone, linkback_numbers,
     *  caller_ids, and default_app.
     *
     * @generated from rpc api.v0alpha.Org.UpdateUser
     */
    updateUser: {
      name: "UpdateUser",
      I: UpdateUserRequest,
      O: UpdateUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateUser creates a new user as defined by the CreateUserRequest
     * request message.
     * Required Permissions:
     * USER_CREATE, CUSTOMER_SUPPORT if adding to an org other than your own
     *
     * @generated from rpc api.v0alpha.Org.CreateUser
     */
    createUser: {
      name: "CreateUser",
      I: CreateUserRequest,
      O: CreateUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a delegated user. This should only be called by an auth0 action.
     *
     * @generated from rpc api.v0alpha.Org.CreateDelegatedUser
     */
    createDelegatedUser: {
      name: "CreateDelegatedUser",
      I: CreateDelegatedUserRequest,
      O: CreateDelegatedUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateUserPassword updates a users password to the
     * password given on the request message.
     * Required Permissions:
     * USER_EDIT if user_id was given on the request (Update another user's password)
     * USER_EDIT_PASSWORD if user_id is retrieved from token (Update your own password)
     *
     * @generated from rpc api.v0alpha.Org.UpdateUserPassword
     */
    updateUserPassword: {
      name: "UpdateUserPassword",
      I: UpdateUserPasswordRequest,
      O: UpdateUserPasswordResponse,
      kind: MethodKind.Unary,
    },
    /**
     * updates the users PasswordResetRequired field to false.
     * this should only be called by an auth0 action.
     *
     * @generated from rpc api.v0alpha.Org.ResetUserRequirePasswordReset
     */
    resetUserRequirePasswordReset: {
      name: "ResetUserRequirePasswordReset",
      I: ResetUserRequirePasswordResetRequest,
      O: ResetUserRequirePasswordResetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Generate a password reset link for a user.
     * Required Permissions:
     *  USER_EDIT_PASSWORD if user_id not given on request.
     *  USER_EDIT if user_id given on the request.
     *  CUSTOMER_SUPPORT if user_id & org_id given on request. User_id must be given if org_id is.
     *
     * @generated from rpc api.v0alpha.Org.GetUserPasswordResetLink
     */
    getUserPasswordResetLink: {
      name: "GetUserPasswordResetLink",
      I: GetUserPasswordResetLinkRequest,
      O: GetUserPasswordResetLinkResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns whether or not the given user's email is verified.
     * Required Permissions:
     *  USER_EDIT if org_id not given on request.
     *  CUSTOMER_SUPPORT if org_id given on request.
     *
     * @generated from rpc api.v0alpha.Org.GetUserEmailVerified
     */
    getUserEmailVerified: {
      name: "GetUserEmailVerified",
      I: GetUserEmailVerifiedRequest,
      O: GetUserEmailVerifiedResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Sends a verfication email to the given users email.
     * Required Permissions:
     *  USER_EDIT if org_id not given on request.
     *  CUSTOMER_SUPPORT if org_id given on request.
     *
     * @generated from rpc api.v0alpha.Org.SendUserVerificationEmail
     */
    sendUserVerificationEmail: {
      name: "SendUserVerificationEmail",
      I: SendUserVerificationEmailRequest,
      O: SendUserVerificationEmailResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Sets the given user's to verified without needing to send a verification email.
     * Required Permissions:
     *  USER_EDIT if org_id not given on request.
     *  CUSTOMER_SUPPORT if org_id given on request.
     *
     * @generated from rpc api.v0alpha.Org.ManualUserEmailVerification
     */
    manualUserEmailVerification: {
      name: "ManualUserEmailVerification",
      I: ManualUserEmailVerificationRequest,
      O: ManualUserEmailVerificationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Authenticates impersonation and generates token to be used.
     * Required Permissions:
     * CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.GetTempUserToken
     */
    getTempUserToken: {
      name: "GetTempUserToken",
      I: GetTempUserTokenReq,
      O: GetTempUserTokenRes,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.GetCountriesList
     */
    getCountriesList: {
      name: "GetCountriesList",
      I: GetCountriesListRequest,
      O: GetCountriesListResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.GetAdminClientPreferences
     */
    getAdminClientPreferences: {
      name: "GetAdminClientPreferences",
      I: GetAdminClientPreferencesRequest,
      O: GetAdminClientPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.UpdateAdminClientPreferences
     */
    updateAdminClientPreferences: {
      name: "UpdateAdminClientPreferences",
      I: UpdateAdminClientPreferencesRequest,
      O: UpdateAdminClientPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.GetPermissions
     */
    getPermissions: {
      name: "GetPermissions",
      I: GetPermissionsRequest,
      O: GetPermissionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RevokeAccountOwnerPermissionFromUser revokes the
     * account owner permission for the given user
     *
     * @generated from rpc api.v0alpha.Org.RevokeAccountOwnerPermissionFromUser
     */
    revokeAccountOwnerPermissionFromUser: {
      name: "RevokeAccountOwnerPermissionFromUser",
      I: RevokeAccountOwnerPermissionFromUserRequest,
      O: RevokeAccountOwnerPermissionFromUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateUserDisabled updates a specified user to disabled or enabled. A disabled user cannot log in.
     * Required Permissions:
     *    - USER_EDIT
     *
     * @generated from rpc api.v0alpha.Org.UpdateUserDisabled
     */
    updateUserDisabled: {
      name: "UpdateUserDisabled",
      I: UpdateUserDisabledRequest,
      O: UpdateUserDisabledResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateBulkUsersDisabled updates every given user_id to be disabled or enabled. The returned list of updated_ids contains every id that was successfully updated.
     * Required Permissions:
     * 		- USER_EDIT
     *
     * @generated from rpc api.v0alpha.Org.UpdateBulkUsersDisabled
     */
    updateBulkUsersDisabled: {
      name: "UpdateBulkUsersDisabled",
      I: UpdateBulkUsersDisabledRequest,
      O: UpdateBulkUsersDisabledResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the billing data for the given org. Billing data
     * will only be included for countries present on the org's
     * allowed countries preference.
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     * Errors:
     *    - grpc.InvalidArgument: The org_id on the request was invalid.
     *    - grpc.NotFound: The given org_id did not exist.
     *    - grpc.Internal: An unexpected error occurred while getting the orgs billing settings.
     *
     * @generated from rpc api.v0alpha.Org.GetOrgBillingSettings
     */
    getOrgBillingSettings: {
      name: "GetOrgBillingSettings",
      I: GetOrgBillingSettingsRequest,
      O: GetOrgBillingSettingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates the given orgs billing settings as defined by the info
     * given on the request message. Only fields that are given on the
     * field mask will be updated.
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     * Errors:
     *    - grpc.InvalidArgument: A field on the request was invalid.
     *    - grpc.NotFound: The given org_id did not exist.
     *    - grpc.Internal: An unexpected error occurred while updating the orgs billing settings.
     *
     * @generated from rpc api.v0alpha.Org.SetOrgBillingSettings
     */
    setOrgBillingSettings: {
      name: "SetOrgBillingSettings",
      I: SetOrgBillingSettingsRequest,
      O: SetOrgBillingSettingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a single billing region override for the given orgs billing settings.
     * If an override already exists for the given region it will be updated.
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     * Errors:
     *    - grpc.InvalidArgument: A field on the request was invalid.
     *    - grpc.NotFound: The given org_id did not exist.
     *    - grpc.Internal: An unexpected error occurred while adding the override.
     *
     * @generated from rpc api.v0alpha.Org.AddOrgBillingOverride
     */
    addOrgBillingOverride: {
      name: "AddOrgBillingOverride",
      I: AddOrgBillingOverrideRequest,
      O: AddOrgBillingOverrideResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removes a single billing region override for the given orgs billing settings.
     * If the region override doesn't exist the rpcs will just do nothing.
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     * Errors:
     *    - grpc.InvalidArgument: The given org_id was invalid.
     *    - grpc.NotFound: The given org_id did not exist.
     *    - grpc.Internal: An unexpected error occurred while removing the override.
     *
     * @generated from rpc api.v0alpha.Org.RemoveOrgBillingOverride
     */
    removeOrgBillingOverride: {
      name: "RemoveOrgBillingOverride",
      I: RemoveOrgBillingOverrideRequest,
      O: RemoveOrgBillingOverrideResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the system default billing rates.
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.GetSystemDefaultBillingRates
     */
    getSystemDefaultBillingRates: {
      name: "GetSystemDefaultBillingRates",
      I: GetSystemDefaultBillingRatesRequest,
      O: GetSystemDefaultBillingRatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListPermissionGroups returns the list of an org's permission groups.
     *
     * @generated from rpc api.v0alpha.Org.ListPermissionGroups
     */
    listPermissionGroups: {
      name: "ListPermissionGroups",
      I: ListPermissionGroupsRequest,
      O: ListPermissionGroupsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreatePermissionGroup creates a new permission group for the caller's organization.
     *
     * @generated from rpc api.v0alpha.Org.CreatePermissionGroup
     */
    createPermissionGroup: {
      name: "CreatePermissionGroup",
      I: CreatePermissionGroupRequest,
      O: CreatePermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdatePermissionGroup updates a permission group by id for the caller's organization.
     *
     * @generated from rpc api.v0alpha.Org.UpdatePermissionGroup
     */
    updatePermissionGroup: {
      name: "UpdatePermissionGroup",
      I: UpdatePermissionGroupRequest,
      O: UpdatePermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeletePermissionGroup deletes a permission group by id for the caller's organization.
     *
     * @generated from rpc api.v0alpha.Org.DeletePermissionGroup
     */
    deletePermissionGroup: {
      name: "DeletePermissionGroup",
      I: DeletePermissionGroupRequest,
      O: DeletePermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Assigns a user to a acount owner permission group.
     *
     * @generated from rpc api.v0alpha.Org.AssignUserToAccountOwnerPermissionGroup
     */
    assignUserToAccountOwnerPermissionGroup: {
      name: "AssignUserToAccountOwnerPermissionGroup",
      I: AssignUserToAccountOwnerPermissionGroupRequest,
      O: AssignUserToAccountOwnerPermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Assigns a permission group to another user.
     * Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
     * Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
     *
     * @generated from rpc api.v0alpha.Org.AssignUserPermissionGroup
     */
    assignUserPermissionGroup: {
      name: "AssignUserPermissionGroup",
      I: AssignUserPermissionGroupRequest,
      O: AssignUserPermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Assigns a permission group to multiple users.
     * Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
     * Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
     *
     * @generated from rpc api.v0alpha.Org.AssignUsersPermissionGroup
     */
    assignUsersPermissionGroup: {
      name: "AssignUsersPermissionGroup",
      I: AssignUsersPermissionGroupRequest,
      O: AssignUsersPermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Assigns permission group(s) to another user.
     * Requires that all three of permission group, calling user, and user being assigned to be of the same organization.
     * Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
     *
     * @generated from rpc api.v0alpha.Org.UpdateUserNeoPermissionGroups
     */
    updateUserNeoPermissionGroups: {
      name: "UpdateUserNeoPermissionGroups",
      I: UpdateUserNeoPermissionGroupsRequest,
      O: UpdateUserNeoPermissionGroupsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Revokes a permission group from another user.
     * Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
     * Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
     *
     * @generated from rpc api.v0alpha.Org.RevokeUserPermissionGroup
     */
    revokeUserPermissionGroup: {
      name: "RevokeUserPermissionGroup",
      I: RevokeUserPermissionGroupRequest,
      O: RevokeUserPermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Revokes a permission group to multiple users.
     * Requires that all three of permission group, calling user, and user being revoked to be of the same organization.
     * Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
     *
     * @generated from rpc api.v0alpha.Org.RevokeUsersPermissionGroup
     */
    revokeUsersPermissionGroup: {
      name: "RevokeUsersPermissionGroup",
      I: RevokeUsersPermissionGroupRequest,
      O: RevokeUsersPermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * InitDefaultPermissionGroups initializes the default read only permission groups for the callers organization.
     * Idempotent call. Returns the default permission groups for the organization.
     *
     * @generated from rpc api.v0alpha.Org.InitDefaultPermissionGroups
     */
    initDefaultPermissionGroups: {
      name: "InitDefaultPermissionGroups",
      I: InitDefaultPermissionGroupsRequest,
      O: InitDefaultPermissionGroupsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a single permission to an organization's Account Owner Group.
     *
     * @generated from rpc api.v0alpha.Org.AddPermissionToAccountOwnerPermissionGroup
     */
    addPermissionToAccountOwnerPermissionGroup: {
      name: "AddPermissionToAccountOwnerPermissionGroup",
      I: AddPermissionToAccountOwnerPermissionGroupRequest,
      O: AddPermissionToAccountOwnerPermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a single permission to an organization's Account Owner Group.
     *
     * @generated from rpc api.v0alpha.Org.RevokePermissionToAccountOwnerPermissionGroup
     */
    revokePermissionToAccountOwnerPermissionGroup: {
      name: "RevokePermissionToAccountOwnerPermissionGroup",
      I: RevokePermissionToAccountOwnerPermissionGroupRequest,
      O: RevokePermissionToAccountOwnerPermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a single permission to an organization's default Super User Group.
     * Required Permissions:
     *    - TCN_ADMIN_SETTINGS
     *
     * @generated from rpc api.v0alpha.Org.AddPermissionToOrgDefaultGroup
     */
    addPermissionToOrgDefaultGroup: {
      name: "AddPermissionToOrgDefaultGroup",
      I: AddPermissionToOrgDefaultGroupRequest,
      O: AddPermissionToOrgDefaultGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removes a single permission from an organization's default Super User Group.
     * Required Permissions:
     *    - TCN_ADMIN_SETTINGS
     *
     * @generated from rpc api.v0alpha.Org.RemovePermissionFromOrgDefaultGroup
     */
    removePermissionFromOrgDefaultGroup: {
      name: "RemovePermissionFromOrgDefaultGroup",
      I: RemovePermissionFromOrgDefaultGroupRequest,
      O: RemovePermissionFromOrgDefaultGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns an organization's default Super User Group.
     * Required Permissions:
     *    - TCN_ADMIN_SETTINGS
     *
     * @generated from rpc api.v0alpha.Org.GetOrgDefaultSuperUserGroup
     */
    getOrgDefaultSuperUserGroup: {
      name: "GetOrgDefaultSuperUserGroup",
      I: GetOrgDefaultSuperUserGroupRequest,
      O: GetOrgDefaultSuperUserGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListP3PermissionGroups returns the list of an org's P3 permission groups.
     *
     * @generated from rpc api.v0alpha.Org.ListP3PermissionGroups
     */
    listP3PermissionGroups: {
      name: "ListP3PermissionGroups",
      I: ListP3PermissionGroupsRequest,
      O: ListP3PermissionGroupsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AddUserRegion to a Users Accessible Regions
     *
     * @generated from rpc api.v0alpha.Org.AddUserRegion
     */
    addUserRegion: {
      name: "AddUserRegion",
      I: AddUserRegionRequest,
      O: AddUserRegionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RemoveUserRegion from a Users Accessible Regions
     *
     * @generated from rpc api.v0alpha.Org.RemoveUserRegion
     */
    removeUserRegion: {
      name: "RemoveUserRegion",
      I: RemoveUserRegionRequest,
      O: RemoveUserRegionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates new p3 permission group
     *
     * @generated from rpc api.v0alpha.Org.CreateP3PermissionGroup
     */
    createP3PermissionGroup: {
      name: "CreateP3PermissionGroup",
      I: CreateP3PermissionGroupRequest,
      O: CreateP3PermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update p3 permission group
     *
     * @generated from rpc api.v0alpha.Org.UpdateP3PermissionGroup
     */
    updateP3PermissionGroup: {
      name: "UpdateP3PermissionGroup",
      I: UpdateP3PermissionGroupRequest,
      O: UpdateP3PermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete new p3 permission group
     *
     * @generated from rpc api.v0alpha.Org.DeleteP3PermissionGroup
     */
    deleteP3PermissionGroup: {
      name: "DeleteP3PermissionGroup",
      I: DeleteP3PermissionGroupRequest,
      O: DeleteP3PermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Assign one or many users a p3 permission group
     *
     * @generated from rpc api.v0alpha.Org.AssignUsersP3PermissionGroup
     */
    assignUsersP3PermissionGroup: {
      name: "AssignUsersP3PermissionGroup",
      I: AssignUsersP3PermissionGroupRequest,
      O: AssignUsersP3PermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AddLoginToUser Creates new login for a given user
     *
     * @generated from rpc api.v0alpha.Org.AddLoginToUser
     */
    addLoginToUser: {
      name: "AddLoginToUser",
      I: AddLoginToUserRequest,
      O: AddLoginToUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Revoke a p3 permission group to another user(s).
     * Requires that permission group and user(s) being assigned to be of the same organization.
     * Calling user must have PERMISSION_PERMISSION_GROUP_ASSIGN.
     *
     * @generated from rpc api.v0alpha.Org.RevokeUsersP3PermissionGroup
     */
    revokeUsersP3PermissionGroup: {
      name: "RevokeUsersP3PermissionGroup",
      I: RevokeUsersP3PermissionGroupRequest,
      O: RevokeUsersP3PermissionGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetContactPreferences returns all contact preferences for client TODO: will replace ContactList above
     *
     * @generated from rpc api.v0alpha.Org.GetContactPreferences
     */
    getContactPreferences: {
      name: "GetContactPreferences",
      I: GetContactPreferencesRequest,
      O: GetContactPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateContactPreferences update fields for all contact preferences for client
     *
     * @generated from rpc api.v0alpha.Org.UpdateContactPreferences
     */
    updateContactPreferences: {
      name: "UpdateContactPreferences",
      I: UpdateContactPreferencesRequest,
      O: UpdateContactPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns all client compliance preferences
     *
     * @generated from rpc api.v0alpha.Org.GetCompliancePreferences
     */
    getCompliancePreferences: {
      name: "GetCompliancePreferences",
      I: GetCompliancePreferencesRequest,
      O: GetCompliancePreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates all client Compliance preferences
     *
     * @generated from rpc api.v0alpha.Org.UpdateCompliancePreferences
     */
    updateCompliancePreferences: {
      name: "UpdateCompliancePreferences",
      I: UpdateCompliancePreferencesRequest,
      O: UpdateCompliancePreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAgentPreferences returns all client agent preferences
     *
     * @generated from rpc api.v0alpha.Org.GetAgentPreferences
     */
    getAgentPreferences: {
      name: "GetAgentPreferences",
      I: GetAgentPreferencesRequest,
      O: GetAgentPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateAgentPreferences updates client agent preferences
     *
     * @generated from rpc api.v0alpha.Org.UpdateAgentPreferences
     */
    updateAgentPreferences: {
      name: "UpdateAgentPreferences",
      I: UpdateAgentPreferencesRequest,
      O: UpdateAgentPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrganizationPreferences returns preferences for the organization tab
     *
     * @generated from rpc api.v0alpha.Org.GetOrganizationPreferences
     */
    getOrganizationPreferences: {
      name: "GetOrganizationPreferences",
      I: GetOrganizationPreferencesRequest,
      O: GetOrganizationPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOrganizationPreferences updates preferences for the organization tab
     *
     * @generated from rpc api.v0alpha.Org.UpdateOrganizationPreferences
     */
    updateOrganizationPreferences: {
      name: "UpdateOrganizationPreferences",
      I: UpdateOrganizationPreferencesRequest,
      O: UpdateOrganizationPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSchedulePreferences returns all schedule preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.GetSchedulePreferences
     */
    getSchedulePreferences: {
      name: "GetSchedulePreferences",
      I: GetSchedulePreferencesRequest,
      O: GetSchedulePreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateSchedulePreferences returns all schedule preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.UpdateSchedulePreferences
     */
    updateSchedulePreferences: {
      name: "UpdateSchedulePreferences",
      I: UpdateSchedulePreferencesRequest,
      O: UpdateSchedulePreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetBusinessPreferences returns all business intelligence and associated analytic preferences
     *
     * @generated from rpc api.v0alpha.Org.GetBusinessPreferences
     */
    getBusinessPreferences: {
      name: "GetBusinessPreferences",
      I: GetBusinessPreferencesRequest,
      O: GetBusinessPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateBusinessPreferences updates all business intelligence and associated analytic preferences
     *
     * @generated from rpc api.v0alpha.Org.UpdateBusinessPreferences
     */
    updateBusinessPreferences: {
      name: "UpdateBusinessPreferences",
      I: UpdateBusinessPreferencesRequest,
      O: UpdateBusinessPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetEndOfDayPreferences returns a time (hour 1-24) for each day of the week.
     *
     * @generated from rpc api.v0alpha.Org.GetEndOfDayPreferences
     */
    getEndOfDayPreferences: {
      name: "GetEndOfDayPreferences",
      I: GetEndOfDayPreferencesRequest,
      O: GetEndOfDayPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateEndOfDayPreferences update fields for a time (hour 1-24) for each day of the week.
     *
     * @generated from rpc api.v0alpha.Org.UpdateEndOfDayPreferences
     */
    updateEndOfDayPreferences: {
      name: "UpdateEndOfDayPreferences",
      I: UpdateEndOfDayPreferencesRequest,
      O: UpdateEndOfDayPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetReportFilterPreferences returns preferences for the organization tab
     *
     * @generated from rpc api.v0alpha.Org.GetReportFilterPreferences
     */
    getReportFilterPreferences: {
      name: "GetReportFilterPreferences",
      I: GetFilterPreferencesRequest,
      O: GetFilterPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateReportFilterPreferences updates preferences for the filter tab
     *
     * @generated from rpc api.v0alpha.Org.UpdateReportFilterPreferences
     */
    updateReportFilterPreferences: {
      name: "UpdateReportFilterPreferences",
      I: UpdateFilterPreferencesRequest,
      O: UpdateFilterPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetPhonePreferences returns all phone and recording preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.GetPhonePreferences
     */
    getPhonePreferences: {
      name: "GetPhonePreferences",
      I: GetPhonePreferencesRequest,
      O: GetPhonePreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdatePhonePreferences updates phone and recording preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.UpdatePhonePreferences
     */
    updatePhonePreferences: {
      name: "UpdatePhonePreferences",
      I: UpdatePhonePreferencesRequest,
      O: UpdatePhonePreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDashboardGeneralPreferences returns all dashboard general preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.GetDashboardGeneralPreferences
     */
    getDashboardGeneralPreferences: {
      name: "GetDashboardGeneralPreferences",
      I: GetDashboardGeneralPreferencesRequest,
      O: GetDashboardGeneralPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateDashboardGeneralPreferences updates dashboard General preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.UpdateDashboardGeneralPreferences
     */
    updateDashboardGeneralPreferences: {
      name: "UpdateDashboardGeneralPreferences",
      I: UpdateDashboardGeneralPreferencesRequest,
      O: UpdateDashboardGeneralPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetWebhookPreferences returns all webhook preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.GetWebhookPreferences
     */
    getWebhookPreferences: {
      name: "GetWebhookPreferences",
      I: GetWebhookPreferencesRequest,
      O: GetWebhookPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateWebhookPreferences updates webhook preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.UpdateWebhookPreferences
     */
    updateWebhookPreferences: {
      name: "UpdateWebhookPreferences",
      I: UpdateWebhookPreferencesRequest,
      O: UpdateWebhookPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetBroadcastPreferences returns all broadcast options for campaign preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.GetBroadcastPreferences
     */
    getBroadcastPreferences: {
      name: "GetBroadcastPreferences",
      I: GetBroadcastPreferencesRequest,
      O: GetBroadcastPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateBroadcastPreferences updates broadcast options for campaign preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.UpdateBroadcastPreferences
     */
    updateBroadcastPreferences: {
      name: "UpdateBroadcastPreferences",
      I: UpdateBroadcastPreferencesRequest,
      O: UpdateBroadcastPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAuthenticationPreferences returns all authentication options for an org.
     *
     * @generated from rpc api.v0alpha.Org.GetAuthenticationPreferences
     */
    getAuthenticationPreferences: {
      name: "GetAuthenticationPreferences",
      I: GetAuthenticationPreferencesRequest,
      O: GetAuthenticationPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateAuthenticationPreferences updates authentication preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.UpdateAuthenticationPreferences
     */
    updateAuthenticationPreferences: {
      name: "UpdateAuthenticationPreferences",
      I: UpdateAuthenticationPreferencesRequest,
      O: UpdateAuthenticationPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRecordingPreferences returns all recording options for an org.
     *
     * @generated from rpc api.v0alpha.Org.GetRecordingPreferences
     */
    getRecordingPreferences: {
      name: "GetRecordingPreferences",
      I: GetRecordingPreferencesRequest,
      O: GetRecordingPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateRecordingPreferences updates Recording preferences for an org.
     *
     * @generated from rpc api.v0alpha.Org.UpdateRecordingPreferences
     */
    updateRecordingPreferences: {
      name: "UpdateRecordingPreferences",
      I: UpdateRecordingPreferencesRequest,
      O: UpdateRecordingPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDashboardQueuePreferences returns the Dashboard Queue table preferences.
     *
     * @generated from rpc api.v0alpha.Org.GetDashboardQueuePreferences
     */
    getDashboardQueuePreferences: {
      name: "GetDashboardQueuePreferences",
      I: GetDashboardQueuePreferencesRequest,
      O: GetDashboardQueuePreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateDashboardQueuePreferences updates the Dashboard Queue table preferences.
     *
     * @generated from rpc api.v0alpha.Org.UpdateDashboardQueuePreferences
     */
    updateDashboardQueuePreferences: {
      name: "UpdateDashboardQueuePreferences",
      I: UpdateDashboardQueuePreferencesRequest,
      O: UpdateDashboardQueuePreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAgentQuickViewPreferences returns the diplay templates for the client
     *
     * @generated from rpc api.v0alpha.Org.GetAgentQuickViewPreferences
     */
    getAgentQuickViewPreferences: {
      name: "GetAgentQuickViewPreferences",
      I: GetAgentQuickViewPreferencesRequest,
      O: GetAgentQuickViewPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetVoiceAnalyticsPreferences returns the all preferences for voice analytics
     *
     * @generated from rpc api.v0alpha.Org.GetVoiceAnalyticsPreferences
     */
    getVoiceAnalyticsPreferences: {
      name: "GetVoiceAnalyticsPreferences",
      I: GetVoiceAnalyticsPreferencesRequest,
      O: GetVoiceAnalyticsPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetVoiceAnalyticsPreferences updates the all preferences for voice analytics
     *
     * @generated from rpc api.v0alpha.Org.UpdateVoiceAnalyticsPreferences
     */
    updateVoiceAnalyticsPreferences: {
      name: "UpdateVoiceAnalyticsPreferences",
      I: UpdateVoiceAnalyticsPreferencesRequest,
      O: UpdateVoiceAnalyticsPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetScorecardsPreferences returns the all preferences for scorecards
     *
     * @generated from rpc api.v0alpha.Org.GetScorecardsPreferences
     */
    getScorecardsPreferences: {
      name: "GetScorecardsPreferences",
      I: GetScorecardsPreferencesRequest,
      O: GetScorecardsPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetScorecardsPreferences updates the all preferences for scorecards
     *
     * @generated from rpc api.v0alpha.Org.UpdateScorecardsPreferences
     */
    updateScorecardsPreferences: {
      name: "UpdateScorecardsPreferences",
      I: UpdateScorecardsPreferencesRequest,
      O: UpdateScorecardsPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetEmailSmsPreferences returns the all preferences for email and sms
     *
     * @generated from rpc api.v0alpha.Org.GetEmailSmsPreferences
     */
    getEmailSmsPreferences: {
      name: "GetEmailSmsPreferences",
      I: GetEmailSmsPreferencesRequest,
      O: GetEmailSmsPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetEmailSmsPreferences updates the all preferences for email and sms
     *
     * @generated from rpc api.v0alpha.Org.UpdateEmailSmsPreferences
     */
    updateEmailSmsPreferences: {
      name: "UpdateEmailSmsPreferences",
      I: UpdateEmailSmsPreferencesRequest,
      O: UpdateEmailSmsPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * EditAgentQuickViewPreferences return nil,error
     *
     * @generated from rpc api.v0alpha.Org.EditAgentQuickViewPreferences
     */
    editAgentQuickViewPreferences: {
      name: "EditAgentQuickViewPreferences",
      I: EditAgentQuickViewPreferencesRequest,
      O: EditAgentQuickViewPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * EditBackofficeThemePreference returns nil, error
     * changes the Client Skin client property
     *
     * @generated from rpc api.v0alpha.Org.EditBackofficeThemePreference
     */
    editBackofficeThemePreference: {
      name: "EditBackofficeThemePreference",
      I: EditBackofficeThemePreferenceRequest,
      O: EditBackofficeThemePreferenceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.v0alpha.Org.GetBackofficeThemePreference
     */
    getBackofficeThemePreference: {
      name: "GetBackofficeThemePreference",
      I: GetBackofficeThemePreferenceRequest,
      O: GetBackofficeThemePreferenceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AcceptLinkbackRecordingTerms controls acknowledgement for linkback recording terms and conditions
     *
     * @generated from rpc api.v0alpha.Org.AcceptLinkbackRecordingTerms
     */
    acceptLinkbackRecordingTerms: {
      name: "AcceptLinkbackRecordingTerms",
      I: AcceptLinkbackRecordingTermsRequest,
      O: AcceptLinkbackRecordingTermsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * LinkbackUpdateBroadcastTemplates updates broadcast template action parameters pertaining to linkback recording
     *
     * @generated from rpc api.v0alpha.Org.LinkbackUpdateBroadcastTemplates
     */
    linkbackUpdateBroadcastTemplates: {
      name: "LinkbackUpdateBroadcastTemplates",
      I: LinkbackUpdateBroadcastTemplatesRequest,
      O: LinkbackUpdateBroadcastTemplatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RecordEmailUnsubscribeAcknowledgement inserts an activity log when the client acknowledges responsibility
     * for their own email unsubscribe links.
     *
     * @generated from rpc api.v0alpha.Org.RecordEmailUnsubscribeAcknowledgement
     */
    recordEmailUnsubscribeAcknowledgement: {
      name: "RecordEmailUnsubscribeAcknowledgement",
      I: RecordEmailUnsubscribeAcknowledgementRequest,
      O: RecordEmailUnsubscribeAcknowledgementResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ClearEmailUnsubscribeAcknowledgement inserts an activity log when the client clears acknowledgement for
     * their own email unsubscribe links.
     *
     * @generated from rpc api.v0alpha.Org.ClearEmailUnsubscribeAcknowledgement
     */
    clearEmailUnsubscribeAcknowledgement: {
      name: "ClearEmailUnsubscribeAcknowledgement",
      I: ClearEmailUnsubscribeAcknowledgementRequest,
      O: ClearEmailUnsubscribeAcknowledgementResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new WebLinkTemplate as defined by request message CreateWebLinkTemplateRequest.
     * Required Permissions:
     *  ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.CreateWebLinkTemplate
     */
    createWebLinkTemplate: {
      name: "CreateWebLinkTemplate",
      I: CreateWebLinkTemplateRequest,
      O: CreateWebLinkTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List every WebLinkTemplate.
     * Required Permissions:
     *  ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.ListWebLinkTemplates
     */
    listWebLinkTemplates: {
      name: "ListWebLinkTemplates",
      I: ListWebLinkTemplatesRequest,
      O: ListWebLinkTemplatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get one WebLinkTemplate with the given web_link_template_id.
     * Required Permissions:
     *  ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.GetWebLinkTemplate
     */
    getWebLinkTemplate: {
      name: "GetWebLinkTemplate",
      I: GetWebLinkTemplateRequest,
      O: GetWebLinkTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates the WebLinkTemplate with the given web_link_template_id.
     * Required Permissions:
     *  ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.UpdateWebLinkTemplate
     */
    updateWebLinkTemplate: {
      name: "UpdateWebLinkTemplate",
      I: UpdateWebLinkTemplateRequest,
      O: UpdateWebLinkTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes the WebLinkTemplate with the given web_link_template_id.
     * Required Permissions:
     *  ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.DeleteWebLinkTemplate
     */
    deleteWebLinkTemplate: {
      name: "DeleteWebLinkTemplate",
      I: DeleteWebLinkTemplateRequest,
      O: DeleteWebLinkTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new AgentTriggerTemplate as defined by request message CreateAgentTriggerTemplateRequest.
     * The id field on the request message will be generated as part of
     * this method. If the id field is set it WILL be overwritten.
     * Required Permissions:
     *  ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.CreateAgentTriggerTemplate
     */
    createAgentTriggerTemplate: {
      name: "CreateAgentTriggerTemplate",
      I: CreateAgentTriggerTemplateRequest,
      O: CreateAgentTriggerTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a list of every AgentTriggerTemplate for the given
     * hunt_group_sid on the request.
     * Requiree Permissions:
     *  ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.ListAgentTriggerTemplates
     */
    listAgentTriggerTemplates: {
      name: "ListAgentTriggerTemplates",
      I: ListAgentTriggerTemplatesRequest,
      O: ListAgentTriggerTemplatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns one AgentTriggerTemplate with the id given on the request message.
     * Required Permissions:
     *  ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.GetAgentTriggerTemplate
     */
    getAgentTriggerTemplate: {
      name: "GetAgentTriggerTemplate",
      I: GetAgentTriggerTemplateRequest,
      O: GetAgentTriggerTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates the AgentTriggerTemplate with the id given on the request message.
     * Required Permissions:
     *  ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.UpdateAgentTriggerTemplate
     */
    updateAgentTriggerTemplate: {
      name: "UpdateAgentTriggerTemplate",
      I: UpdateAgentTriggerTemplateRequest,
      O: UpdateAgentTriggerTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes the AgentTriggerTemplate with the id given on the request message.
     * Required Permissions:
     *  ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.DeleteAgentTriggerTemplate
     */
    deleteAgentTriggerTemplate: {
      name: "DeleteAgentTriggerTemplate",
      I: DeleteAgentTriggerTemplateRequest,
      O: DeleteAgentTriggerTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new ClientInfoDisplayTemplate as defined by request
     * message CreateClientInfoDisplayRequest.
     * Required Permissions:
     *  ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.CreateClientInfoDisplayTemplate
     */
    createClientInfoDisplayTemplate: {
      name: "CreateClientInfoDisplayTemplate",
      I: CreateClientInfoDisplayTemplateRequest,
      O: CreateClientInfoDisplayTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a list of every ClientInfoDisplayTemplate.
     * Required Permissions:
     *  ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.ListClientInfoDisplayTemplates
     */
    listClientInfoDisplayTemplates: {
      name: "ListClientInfoDisplayTemplates",
      I: ListClientInfoDisplayTemplatesRequest,
      O: ListClientInfoDisplayTemplatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates the ClientInfoDisplayTemplate as defined by request
     * message UpdateClientIntoDisplayTemplateRequest.
     * Required Permissions:
     *  ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.UpdateClientInfoDisplayTemplate
     */
    updateClientInfoDisplayTemplate: {
      name: "UpdateClientInfoDisplayTemplate",
      I: UpdateClientInfoDisplayTemplateRequest,
      O: UpdateClientInfoDisplayTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes the ClientInfoDisplayTemplate with the id given on the request
     * message.
     * Required Permissions:
     *  ORG_EDIT
     *
     * @generated from rpc api.v0alpha.Org.DeleteClientInfoDisplayTemplate
     */
    deleteClientInfoDisplayTemplate: {
      name: "DeleteClientInfoDisplayTemplate",
      I: DeleteClientInfoDisplayTemplateRequest,
      O: DeleteClientInfoDisplayTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns one ClientInfoDisplayTemplate with the id given on the
     * request message.
     *  Required Permissions:
     *    ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.GetClientInfoDisplayTemplate
     */
    getClientInfoDisplayTemplate: {
      name: "GetClientInfoDisplayTemplate",
      I: GetClientInfoDisplayTemplateRequest,
      O: GetClientInfoDisplayTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a slice of agent pause codes.
     *
     * @generated from rpc api.v0alpha.Org.ListAgentPauseCodes
     */
    listAgentPauseCodes: {
      name: "ListAgentPauseCodes",
      I: ListAgentPauseCodesRequest,
      O: ListAgentPauseCodesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new Agent Pause Code as defined by the request message.
     * Errors:
     *    - grpc.InvalidArgument: The pause_code field was not set, or the the pause_code.codes field is an empty list.
     *    - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
     *
     * @generated from rpc api.v0alpha.Org.CreateAgentPauseCode
     */
    createAgentPauseCode: {
      name: "CreateAgentPauseCode",
      I: CreateAgentPauseCodeRequest,
      O: CreateAgentPauseCodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates an Agent Pause Code with the xml_client_property_sid given on
     * the pause_code in the request message as defined by the other fields
     * on the pause_code message.
     * Required Permissions:
     *    AGENT_MANAGEMENT
     * Errors:
     *    - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
     *    - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
     *
     * @generated from rpc api.v0alpha.Org.UpdateAgentPauseCode
     */
    updateAgentPauseCode: {
      name: "UpdateAgentPauseCode",
      I: UpdateAgentPauseCodeRequest,
      O: UpdateAgentPauseCodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes an Agent Pause Code with the sid given on the request message.
     * Errors:
     *    - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
     *
     * @generated from rpc api.v0alpha.Org.DeleteAgentPauseCode
     */
    deleteAgentPauseCode: {
      name: "DeleteAgentPauseCode",
      I: DeleteAgentPauseCodeRequest,
      O: DeleteAgentPauseCodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a slice of custom report filters belonging to client_sid.
     * Required Permissions:
     *    ORG_VIEW
     * Errors:
     *    - grpc.NotFound: There is no entry matching the requested client_sid.
     *
     * @generated from rpc api.v0alpha.Org.ListCustomReportFilters
     */
    listCustomReportFilters: {
      name: "ListCustomReportFilters",
      I: ListCustomReportFiltersRequest,
      O: ListCustomReportFiltersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new custom report filter as defined by the request message.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.InvalidArgument: The custom report filter has an empty name or no filtering parameters.
     *    - grpc.Internal: An error occurred marshalling the custom report filter into an xml string.
     *
     * @generated from rpc api.v0alpha.Org.CreateCustomReportFilter
     */
    createCustomReportFilter: {
      name: "CreateCustomReportFilter",
      I: CreateCustomReportFilterRequest,
      O: CreateCustomReportFilterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates a custom report filter with the requested xml_client_property_sid
     * with the report filter in the request message.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.InvalidArgument: The pause_code field was not set or the pause_code.codes field was an empty list.
     *    - grpc.Internal: an error occurred while marshalling the pause_code into an xml string.
     *
     * @generated from rpc api.v0alpha.Org.UpdateCustomReportFilter
     */
    updateCustomReportFilter: {
      name: "UpdateCustomReportFilter",
      I: UpdateCustomReportFilterRequest,
      O: UpdateCustomReportFilterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes a custom report filter with the sid given on the request message.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.InvalidArgument: The xml_client_property_sid field is invalid.
     *
     * @generated from rpc api.v0alpha.Org.DeleteCustomReportFilter
     */
    deleteCustomReportFilter: {
      name: "DeleteCustomReportFilter",
      I: DeleteCustomReportFilterRequest,
      O: DeleteCustomReportFilterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a slice of hunt group scripts belonging to the client_sid.
     * Required Permissions:
     *    ORG_VIEW
     * Errors:
     *    - grpc.NotFound: There is no entry matching the requested client_sid.
     *
     * @generated from rpc api.v0alpha.Org.ListAgentResponseGroups
     */
    listAgentResponseGroups: {
      name: "ListAgentResponseGroups",
      I: ListAgentResponseGroupsRequest,
      O: ListAgentResponseGroupsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a slice of last template element scripts belonging to the client_sid.
     * Required Permissions:
     *    ORG_VIEW
     * Errors:
     *    - grpc.NotFound: There is no entry matching the requested client_sid.
     *
     * @generated from rpc api.v0alpha.Org.ListLastTemplateElements
     */
    listLastTemplateElements: {
      name: "ListLastTemplateElements",
      I: ListLastTemplateElementsRequest,
      O: ListLastTemplateElementsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Lists the names of the custom queue configs.
     * Required Permissions:
     *    ORG_VIEW (If @org_id is empty)
     *    CUSTOMER_SUPPORT (If @org_id is NOT empty)
     * Errors:
     *   - grpc.Internal: An error occurred while getting the config names.
     *   - grpc.NotFound: The given @org_id was not found (if @org_id is NOT empty).
     *
     * @generated from rpc api.v0alpha.Org.ListQueueConfigs
     */
    listQueueConfigs: {
      name: "ListQueueConfigs",
      I: ListQueueConfigsReq,
      O: ListQueueConfigsRes,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes a queue config with the given @client_sid and @config_name.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.Internal: An unexpected error occurred while removing the config.
     *    - grpc.InvalidArgument: the config_name was invalid.
     *
     * @generated from rpc api.v0alpha.Org.DeleteQueueConfig
     */
    deleteQueueConfig: {
      name: "DeleteQueueConfig",
      I: DeleteQueueConfigReq,
      O: DeleteQueueConfigRes,
      kind: MethodKind.Unary,
    },
    /**
     * Gets the details for the queue config for the given @client_sid with
     * the given @name. If @merge is true, the config data will be merged
     * with the default config data.
     * Required Permissions:
     *    ORG_VIEW
     * Errors:
     *   - grpc.Internal: An unexpected error occurred getting the config data.
     *   - grpc.InvalidArgument: the given config name was invalid.
     *
     * @generated from rpc api.v0alpha.Org.GetQueueConfig
     */
    getQueueConfig: {
      name: "GetQueueConfig",
      I: GetQueueConfigReq,
      O: GetQueueConfigRes,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a queue config as defined by the @config given
     * on the request message.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.Internal: An unexpected error occurred while saving the config.
     *    - grpc.InvalidArgument: the given config was invalid.
     *
     * @generated from rpc api.v0alpha.Org.CreateQueueConfig
     */
    createQueueConfig: {
      name: "CreateQueueConfig",
      I: CreateQueueConfigReq,
      O: CreateQueueConfigRes,
      kind: MethodKind.Unary,
    },
    /**
     * Updates a new queue config as defined by the @config given
     * on the request message.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.NotFound: The name of the given config could not be found.
     *    - grpc.Internal: An unexpected error occurred while saving the config.
     *    - grpc.InvalidArgument: the given config was invalid.
     *
     * @generated from rpc api.v0alpha.Org.UpdateQueueConfig
     */
    updateQueueConfig: {
      name: "UpdateQueueConfig",
      I: UpdateQueueConfigReq,
      O: UpdateQueueConfigRes,
      kind: MethodKind.Unary,
    },
    /**
     * Copies a queue config belonging to one organization to another.
     * The queue config with the @from_name will be copied from the
     * organization with the @from_org_id to the organization with the
     * @to_org_id under the new @to_name.
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     * Errors:
     *    - grpc.Internal: An unexpected error occurred while copying the config.
     *    - grpc.InvalidArgument: A field on the request message was invalid.
     *    - grpc.NotFound: The @to_org_id, @from_org_id, or @from_name was not found.
     *    - grpc.AlreadyExists: The @to_name already exists for the @to_org_id.
     *
     * @generated from rpc api.v0alpha.Org.CopyQueueConfig
     */
    copyQueueConfig: {
      name: "CopyQueueConfig",
      I: CopyQueueConfigReq,
      O: CopyQueueConfigRes,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the url of a downloadable zip file containing every
     * sound for the given queue config.
     * Required Permissions:
     *    ORG_VIEW
     * Errors:
     *    - grpc.Internal: An unexpected error occurred while zipping the files.
     *    - grpc.NotFound: The given queue config was not found.
     *
     * @generated from rpc api.v0alpha.Org.GetAllQueueConfigSounds
     */
    getAllQueueConfigSounds: {
      name: "GetAllQueueConfigSounds",
      I: GetAllQueueConfigSoundsReq,
      O: GetAllQueueConfigSoundsRes,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the url of a downladable wav file for the given config's
     * sound matching the given sound enum. Leaving the config field empty
     * will look up the sound for the account default config.
     * Required Permissions:
     *  ORG_VIEW
     * Errors:
     *  - grpc.Internal: An unexpected error occurrec while getting the
     *    downloadable file url.
     *  - grpc.NotFound: The given queue config was not found or the sound
     *    was not found for the config.
     *
     * @generated from rpc api.v0alpha.Org.GetQueueConfigSound
     */
    getQueueConfigSound: {
      name: "GetQueueConfigSound",
      I: GetQueueConfigSoundReq,
      O: GetQueueConfigSoundRes,
      kind: MethodKind.Unary,
    },
    /**
     * Sets the given sound for the config to one of the uploaded
     * sound files in the clients upload folder matching the
     * given file_name on the request. Leaving the config field empty
     * will set the sound for the account default config.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.Internal: An unexpected error occurred while updating
     *      the configs sound.
     *    - gprc.NotFound: The given queue config was not found or the
     *      sound file was not found for the client.
     *    - grpc.InvalidArgument: The file_name on the request was invalid.
     *
     * @generated from rpc api.v0alpha.Org.SetQueueConfigSound
     */
    setQueueConfigSound: {
      name: "SetQueueConfigSound",
      I: SetQueueConfigSoundReq,
      O: SetQueueConfigSoundRes,
      kind: MethodKind.Unary,
    },
    /**
     * Sets every sound for a given config by copying them from
     * another config OR by copying them from a default sound set
     * identified by language and gender. Empty config names will be
     * treated as the account default config.
     * Required Permissions:
     *    ORG_EDIT
     * Errors
     *    - grpc.Internal: An unexpected error occurred while updating
     *      all sounds for the given to_config.
     *    - grpc.NotFound: The given to_config or from.config (if used)
     *      could not be found or the default sound set for the given
     *      gender/language identifier could not be found.
     *    - grpc.InvalidArgument: The to_config and from.config contained
     *      the same value. (If from.config was used)
     *
     * @generated from rpc api.v0alpha.Org.SetAllQueueConfigSoundsFromSource
     */
    setAllQueueConfigSoundsFromSource: {
      name: "SetAllQueueConfigSoundsFromSource",
      I: SetAllQueueConfigSoundsFromSourceReq,
      O: SetAllQueueConfigSoundsFromSourceRes,
      kind: MethodKind.Unary,
    },
    /**
     * Checks a user's blocked status.
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     * Errors:
     *    - grpc.Internal: An unexpected error occurred while getting the user.
     *    - grpc.InvalidArgument: The user_id on the request was invalid.
     *
     * @generated from rpc api.v0alpha.Org.GetUserBlocked
     */
    getUserBlocked: {
      name: "GetUserBlocked",
      I: GetUserBlockedRequest,
      O: GetUserBlockedResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Unblocks the given user.
     * Required Permissions:
     *    CUSTOMER_SUPPORT
     * Errors:
     *    - grpc.Internal: An unexpected error occurred while unblocking the user.
     *    - grpc.InvalidArgument: The user_id on the request was invalid.
     *
     * @generated from rpc api.v0alpha.Org.UnblockUser
     */
    unblockUser: {
      name: "UnblockUser",
      I: UnblockUserRequest,
      O: UnblockUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List all users who only exist in skunk and have not yet been migrated
     * Required Permissions:
     *  CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.ListP3UnMigratedUsers
     */
    listP3UnMigratedUsers: {
      name: "ListP3UnMigratedUsers",
      I: ListP3UnMigratedUsersRequest,
      O: ListP3UnMigratedUsersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Migrates a login or agent from backoffice to firestore
     * Required Permissions:
     *  CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.MigrateP3User
     */
    migrateP3User: {
      name: "MigrateP3User",
      I: MigrateP3UserRequest,
      O: MigrateP3UserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates the username in skunk only for a agent or login
     * Required Permissions:
     *  CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.UpdateP3UserName
     */
    updateP3UserName: {
      name: "UpdateP3UserName",
      I: UpdateP3UserNameRequest,
      O: UpdateP3UserNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gets all users under the p3 hierarchy
     * Required Permissions:
     *  OWNING_ORG_IMITATION
     *
     * @generated from rpc api.v0alpha.Org.ListOwnedUsers
     */
    listOwnedUsers: {
      name: "ListOwnedUsers",
      I: ListOwnedUsersRequest,
      O: ListOwnedUsersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gets all orgs under the p3 hierarchy
     * Required Permissions:
     * PERMISSION_ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.ListOwnedOrgs
     */
    listOwnedOrgs: {
      name: "ListOwnedOrgs",
      I: ListOwnedOrgsRequest,
      O: ListOwnedOrgsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removed login strike from list of given login_log_sids
     * Required Permissions:
     *  CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.RemoveLoginStrikes
     */
    removeLoginStrikes: {
      name: "RemoveLoginStrikes",
      I: RemoveLoginStrikesRequest,
      O: RemoveLoginStrikesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removed login strikes by user_id
     * Required Permissions:
     *  CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.RemoveUserLoginStrikes
     */
    removeUserLoginStrikes: {
      name: "RemoveUserLoginStrikes",
      I: RemoveUserLoginStrikesRequest,
      O: RemoveUserLoginStrikesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Lists user login history by ip or user_id
     * Required Permissions:
     *  CUSTOMER_SUPPORT
     *
     * @generated from rpc api.v0alpha.Org.ListLoginHistory
     */
    listLoginHistory: {
      name: "ListLoginHistory",
      I: ListLoginHistoryRequest,
      O: ListLoginHistoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates a users agentsid and loginsid
     * Required Permissions:
     *  TCN_ADMIN_SETTINGS
     *
     * @generated from rpc api.v0alpha.Org.UpdateP3UserSids
     */
    updateP3UserSids: {
      name: "UpdateP3UserSids",
      I: UpdateP3UserSidsRequest,
      O: UpdateP3UserSidsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAuthConnection creates a new auth0 connection.
     *
     * @generated from rpc api.v0alpha.Org.CreateAuthConnection
     */
    createAuthConnection: {
      name: "CreateAuthConnection",
      I: CreateAuthConnectionRequest,
      O: CreateAuthConnectionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAuthConnectionSettings gets auth0 connection settings.
     *
     * @generated from rpc api.v0alpha.Org.GetAuthConnectionSettings
     */
    getAuthConnectionSettings: {
      name: "GetAuthConnectionSettings",
      I: GetAuthConnectionSettingsRequest,
      O: GetAuthConnectionSettingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateAuthConnectionSettings updates an existing auth0 connection settings.
     *
     * @generated from rpc api.v0alpha.Org.UpdateAuthConnectionSettings
     */
    updateAuthConnectionSettings: {
      name: "UpdateAuthConnectionSettings",
      I: UpdateAuthConnectionSettingsRequest,
      O: UpdateAuthConnectionSettingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAuthConnection removes the current orgs auth settings.
     *
     * @generated from rpc api.v0alpha.Org.DeleteAuthConnection
     */
    deleteAuthConnection: {
      name: "DeleteAuthConnection",
      I: DeleteAuthConnectionRequest,
      O: DeleteAuthConnectionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gets a user subscription by id
     * Required Permissions:
     *    ORG_VIEW if user id IS provided
     *    none if user id NOT provided
     *
     * @generated from rpc api.v0alpha.Org.GetUserSubscription
     */
    getUserSubscription: {
      name: "GetUserSubscription",
      I: GetUserSubscriptionRequest,
      O: GetUserSubscriptionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a user subscription to users list of subscriptions
     * Required Permissions:
     *    USER_EDIT if user id IS provided
     *    EDIT_USER_OPTIONS if user id NOT provided
     *
     * @generated from rpc api.v0alpha.Org.AddUserSubscription
     */
    addUserSubscription: {
      name: "AddUserSubscription",
      I: AddUserSubscriptionRequest,
      O: AddUserSubscriptionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removes a user subscription from a users list of subscription
     * Required Permissions:
     *    USER_EDIT if user id IS provided
     *    EDIT_USER_OPTIONS if user id NOT provided
     *
     * @generated from rpc api.v0alpha.Org.RemoveUserSubscription
     */
    removeUserSubscription: {
      name: "RemoveUserSubscription",
      I: RemoveUserSubscriptionRequest,
      O: RemoveUserSubscriptionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates a user subscription
     * Required Permissions:
     *    USER_EDIT if user id IS provided
     *    EDIT_USER_OPTIONS if user id NOT provided
     *
     * @generated from rpc api.v0alpha.Org.UpdateUserSubscription
     */
    updateUserSubscription: {
      name: "UpdateUserSubscription",
      I: UpdateUserSubscriptionRequest,
      O: UpdateUserSubscriptionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Lists all of a users subscriptions
     * Required Permissions:
     *    ORG_VIEW if user id IS provided
     *    none if user id NOT provided
     *
     * @generated from rpc api.v0alpha.Org.ListUserSubscriptions
     */
    listUserSubscriptions: {
      name: "ListUserSubscriptions",
      I: ListUserSubscriptionsRequest,
      O: ListUserSubscriptionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Lists multiple users subscriptions by org. Optionally filters by event type.
     * Required Permissions:
     *    ORG_VIEW
     *
     * @generated from rpc api.v0alpha.Org.ListOrgSubscriptions
     */
    listOrgSubscriptions: {
      name: "ListOrgSubscriptions",
      I: ListOrgSubscriptionsRequest,
      O: ListOrgSubscriptionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the systems current environment details
     * Required Permissions:
     *    N/A
     *
     * @generated from rpc api.v0alpha.Org.GetSystemEnvironmentDetails
     */
    getSystemEnvironmentDetails: {
      name: "GetSystemEnvironmentDetails",
      I: GetSystemEnvironmentDetailsRequest,
      O: GetSystemEnvironmentDetailsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a list of agent statistics templates belonging to client_sid.
     * Required Permissions:
     *    ORG_VIEW
     * Errors:
     *    - grpc.NotFound: There is no entry matching the requested client_sid.
     *
     * @generated from rpc api.v0alpha.Org.ListAgentStatisticsTemplates
     */
    listAgentStatisticsTemplates: {
      name: "ListAgentStatisticsTemplates",
      I: ListAgentStatisticsTemplatesRequest,
      O: ListAgentStatisticsTemplatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new agent statistics template for the given client_sid.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.NotFound: The client_sid is not found.
     *
     * @generated from rpc api.v0alpha.Org.CreateAgentStatisticsTemplate
     */
    createAgentStatisticsTemplate: {
      name: "CreateAgentStatisticsTemplate",
      I: CreateAgentStatisticsTemplateRequest,
      O: CreateAgentStatisticsTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates an existing agent statistics template for the given client_sid.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.NotFound: The client_sid is not found.
     *
     * @generated from rpc api.v0alpha.Org.UpdateAgentStatisticsTemplate
     */
    updateAgentStatisticsTemplate: {
      name: "UpdateAgentStatisticsTemplate",
      I: UpdateAgentStatisticsTemplateRequest,
      O: UpdateAgentStatisticsTemplateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes an existing agent statistics template for the given client_sid.
     * Required Permissions:
     *    ORG_EDIT
     * Errors:
     *    - grpc.NotFound: The client_sid or agent statistics template is not found.
     *
     * @generated from rpc api.v0alpha.Org.DeleteAgentStatisticsTemplate
     */
    deleteAgentStatisticsTemplate: {
      name: "DeleteAgentStatisticsTemplate",
      I: DeleteAgentStatisticsTemplateRequest,
      O: DeleteAgentStatisticsTemplateResponse,
      kind: MethodKind.Unary,
    },
  }
};

