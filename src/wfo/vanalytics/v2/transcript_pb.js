// @generated by protoc-gen-es v1.7.0 with parameter "target=js+dts"
// @generated from file wfo/vanalytics/v2/transcript.proto (package wfo.vanalytics.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { FieldMask, Int32Value, proto3, Timestamp } from "@bufbuild/protobuf";
import { CallType_Enum } from "../../../api/commons/acd_pb.js";

/**
 * An enumeration of transcript communication channels.
 *
 * @generated from enum wfo.vanalytics.v2.Channel
 */
export const Channel = proto3.makeEnum(
  "wfo.vanalytics.v2.Channel",
  [
    {no: 0, name: "CHANNEL_CALL", localName: "CALL"},
    {no: 1, name: "CHANNEL_SMS", localName: "SMS"},
  ],
);

/**
 * An enumeration of a flagged transcripts review statuses. Todo means there
 * are flags that need review and have not been reviewed. Done means every flag
 * that needs review has been reviewed. None means no flags require review.
 *
 * @generated from enum wfo.vanalytics.v2.ReviewStatus
 */
export const ReviewStatus = proto3.makeEnum(
  "wfo.vanalytics.v2.ReviewStatus",
  [
    {no: 0, name: "REVIEW_STATUS_TODO", localName: "TODO"},
    {no: 1, name: "REVIEW_STATUS_DONE", localName: "DONE"},
    {no: 2, name: "REVIEW_STATUS_NONE", localName: "NONE"},
  ],
);

/**
 * A textualized interaction between two or more participants.
 *
 * @generated from message wfo.vanalytics.v2.Transcript
 */
export const Transcript = proto3.makeMessageType(
  "wfo.vanalytics.v2.Transcript",
  () => [
    { no: 1, name: "call", kind: "message", T: Call, oneof: "metadata" },
    { no: 2, name: "sms", kind: "message", T: Sms, oneof: "metadata" },
    { no: 12, name: "channel", kind: "enum", T: proto3.getEnumType(Channel) },
    { no: 13, name: "start_time", kind: "message", T: Timestamp },
    { no: 15, name: "delete_time", kind: "message", T: Timestamp },
    { no: 16, name: "flag_summary", kind: "message", T: FlagSummary },
    { no: 17, name: "transcript_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * FlagSummary defines a summary of flags which were applied to a transcript.
 *
 * @generated from message wfo.vanalytics.v2.FlagSummary
 */
export const FlagSummary = proto3.makeMessageType(
  "wfo.vanalytics.v2.FlagSummary",
  () => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "priority_sum", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "priority_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "need_review", kind: "message", T: FlagSummary_NeedReview },
    { no: 5, name: "flags", kind: "message", T: FlagSummary_Flag, repeated: true },
    { no: 6, name: "review_status", kind: "enum", T: proto3.getEnumType(ReviewStatus) },
  ],
);

/**
 * NeedReview defines flags which need to be reviewed.
 *
 * @generated from message wfo.vanalytics.v2.FlagSummary.NeedReview
 */
export const FlagSummary_NeedReview = proto3.makeMessageType(
  "wfo.vanalytics.v2.FlagSummary.NeedReview",
  () => [
    { no: 1, name: "priority_sum", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "priority_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "flag_sids", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ],
  {localName: "FlagSummary_NeedReview"},
);

/**
 * Flag defines a flag that was applied to a transcript by one or more filters
 * along with a user review when one exists.
 *
 * @generated from message wfo.vanalytics.v2.FlagSummary.Flag
 */
export const FlagSummary_Flag = proto3.makeMessageType(
  "wfo.vanalytics.v2.FlagSummary.Flag",
  () => [
    { no: 1, name: "flag_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "filters", kind: "message", T: FlagSummary_Filter, repeated: true },
    { no: 6, name: "must_review", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "must_notify", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "reviews", kind: "message", T: FlagSummary_Review, repeated: true },
  ],
  {localName: "FlagSummary_Flag"},
);

/**
 * Filter defines a filter which applied some flag to some transcript.
 *
 * @generated from message wfo.vanalytics.v2.FlagSummary.Filter
 */
export const FlagSummary_Filter = proto3.makeMessageType(
  "wfo.vanalytics.v2.FlagSummary.Filter",
  () => [
    { no: 1, name: "join_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "flag_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "filter_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "FlagSummary_Filter"},
);

/**
 * Review contains info on the flag review when one exists.
 *
 * @generated from message wfo.vanalytics.v2.FlagSummary.Review
 */
export const FlagSummary_Review = proto3.makeMessageType(
  "wfo.vanalytics.v2.FlagSummary.Review",
  () => [
    { no: 1, name: "join_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "flag_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "FlagSummary_Review"},
);

/**
 * Sms specific transcript metadata.
 *
 * @generated from message wfo.vanalytics.v2.Sms
 */
export const Sms = proto3.makeMessageType(
  "wfo.vanalytics.v2.Sms",
  () => [
    { no: 1, name: "conversation_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "threads", kind: "message", T: Sms_Thread, repeated: true },
  ],
);

/**
 * A thread is the text from one participant.
 *
 * @generated from message wfo.vanalytics.v2.Sms.Thread
 */
export const Sms_Thread = proto3.makeMessageType(
  "wfo.vanalytics.v2.Sms.Thread",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "segments", kind: "message", T: Sms_Segment, repeated: true },
  ],
  {localName: "Sms_Thread"},
);

/**
 * A segment of text.
 *
 * @generated from message wfo.vanalytics.v2.Sms.Segment
 */
export const Sms_Segment = proto3.makeMessageType(
  "wfo.vanalytics.v2.Sms.Segment",
  () => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Sms_Segment"},
);

/**
 * Call specific transcript metadata.
 *
 * @generated from message wfo.vanalytics.v2.Call
 */
export const Call = proto3.makeMessageType(
  "wfo.vanalytics.v2.Call",
  () => [
    { no: 1, name: "call_sid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "call_type", kind: "enum", T: proto3.getEnumType(CallType_Enum) },
    { no: 3, name: "audio_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "threads", kind: "message", T: Call_Thread, repeated: true },
  ],
);

/**
 * A thread is the text from one participant.
 *
 * @generated from message wfo.vanalytics.v2.Call.Thread
 */
export const Call_Thread = proto3.makeMessageType(
  "wfo.vanalytics.v2.Call.Thread",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "segments", kind: "message", T: Call_Segment, repeated: true },
  ],
  {localName: "Call_Thread"},
);

/**
 * A segment of text.
 *
 * @generated from message wfo.vanalytics.v2.Call.Segment
 */
export const Call_Segment = proto3.makeMessageType(
  "wfo.vanalytics.v2.Call.Segment",
  () => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Call_Segment"},
);

/**
 * The request for the search transcripts RPC.
 *
 * @generated from message wfo.vanalytics.v2.SearchTranscriptsRequest
 */
export const SearchTranscriptsRequest = proto3.makeMessageType(
  "wfo.vanalytics.v2.SearchTranscriptsRequest",
  () => [
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "read_mask", kind: "message", T: FieldMask },
    { no: 5, name: "bool_query", kind: "message", T: TranscriptBoolQuery },
    { no: 6, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "highlight", kind: "message", T: Highlight },
  ],
);

/**
 * Configuration to enable and control text highlights.
 *
 * @generated from message wfo.vanalytics.v2.Highlight
 */
export const Highlight = proto3.makeMessageType(
  "wfo.vanalytics.v2.Highlight",
  () => [
    { no: 1, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "suffix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The response for the search transcripts RPC.
 *
 * @generated from message wfo.vanalytics.v2.SearchTranscriptsResponse
 */
export const SearchTranscriptsResponse = proto3.makeMessageType(
  "wfo.vanalytics.v2.SearchTranscriptsResponse",
  () => [
    { no: 1, name: "hits", kind: "message", T: SearchTranscriptsResponse_Hit, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A search response hit.
 *
 * @generated from message wfo.vanalytics.v2.SearchTranscriptsResponse.Hit
 */
export const SearchTranscriptsResponse_Hit = proto3.makeMessageType(
  "wfo.vanalytics.v2.SearchTranscriptsResponse.Hit",
  () => [
    { no: 1, name: "transcript", kind: "message", T: Transcript },
  ],
  {localName: "SearchTranscriptsResponse_Hit"},
);

/**
 * Boolean query to filter transcripts.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptBoolQuery
 */
export const TranscriptBoolQuery = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptBoolQuery",
  () => [
    { no: 1, name: "transcript", kind: "message", T: TranscriptQuery },
  ],
);

/**
 * Query to filter transcripts.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery
 */
export const TranscriptQuery = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery",
  () => [
    { no: 1, name: "transcript_sid", kind: "message", T: TranscriptQuery_TranscriptSid },
    { no: 2, name: "channel", kind: "message", T: TranscriptQuery_Channel },
    { no: 3, name: "metadata", kind: "message", T: TranscriptQuery_Metadata },
    { no: 4, name: "threads", kind: "message", T: TranscriptQuery_Threads },
  ],
);

/**
 * Query constraints on transcript sid.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.TranscriptSid
 */
export const TranscriptQuery_TranscriptSid = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.TranscriptSid",
  () => [
    { no: 1, name: "any", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ],
  {localName: "TranscriptQuery_TranscriptSid"},
);

/**
 * Query constraints on channel.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Channel
 */
export const TranscriptQuery_Channel = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Channel",
  () => [
    { no: 1, name: "any", kind: "enum", T: proto3.getEnumType(Channel), repeated: true },
  ],
  {localName: "TranscriptQuery_Channel"},
);

/**
 * Query constraints on metadata.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Metadata
 */
export const TranscriptQuery_Metadata = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Metadata",
  () => [
    { no: 1, name: "call", kind: "message", T: TranscriptQuery_Call },
    { no: 2, name: "sms", kind: "message", T: TranscriptQuery_Sms },
  ],
  {localName: "TranscriptQuery_Metadata"},
);

/**
 * Query constraints on call metadata.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Call
 */
export const TranscriptQuery_Call = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Call",
  () => [
    { no: 1, name: "call_sid", kind: "message", T: TranscriptQuery_Call_CallSid },
    { no: 2, name: "audio_time", kind: "message", T: TranscriptQuery_Call_AudioTime },
    { no: 3, name: "call_type", kind: "message", T: TranscriptQuery_Call_CallType },
  ],
  {localName: "TranscriptQuery_Call"},
);

/**
 * Query constraints on call type.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Call.CallType
 */
export const TranscriptQuery_Call_CallType = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Call.CallType",
  () => [
    { no: 1, name: "any", kind: "enum", T: proto3.getEnumType(CallType_Enum), repeated: true },
  ],
  {localName: "TranscriptQuery_Call_CallType"},
);

/**
 * Query constraints on call sid.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Call.CallSid
 */
export const TranscriptQuery_Call_CallSid = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Call.CallSid",
  () => [
    { no: 1, name: "any", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ],
  {localName: "TranscriptQuery_Call_CallSid"},
);

/**
 * Query constraints on audio time.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime
 */
export const TranscriptQuery_Call_AudioTime = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Call.AudioTime",
  () => [
    { no: 1, name: "gte", kind: "message", T: Int32Value },
    { no: 2, name: "lte", kind: "message", T: Int32Value },
    { no: 3, name: "gt", kind: "message", T: Int32Value },
    { no: 4, name: "lt", kind: "message", T: Int32Value },
  ],
  {localName: "TranscriptQuery_Call_AudioTime"},
);

/**
 * Query constraints on sms metadata.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Sms
 */
export const TranscriptQuery_Sms = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Sms",
  () => [
    { no: 1, name: "conversation_sid", kind: "message", T: TranscriptQuery_Sms_ConversationSid },
  ],
  {localName: "TranscriptQuery_Sms"},
);

/**
 * Query constraints on conversation sid.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Sms.ConversationSid
 */
export const TranscriptQuery_Sms_ConversationSid = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Sms.ConversationSid",
  () => [
    { no: 1, name: "any", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ],
  {localName: "TranscriptQuery_Sms_ConversationSid"},
);

/**
 * Query constraints on threads.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Threads
 */
export const TranscriptQuery_Threads = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Threads",
  () => [
    { no: 4, name: "id", kind: "message", T: TranscriptQuery_Threads_Id },
    { no: 5, name: "text", kind: "message", T: TranscriptQuery_Threads_Text },
  ],
  {localName: "TranscriptQuery_Threads"},
);

/**
 * Query constraints on thread id.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Threads.Id
 */
export const TranscriptQuery_Threads_Id = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Threads.Id",
  () => [
    { no: 1, name: "any", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
  {localName: "TranscriptQuery_Threads_Id"},
);

/**
 * Query constraints on thread text.
 *
 * @generated from message wfo.vanalytics.v2.TranscriptQuery.Threads.Text
 */
export const TranscriptQuery_Threads_Text = proto3.makeMessageType(
  "wfo.vanalytics.v2.TranscriptQuery.Threads.Text",
  () => [
    { no: 1, name: "match", kind: "message", T: Match },
    { no: 2, name: "span_near", kind: "message", T: SpanNear },
  ],
  {localName: "TranscriptQuery_Threads_Text"},
);

/**
 *
 * Defines an automatic max allowable edit distance based on the length of the
 * text to match.
 *
 * length  <  low -- Must match exactly.
 * length  < high -- Must match with one edit allowed.
 * length >= high -- Must match with two edits allowed.
 *
 * @generated from message wfo.vanalytics.v2.FuzzinessAuto
 */
export const FuzzinessAuto = proto3.makeMessageType(
  "wfo.vanalytics.v2.FuzzinessAuto",
  () => [
    { no: 1, name: "low", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "high", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * Query text terms with optional fuzziness.
 *
 * @generated from message wfo.vanalytics.v2.Match
 */
export const Match = proto3.makeMessageType(
  "wfo.vanalytics.v2.Match",
  () => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "fuzziness_auto", kind: "message", T: FuzzinessAuto, oneof: "fuzziness" },
    { no: 16, name: "fuzziness_value", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "fuzziness" },
  ],
);

/**
 * Query which matches a list of clauses that are near to each other.
 *
 * @generated from message wfo.vanalytics.v2.SpanNear
 */
export const SpanNear = proto3.makeMessageType(
  "wfo.vanalytics.v2.SpanNear",
  () => [
    { no: 1, name: "slop", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "in_order", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "clauses", kind: "message", T: SpanNear_Clause, repeated: true },
  ],
);

/**
 * Generic clause for use in span near queries.
 *
 * @generated from message wfo.vanalytics.v2.SpanNear.Clause
 */
export const SpanNear_Clause = proto3.makeMessageType(
  "wfo.vanalytics.v2.SpanNear.Clause",
  () => [
    { no: 1, name: "span_near", kind: "message", T: SpanNear, oneof: "match" },
    { no: 2, name: "span_fuzzy", kind: "message", T: SpanFuzzy, oneof: "match" },
    { no: 3, name: "span_term", kind: "message", T: SpanTerm, oneof: "match" },
  ],
  {localName: "SpanNear_Clause"},
);

/**
 * Query which matches a span term exactly.
 *
 * @generated from message wfo.vanalytics.v2.SpanTerm
 */
export const SpanTerm = proto3.makeMessageType(
  "wfo.vanalytics.v2.SpanTerm",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Query which matches a span term with fuzziness.
 *
 * @generated from message wfo.vanalytics.v2.SpanFuzzy
 */
export const SpanFuzzy = proto3.makeMessageType(
  "wfo.vanalytics.v2.SpanFuzzy",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "fuzziness_auto", kind: "message", T: FuzzinessAuto, oneof: "fuzziness" },
    { no: 11, name: "fuzziness_value", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "fuzziness" },
  ],
);

